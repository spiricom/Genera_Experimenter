
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce10  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800d0a8  0800d0a8  0001d0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d734  0800d734  0001d734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d73c  0800d73c  0001d73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d740  0800d740  0001d740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  0800d744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008480  20000088  0800d7c8  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00004000  20008508  0800d7c8  00028508  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00030000  2**5
                  ALLOC
 10 .RAM_D2       0000040c  30000000  30000000  00030000  2**5
                  ALLOC
 11 .RAM_D3       000000c0  38000000  38000000  00030000  2**5
                  ALLOC
 12 .SDRAM        02000000  60000000  60000000  00030000  2**5
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005facf  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00008d17  00000000  00000000  0007fb81  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00023da9  00000000  00000000  00088898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00002bc8  00000000  00000000  000ac648  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002fa8  00000000  00000000  000af210  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00042cd0  00000000  00000000  000b21b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0002e3f3  00000000  00000000  000f4e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0018a3b2  00000000  00000000  0012327b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  002ad62d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00008034  00000000  00000000  002ad6a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000088 	.word	0x20000088
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d090 	.word	0x0800d090

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000008c 	.word	0x2000008c
 80002d4:	0800d090 	.word	0x0800d090

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <HAL_InitTick+0x44>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b90b      	cbnz	r3, 80005e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80005de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005e0:	4770      	bx	lr
{
 80005e2:	b510      	push	{r4, lr}
 80005e4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <HAL_InitTick+0x48>)
 80005f0:	6810      	ldr	r0, [r2, #0]
 80005f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80005f6:	f001 f897 	bl	8001728 <HAL_SYSTICK_Config>
 80005fa:	b968      	cbnz	r0, 8000618 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fc:	2c0f      	cmp	r4, #15
 80005fe:	d901      	bls.n	8000604 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000600:	2001      	movs	r0, #1
 8000602:	e00a      	b.n	800061a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	4621      	mov	r1, r4
 8000608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800060c:	f001 f84c 	bl	80016a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <HAL_InitTick+0x44>)
 8000612:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 8000614:	2000      	movs	r0, #0
 8000616:	e000      	b.n	800061a <HAL_InitTick+0x42>
    return HAL_ERROR;
 8000618:	2001      	movs	r0, #1
}
 800061a:	bd10      	pop	{r4, pc}
 800061c:	20000000 	.word	0x20000000
 8000620:	20000014 	.word	0x20000014

08000624 <HAL_Init>:
{
 8000624:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000626:	2003      	movs	r0, #3
 8000628:	f001 f82c 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800062c:	f003 f82c 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8000630:	490f      	ldr	r1, [pc, #60]	; (8000670 <HAL_Init+0x4c>)
 8000632:	698b      	ldr	r3, [r1, #24]
 8000634:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000638:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_Init+0x50>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	f003 031f 	and.w	r3, r3, #31
 8000640:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000642:	698b      	ldr	r3, [r1, #24]
 8000644:	f003 030f 	and.w	r3, r3, #15
 8000648:	5cd3      	ldrb	r3, [r2, r3]
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	fa20 f303 	lsr.w	r3, r0, r3
 8000652:	4a09      	ldr	r2, [pc, #36]	; (8000678 <HAL_Init+0x54>)
 8000654:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_Init+0x58>)
 8000658:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ffbc 	bl	80005d8 <HAL_InitTick>
 8000660:	b110      	cbz	r0, 8000668 <HAL_Init+0x44>
    return HAL_ERROR;
 8000662:	2401      	movs	r4, #1
}
 8000664:	4620      	mov	r0, r4
 8000666:	bd10      	pop	{r4, pc}
 8000668:	4604      	mov	r4, r0
  HAL_MspInit();
 800066a:	f00a fc7b 	bl	800af64 <HAL_MspInit>
  return HAL_OK;
 800066e:	e7f9      	b.n	8000664 <HAL_Init+0x40>
 8000670:	58024400 	.word	0x58024400
 8000674:	0800d0d4 	.word	0x0800d0d4
 8000678:	20000018 	.word	0x20000018
 800067c:	20000014 	.word	0x20000014

08000680 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_IncTick+0x10>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <HAL_IncTick+0x14>)
 8000686:	6811      	ldr	r1, [r2, #0]
 8000688:	440b      	add	r3, r1
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000
 8000694:	200000f4 	.word	0x200000f4

08000698 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000698:	4b01      	ldr	r3, [pc, #4]	; (80006a0 <HAL_GetTick+0x8>)
 800069a:	6818      	ldr	r0, [r3, #0]
}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200000f4 	.word	0x200000f4

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b538      	push	{r3, r4, r5, lr}
 80006a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006a8:	f7ff fff6 	bl	8000698 <HAL_GetTick>
 80006ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80006b2:	d002      	beq.n	80006ba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <HAL_Delay+0x24>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ba:	f7ff ffed 	bl	8000698 <HAL_GetTick>
 80006be:	1b40      	subs	r0, r0, r5
 80006c0:	42a0      	cmp	r0, r4
 80006c2:	d3fa      	bcc.n	80006ba <HAL_Delay+0x16>
  {
  }
}
 80006c4:	bd38      	pop	{r3, r4, r5, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000

080006cc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <HAL_GetREVID+0x8>)
 80006ce:	6818      	ldr	r0, [r3, #0]
}
 80006d0:	0c00      	lsrs	r0, r0, #16
 80006d2:	4770      	bx	lr
 80006d4:	5c001000 	.word	0x5c001000

080006d8 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <HAL_SetFMCMemorySwappingConfig+0x10>)
 80006da:	6813      	ldr	r3, [r2, #0]
 80006dc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80006e0:	4318      	orrs	r0, r3
 80006e2:	6010      	str	r0, [r2, #0]
}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	52004000 	.word	0x52004000

080006ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80006ec:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80006ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80006f0:	f009 ffbe 	bl	800a670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80006f4:	bd08      	pop	{r3, pc}

080006f6 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80006f6:	4770      	bx	lr

080006f8 <HAL_ADC_ErrorCallback>:
}
 80006f8:	4770      	bx	lr
	...

080006fc <HAL_ADC_IRQHandler>:
{
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000700:	6803      	ldr	r3, [r0, #0]
 8000702:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000704:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000706:	49a6      	ldr	r1, [pc, #664]	; (80009a0 <HAL_ADC_IRQHandler+0x2a4>)
 8000708:	4aa6      	ldr	r2, [pc, #664]	; (80009a4 <HAL_ADC_IRQHandler+0x2a8>)
 800070a:	4293      	cmp	r3, r2
 800070c:	bf18      	it	ne
 800070e:	428b      	cmpne	r3, r1
 8000710:	d140      	bne.n	8000794 <HAL_ADC_IRQHandler+0x98>
 8000712:	4ba5      	ldr	r3, [pc, #660]	; (80009a8 <HAL_ADC_IRQHandler+0x2ac>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000714:	689f      	ldr	r7, [r3, #8]
 8000716:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800071a:	f015 0f02 	tst.w	r5, #2
 800071e:	d010      	beq.n	8000742 <HAL_ADC_IRQHandler+0x46>
 8000720:	f016 0f02 	tst.w	r6, #2
 8000724:	d00d      	beq.n	8000742 <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000726:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000728:	f013 0f10 	tst.w	r3, #16
 800072c:	d103      	bne.n	8000736 <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800072e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000734:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000736:	4620      	mov	r0, r4
 8000738:	f000 fee6 	bl	8001508 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800073c:	6823      	ldr	r3, [r4, #0]
 800073e:	2202      	movs	r2, #2
 8000740:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000742:	f015 0f04 	tst.w	r5, #4
 8000746:	d002      	beq.n	800074e <HAL_ADC_IRQHandler+0x52>
 8000748:	f016 0f04 	tst.w	r6, #4
 800074c:	d105      	bne.n	800075a <HAL_ADC_IRQHandler+0x5e>
 800074e:	f015 0f08 	tst.w	r5, #8
 8000752:	d04f      	beq.n	80007f4 <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000754:	f016 0f08 	tst.w	r6, #8
 8000758:	d04c      	beq.n	80007f4 <HAL_ADC_IRQHandler+0xf8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800075a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800075c:	f013 0f10 	tst.w	r3, #16
 8000760:	d103      	bne.n	800076a <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000762:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000768:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800076a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000772:	d139      	bne.n	80007e8 <HAL_ADC_IRQHandler+0xec>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000774:	4a8b      	ldr	r2, [pc, #556]	; (80009a4 <HAL_ADC_IRQHandler+0x2a8>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d00e      	beq.n	8000798 <HAL_ADC_IRQHandler+0x9c>
 800077a:	461a      	mov	r2, r3
 800077c:	4293      	cmp	r3, r2
 800077e:	d00e      	beq.n	800079e <HAL_ADC_IRQHandler+0xa2>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000780:	2f05      	cmp	r7, #5
 8000782:	bf14      	ite	ne
 8000784:	2100      	movne	r1, #0
 8000786:	2101      	moveq	r1, #1
 8000788:	b14f      	cbz	r7, 800079e <HAL_ADC_IRQHandler+0xa2>
 800078a:	b941      	cbnz	r1, 800079e <HAL_ADC_IRQHandler+0xa2>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800078c:	2f09      	cmp	r7, #9
 800078e:	d006      	beq.n	800079e <HAL_ADC_IRQHandler+0xa2>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000790:	68d2      	ldr	r2, [r2, #12]
 8000792:	e005      	b.n	80007a0 <HAL_ADC_IRQHandler+0xa4>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000794:	4b85      	ldr	r3, [pc, #532]	; (80009ac <HAL_ADC_IRQHandler+0x2b0>)
 8000796:	e7bd      	b.n	8000714 <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000798:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800079c:	e7ee      	b.n	800077c <HAL_ADC_IRQHandler+0x80>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800079e:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80007a0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80007a4:	d120      	bne.n	80007e8 <HAL_ADC_IRQHandler+0xec>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	f012 0f08 	tst.w	r2, #8
 80007ac:	d01c      	beq.n	80007e8 <HAL_ADC_IRQHandler+0xec>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	f012 0f04 	tst.w	r2, #4
 80007b4:	d110      	bne.n	80007d8 <HAL_ADC_IRQHandler+0xdc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	f022 020c 	bic.w	r2, r2, #12
 80007bc:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80007be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007c4:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80007c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007c8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80007cc:	d10c      	bne.n	80007e8 <HAL_ADC_IRQHandler+0xec>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6563      	str	r3, [r4, #84]	; 0x54
 80007d6:	e007      	b.n	80007e8 <HAL_ADC_IRQHandler+0xec>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80007e8:	4620      	mov	r0, r4
 80007ea:	f009 fef5 	bl	800a5d8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80007ee:	6823      	ldr	r3, [r4, #0]
 80007f0:	220c      	movs	r2, #12
 80007f2:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80007f4:	f015 0f20 	tst.w	r5, #32
 80007f8:	d002      	beq.n	8000800 <HAL_ADC_IRQHandler+0x104>
 80007fa:	f016 0f20 	tst.w	r6, #32
 80007fe:	d105      	bne.n	800080c <HAL_ADC_IRQHandler+0x110>
 8000800:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000804:	d063      	beq.n	80008ce <HAL_ADC_IRQHandler+0x1d2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000806:	f016 0f40 	tst.w	r6, #64	; 0x40
 800080a:	d060      	beq.n	80008ce <HAL_ADC_IRQHandler+0x1d2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800080c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800080e:	f013 0f10 	tst.w	r3, #16
 8000812:	d103      	bne.n	800081c <HAL_ADC_IRQHandler+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000814:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000816:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800081a:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800081c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800081e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000820:	f412 7fc0 	tst.w	r2, #384	; 0x180
 8000824:	d119      	bne.n	800085a <HAL_ADC_IRQHandler+0x15e>
 8000826:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000828:	68da      	ldr	r2, [r3, #12]
 800082a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800082e:	d116      	bne.n	800085e <HAL_ADC_IRQHandler+0x162>
 8000830:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000832:	4a5c      	ldr	r2, [pc, #368]	; (80009a4 <HAL_ADC_IRQHandler+0x2a8>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d014      	beq.n	8000862 <HAL_ADC_IRQHandler+0x166>
 8000838:	461a      	mov	r2, r3
 800083a:	4293      	cmp	r3, r2
 800083c:	d014      	beq.n	8000868 <HAL_ADC_IRQHandler+0x16c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800083e:	2f06      	cmp	r7, #6
 8000840:	bf14      	ite	ne
 8000842:	f04f 0c00 	movne.w	ip, #0
 8000846:	f04f 0c01 	moveq.w	ip, #1
 800084a:	b16f      	cbz	r7, 8000868 <HAL_ADC_IRQHandler+0x16c>
 800084c:	f1bc 0f00 	cmp.w	ip, #0
 8000850:	d10a      	bne.n	8000868 <HAL_ADC_IRQHandler+0x16c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000852:	2f07      	cmp	r7, #7
 8000854:	d008      	beq.n	8000868 <HAL_ADC_IRQHandler+0x16c>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000856:	68d2      	ldr	r2, [r2, #12]
 8000858:	e007      	b.n	800086a <HAL_ADC_IRQHandler+0x16e>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800085a:	2100      	movs	r1, #0
 800085c:	e7e4      	b.n	8000828 <HAL_ADC_IRQHandler+0x12c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800085e:	2000      	movs	r0, #0
 8000860:	e7e7      	b.n	8000832 <HAL_ADC_IRQHandler+0x136>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000862:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000866:	e7e8      	b.n	800083a <HAL_ADC_IRQHandler+0x13e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000868:	68da      	ldr	r2, [r3, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800086a:	b931      	cbnz	r1, 800087a <HAL_ADC_IRQHandler+0x17e>
 800086c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000870:	d127      	bne.n	80008c2 <HAL_ADC_IRQHandler+0x1c6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000872:	b330      	cbz	r0, 80008c2 <HAL_ADC_IRQHandler+0x1c6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8000874:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000878:	d123      	bne.n	80008c2 <HAL_ADC_IRQHandler+0x1c6>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800087a:	6819      	ldr	r1, [r3, #0]
 800087c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000880:	d01f      	beq.n	80008c2 <HAL_ADC_IRQHandler+0x1c6>
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000882:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000886:	d11c      	bne.n	80008c2 <HAL_ADC_IRQHandler+0x1c6>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	f012 0f08 	tst.w	r2, #8
 800088e:	d110      	bne.n	80008b2 <HAL_ADC_IRQHandler+0x1b6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000896:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000898:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800089a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800089e:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80008a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80008a6:	d10c      	bne.n	80008c2 <HAL_ADC_IRQHandler+0x1c6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6563      	str	r3, [r4, #84]	; 0x54
 80008b0:	e007      	b.n	80008c2 <HAL_ADC_IRQHandler+0x1c6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80008c2:	4620      	mov	r0, r4
 80008c4:	f000 fe1c 	bl	8001500 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	2260      	movs	r2, #96	; 0x60
 80008cc:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80008ce:	f015 0f80 	tst.w	r5, #128	; 0x80
 80008d2:	d002      	beq.n	80008da <HAL_ADC_IRQHandler+0x1de>
 80008d4:	f016 0f80 	tst.w	r6, #128	; 0x80
 80008d8:	d136      	bne.n	8000948 <HAL_ADC_IRQHandler+0x24c>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80008da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80008de:	d002      	beq.n	80008e6 <HAL_ADC_IRQHandler+0x1ea>
 80008e0:	f416 7f80 	tst.w	r6, #256	; 0x100
 80008e4:	d13b      	bne.n	800095e <HAL_ADC_IRQHandler+0x262>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80008e6:	f415 7f00 	tst.w	r5, #512	; 0x200
 80008ea:	d002      	beq.n	80008f2 <HAL_ADC_IRQHandler+0x1f6>
 80008ec:	f416 7f00 	tst.w	r6, #512	; 0x200
 80008f0:	d141      	bne.n	8000976 <HAL_ADC_IRQHandler+0x27a>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80008f2:	f015 0f10 	tst.w	r5, #16
 80008f6:	d020      	beq.n	800093a <HAL_ADC_IRQHandler+0x23e>
 80008f8:	f016 0f10 	tst.w	r6, #16
 80008fc:	d01d      	beq.n	800093a <HAL_ADC_IRQHandler+0x23e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80008fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000900:	b16b      	cbz	r3, 800091e <HAL_ADC_IRQHandler+0x222>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8000902:	2f00      	cmp	r7, #0
 8000904:	d045      	beq.n	8000992 <HAL_ADC_IRQHandler+0x296>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	4925      	ldr	r1, [pc, #148]	; (80009a0 <HAL_ADC_IRQHandler+0x2a4>)
 800090a:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <HAL_ADC_IRQHandler+0x2a8>)
 800090c:	4293      	cmp	r3, r2
 800090e:	bf18      	it	ne
 8000910:	428b      	cmpne	r3, r1
 8000912:	d13c      	bne.n	800098e <HAL_ADC_IRQHandler+0x292>
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_ADC_IRQHandler+0x2ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800091c:	d00a      	beq.n	8000934 <HAL_ADC_IRQHandler+0x238>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800091e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000920:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000924:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 800092e:	4620      	mov	r0, r4
 8000930:	f7ff fee2 	bl	80006f8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	2210      	movs	r2, #16
 8000938:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800093a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800093e:	d002      	beq.n	8000946 <HAL_ADC_IRQHandler+0x24a>
 8000940:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8000944:	d134      	bne.n	80009b0 <HAL_ADC_IRQHandler+0x2b4>
}
 8000946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000948:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800094a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000950:	4620      	mov	r0, r4
 8000952:	f7ff fed0 	bl	80006f6 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	e7bd      	b.n	80008da <HAL_ADC_IRQHandler+0x1de>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800095e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000964:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000966:	4620      	mov	r0, r4
 8000968:	f000 fdcc 	bl	8001504 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	e7b7      	b.n	80008e6 <HAL_ADC_IRQHandler+0x1ea>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000976:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800097e:	4620      	mov	r0, r4
 8000980:	f000 fdc1 	bl	8001506 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	e7b1      	b.n	80008f2 <HAL_ADC_IRQHandler+0x1f6>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <HAL_ADC_IRQHandler+0x2b0>)
 8000990:	e7c1      	b.n	8000916 <HAL_ADC_IRQHandler+0x21a>
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	f013 0f03 	tst.w	r3, #3
 800099a:	d0cb      	beq.n	8000934 <HAL_ADC_IRQHandler+0x238>
 800099c:	e7bf      	b.n	800091e <HAL_ADC_IRQHandler+0x222>
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000
 80009a4:	40022100 	.word	0x40022100
 80009a8:	40022300 	.word	0x40022300
 80009ac:	58026300 	.word	0x58026300
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80009b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80009b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80009c8:	4620      	mov	r0, r4
 80009ca:	f000 fd9a 	bl	8001502 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80009ce:	e7ba      	b.n	8000946 <HAL_ADC_IRQHandler+0x24a>

080009d0 <ADC_DMAConvCplt>:
{
 80009d0:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80009d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80009d6:	f012 0f50 	tst.w	r2, #80	; 0x50
 80009da:	d131      	bne.n	8000a40 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80009de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009e2:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	6811      	ldr	r1, [r2, #0]
 80009e8:	f011 0f08 	tst.w	r1, #8
 80009ec:	d014      	beq.n	8000a18 <ADC_DMAConvCplt+0x48>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80009ee:	68d1      	ldr	r1, [r2, #12]
 80009f0:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80009f4:	d120      	bne.n	8000a38 <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80009f6:	68d2      	ldr	r2, [r2, #12]
 80009f8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80009fc:	d11c      	bne.n	8000a38 <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80009fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a04:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000a06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a08:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000a0c:	d114      	bne.n	8000a38 <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a10:	f042 0201 	orr.w	r2, r2, #1
 8000a14:	655a      	str	r2, [r3, #84]	; 0x54
 8000a16:	e00f      	b.n	8000a38 <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8000a18:	68d2      	ldr	r2, [r2, #12]
 8000a1a:	f012 0f03 	tst.w	r2, #3
 8000a1e:	d10b      	bne.n	8000a38 <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a26:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a2a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000a2e:	d103      	bne.n	8000a38 <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a32:	f042 0201 	orr.w	r2, r2, #1
 8000a36:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f009 fdcd 	bl	800a5d8 <HAL_ADC_ConvCpltCallback>
}
 8000a3e:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a42:	f012 0f10 	tst.w	r2, #16
 8000a46:	d103      	bne.n	8000a50 <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	4798      	blx	r3
}
 8000a4e:	e7f6      	b.n	8000a3e <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fe51 	bl	80006f8 <HAL_ADC_ErrorCallback>
 8000a56:	e7f2      	b.n	8000a3e <ADC_DMAConvCplt+0x6e>

08000a58 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000a58:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a5a:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000a5c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a62:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000a64:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000a6c:	f7ff fe44 	bl	80006f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000a70:	bd08      	pop	{r3, pc}
	...

08000a74 <HAL_ADC_ConfigChannel>:
{
 8000a74:	b4f0      	push	{r4, r5, r6, r7}
 8000a76:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8000a78:	2200      	movs	r2, #0
 8000a7a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000a7c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000a80:	2a01      	cmp	r2, #1
 8000a82:	f000 823b 	beq.w	8000efc <HAL_ADC_ConfigChannel+0x488>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a8e:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a90:	68a2      	ldr	r2, [r4, #8]
 8000a92:	f012 0204 	ands.w	r2, r2, #4
 8000a96:	d00a      	beq.n	8000aae <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a98:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8000a9a:	f042 0220 	orr.w	r2, r2, #32
 8000a9e:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000aa0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bcf0      	pop	{r4, r5, r6, r7}
 8000aac:	4770      	bx	lr
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000aae:	6808      	ldr	r0, [r1, #0]
 8000ab0:	f3c0 0513 	ubfx	r5, r0, #0, #20
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d150      	bne.n	8000b5a <HAL_ADC_ConfigChannel+0xe6>
 8000ab8:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8000abc:	2501      	movs	r5, #1
 8000abe:	4085      	lsls	r5, r0
 8000ac0:	69e0      	ldr	r0, [r4, #28]
 8000ac2:	4328      	orrs	r0, r5
 8000ac4:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000ac6:	681f      	ldr	r7, [r3, #0]
 8000ac8:	684e      	ldr	r6, [r1, #4]
 8000aca:	680d      	ldr	r5, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	0a30      	lsrs	r0, r6, #8
 8000ad0:	0080      	lsls	r0, r0, #2
 8000ad2:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 8000ad6:	583c      	ldr	r4, [r7, r0]
 8000ad8:	f006 061f 	and.w	r6, r6, #31
 8000adc:	f04f 0c1f 	mov.w	ip, #31
 8000ae0:	fa0c fc06 	lsl.w	ip, ip, r6
 8000ae4:	ea24 040c 	bic.w	r4, r4, ip
 8000ae8:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8000aec:	40b5      	lsls	r5, r6
 8000aee:	432c      	orrs	r4, r5
 8000af0:	503c      	str	r4, [r7, r0]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000af2:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000af4:	6884      	ldr	r4, [r0, #8]
 8000af6:	f014 0f04 	tst.w	r4, #4
 8000afa:	d037      	beq.n	8000b6c <HAL_ADC_ConfigChannel+0xf8>
 8000afc:	2401      	movs	r4, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000afe:	6885      	ldr	r5, [r0, #8]
 8000b00:	f015 0f08 	tst.w	r5, #8
 8000b04:	d034      	beq.n	8000b70 <HAL_ADC_ConfigChannel+0xfc>
 8000b06:	2501      	movs	r5, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b08:	432c      	orrs	r4, r5
 8000b0a:	d165      	bne.n	8000bd8 <HAL_ADC_ConfigChannel+0x164>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b0c:	680f      	ldr	r7, [r1, #0]
 8000b0e:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b10:	f100 0514 	add.w	r5, r0, #20
 8000b14:	0e78      	lsrs	r0, r7, #25
 8000b16:	0080      	lsls	r0, r0, #2
 8000b18:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000b1c:	582e      	ldr	r6, [r5, r0]
 8000b1e:	f3c7 5704 	ubfx	r7, r7, #20, #5
 8000b22:	f04f 0c07 	mov.w	ip, #7
 8000b26:	fa0c fc07 	lsl.w	ip, ip, r7
 8000b2a:	ea26 060c 	bic.w	r6, r6, ip
 8000b2e:	40bc      	lsls	r4, r7
 8000b30:	4334      	orrs	r4, r6
 8000b32:	502c      	str	r4, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000b34:	48a9      	ldr	r0, [pc, #676]	; (8000ddc <HAL_ADC_ConfigChannel+0x368>)
 8000b36:	6800      	ldr	r0, [r0, #0]
 8000b38:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8000b3c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8000b40:	d018      	beq.n	8000b74 <HAL_ADC_ConfigChannel+0x100>
 8000b42:	681c      	ldr	r4, [r3, #0]
 8000b44:	68e0      	ldr	r0, [r4, #12]
 8000b46:	f010 0f10 	tst.w	r0, #16
 8000b4a:	d167      	bne.n	8000c1c <HAL_ADC_ConfigChannel+0x1a8>
 8000b4c:	6948      	ldr	r0, [r1, #20]
 8000b4e:	68e4      	ldr	r4, [r4, #12]
 8000b50:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8000b54:	0064      	lsls	r4, r4, #1
 8000b56:	40a0      	lsls	r0, r4
 8000b58:	e013      	b.n	8000b82 <HAL_ADC_ConfigChannel+0x10e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5a:	fa90 f0a0 	rbit	r0, r0
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000b5e:	fab0 f080 	clz	r0, r0
 8000b62:	f000 001f 	and.w	r0, r0, #31
 8000b66:	2501      	movs	r5, #1
 8000b68:	4085      	lsls	r5, r0
 8000b6a:	e7a9      	b.n	8000ac0 <HAL_ADC_ConfigChannel+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b6c:	2400      	movs	r4, #0
 8000b6e:	e7c6      	b.n	8000afe <HAL_ADC_ConfigChannel+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b70:	2500      	movs	r5, #0
 8000b72:	e7c9      	b.n	8000b08 <HAL_ADC_ConfigChannel+0x94>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000b74:	6948      	ldr	r0, [r1, #20]
 8000b76:	681c      	ldr	r4, [r3, #0]
 8000b78:	68e4      	ldr	r4, [r4, #12]
 8000b7a:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8000b7e:	0064      	lsls	r4, r4, #1
 8000b80:	40a0      	lsls	r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b82:	690d      	ldr	r5, [r1, #16]
 8000b84:	2d04      	cmp	r5, #4
 8000b86:	d057      	beq.n	8000c38 <HAL_ADC_ConfigChannel+0x1c4>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000b88:	681f      	ldr	r7, [r3, #0]
 8000b8a:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b8c:	3760      	adds	r7, #96	; 0x60
  MODIFY_REG(*preg,
 8000b8e:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 8000b92:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8000b96:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000b9a:	4330      	orrs	r0, r6
 8000b9c:	4320      	orrs	r0, r4
 8000b9e:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	690e      	ldr	r6, [r1, #16]
 8000ba6:	7e4c      	ldrb	r4, [r1, #25]
 8000ba8:	2c01      	cmp	r4, #1
 8000baa:	d03f      	beq.n	8000c2c <HAL_ADC_ConfigChannel+0x1b8>
 8000bac:	4615      	mov	r5, r2
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bae:	3060      	adds	r0, #96	; 0x60
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000bb0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8000bb4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000bb8:	432c      	orrs	r4, r5
 8000bba:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000bbe:	681d      	ldr	r5, [r3, #0]
 8000bc0:	690c      	ldr	r4, [r1, #16]
 8000bc2:	7e08      	ldrb	r0, [r1, #24]
 8000bc4:	2801      	cmp	r0, #1
 8000bc6:	d034      	beq.n	8000c32 <HAL_ADC_ConfigChannel+0x1be>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000bc8:	6928      	ldr	r0, [r5, #16]
 8000bca:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8000bce:	f004 041f 	and.w	r4, r4, #31
 8000bd2:	40a2      	lsls	r2, r4
 8000bd4:	4302      	orrs	r2, r0
 8000bd6:	612a      	str	r2, [r5, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bd8:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000bda:	6882      	ldr	r2, [r0, #8]
 8000bdc:	f012 0f01 	tst.w	r2, #1
 8000be0:	f040 8188 	bne.w	8000ef4 <HAL_ADC_ConfigChannel+0x480>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000be4:	680a      	ldr	r2, [r1, #0]
 8000be6:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000be8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8000bec:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8000bf0:	ea24 0406 	bic.w	r4, r4, r6
 8000bf4:	f005 0618 	and.w	r6, r5, #24
 8000bf8:	4d79      	ldr	r5, [pc, #484]	; (8000de0 <HAL_ADC_ConfigChannel+0x36c>)
 8000bfa:	40f5      	lsrs	r5, r6
 8000bfc:	402a      	ands	r2, r5
 8000bfe:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8000c02:	4322      	orrs	r2, r4
 8000c04:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000c08:	68c8      	ldr	r0, [r1, #12]
 8000c0a:	4a76      	ldr	r2, [pc, #472]	; (8000de4 <HAL_ADC_ConfigChannel+0x370>)
 8000c0c:	4290      	cmp	r0, r2
 8000c0e:	d047      	beq.n	8000ca0 <HAL_ADC_ConfigChannel+0x22c>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000c10:	680a      	ldr	r2, [r1, #0]
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f2c0 80e8 	blt.w	8000de8 <HAL_ADC_ConfigChannel+0x374>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c18:	2000      	movs	r0, #0
 8000c1a:	e742      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000c1c:	6948      	ldr	r0, [r1, #20]
 8000c1e:	68e4      	ldr	r4, [r4, #12]
 8000c20:	08a4      	lsrs	r4, r4, #2
 8000c22:	f004 0404 	and.w	r4, r4, #4
 8000c26:	0064      	lsls	r4, r4, #1
 8000c28:	40a0      	lsls	r0, r4
 8000c2a:	e7aa      	b.n	8000b82 <HAL_ADC_ConfigChannel+0x10e>
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000c2c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8000c30:	e7bd      	b.n	8000bae <HAL_ADC_ConfigChannel+0x13a>
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c36:	e7c7      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0x154>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000c3c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c40:	680c      	ldr	r4, [r1, #0]
 8000c42:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c46:	d01c      	beq.n	8000c82 <HAL_ADC_ConfigChannel+0x20e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000c4c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c50:	680c      	ldr	r4, [r1, #0]
 8000c52:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c56:	d019      	beq.n	8000c8c <HAL_ADC_ConfigChannel+0x218>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000c5c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c60:	680c      	ldr	r4, [r1, #0]
 8000c62:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c66:	d016      	beq.n	8000c96 <HAL_ADC_ConfigChannel+0x222>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000c6c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c70:	680c      	ldr	r4, [r1, #0]
 8000c72:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c76:	d1af      	bne.n	8000bd8 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000c78:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000c7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c7e:	66c2      	str	r2, [r0, #108]	; 0x6c
 8000c80:	e7aa      	b.n	8000bd8 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000c82:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000c84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c88:	6602      	str	r2, [r0, #96]	; 0x60
 8000c8a:	e7dd      	b.n	8000c48 <HAL_ADC_ConfigChannel+0x1d4>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000c8c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000c8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c92:	6642      	str	r2, [r0, #100]	; 0x64
 8000c94:	e7e0      	b.n	8000c58 <HAL_ADC_ConfigChannel+0x1e4>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000c96:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000c98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c9c:	6682      	str	r2, [r0, #104]	; 0x68
 8000c9e:	e7e3      	b.n	8000c68 <HAL_ADC_ConfigChannel+0x1f4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ca0:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ca2:	680a      	ldr	r2, [r1, #0]
 8000ca4:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8000ca8:	bb96      	cbnz	r6, 8000d10 <HAL_ADC_ConfigChannel+0x29c>
 8000caa:	0e90      	lsrs	r0, r2, #26
 8000cac:	3001      	adds	r0, #1
 8000cae:	f000 001f 	and.w	r0, r0, #31
 8000cb2:	2809      	cmp	r0, #9
 8000cb4:	bf8c      	ite	hi
 8000cb6:	2000      	movhi	r0, #0
 8000cb8:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000cba:	2800      	cmp	r0, #0
 8000cbc:	d052      	beq.n	8000d64 <HAL_ADC_ConfigChannel+0x2f0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000cbe:	bb9e      	cbnz	r6, 8000d28 <HAL_ADC_ConfigChannel+0x2b4>
 8000cc0:	0e94      	lsrs	r4, r2, #26
 8000cc2:	3401      	adds	r4, #1
 8000cc4:	06a4      	lsls	r4, r4, #26
 8000cc6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000cca:	bbb6      	cbnz	r6, 8000d3a <HAL_ADC_ConfigChannel+0x2c6>
 8000ccc:	0e90      	lsrs	r0, r2, #26
 8000cce:	3001      	adds	r0, #1
 8000cd0:	f000 071f 	and.w	r7, r0, #31
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	40b8      	lsls	r0, r7
 8000cd8:	4304      	orrs	r4, r0
 8000cda:	bbc6      	cbnz	r6, 8000d4e <HAL_ADC_ConfigChannel+0x2da>
 8000cdc:	0e92      	lsrs	r2, r2, #26
 8000cde:	3201      	adds	r2, #1
 8000ce0:	f002 021f 	and.w	r2, r2, #31
 8000ce4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ce8:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000cea:	4322      	orrs	r2, r4
 8000cec:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cee:	3514      	adds	r5, #20
 8000cf0:	0e50      	lsrs	r0, r2, #25
 8000cf2:	0080      	lsls	r0, r0, #2
 8000cf4:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000cf8:	582e      	ldr	r6, [r5, r0]
 8000cfa:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8000cfe:	2707      	movs	r7, #7
 8000d00:	4097      	lsls	r7, r2
 8000d02:	ea26 0607 	bic.w	r6, r6, r7
 8000d06:	fa04 f202 	lsl.w	r2, r4, r2
 8000d0a:	4332      	orrs	r2, r6
 8000d0c:	502a      	str	r2, [r5, r0]
 8000d0e:	e77f      	b.n	8000c10 <HAL_ADC_ConfigChannel+0x19c>
 8000d10:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d14:	fab0 f080 	clz	r0, r0
 8000d18:	3001      	adds	r0, #1
 8000d1a:	f000 001f 	and.w	r0, r0, #31
 8000d1e:	2809      	cmp	r0, #9
 8000d20:	bf8c      	ite	hi
 8000d22:	2000      	movhi	r0, #0
 8000d24:	2001      	movls	r0, #1
 8000d26:	e7c8      	b.n	8000cba <HAL_ADC_ConfigChannel+0x246>
 8000d28:	fa92 f4a2 	rbit	r4, r2
 8000d2c:	fab4 f484 	clz	r4, r4
 8000d30:	3401      	adds	r4, #1
 8000d32:	06a4      	lsls	r4, r4, #26
 8000d34:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000d38:	e7c7      	b.n	8000cca <HAL_ADC_ConfigChannel+0x256>
 8000d3a:	fa92 f0a2 	rbit	r0, r2
 8000d3e:	fab0 f080 	clz	r0, r0
 8000d42:	3001      	adds	r0, #1
 8000d44:	f000 071f 	and.w	r7, r0, #31
 8000d48:	2001      	movs	r0, #1
 8000d4a:	40b8      	lsls	r0, r7
 8000d4c:	e7c4      	b.n	8000cd8 <HAL_ADC_ConfigChannel+0x264>
 8000d4e:	fa92 f2a2 	rbit	r2, r2
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	3201      	adds	r2, #1
 8000d58:	f002 021f 	and.w	r2, r2, #31
 8000d5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d60:	0512      	lsls	r2, r2, #20
 8000d62:	e7c2      	b.n	8000cea <HAL_ADC_ConfigChannel+0x276>
 8000d64:	b9ce      	cbnz	r6, 8000d9a <HAL_ADC_ConfigChannel+0x326>
 8000d66:	0e94      	lsrs	r4, r2, #26
 8000d68:	3401      	adds	r4, #1
 8000d6a:	06a4      	lsls	r4, r4, #26
 8000d6c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000d70:	b9e6      	cbnz	r6, 8000dac <HAL_ADC_ConfigChannel+0x338>
 8000d72:	0e90      	lsrs	r0, r2, #26
 8000d74:	3001      	adds	r0, #1
 8000d76:	f000 071f 	and.w	r7, r0, #31
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	40b8      	lsls	r0, r7
 8000d7e:	4304      	orrs	r4, r0
 8000d80:	b9f6      	cbnz	r6, 8000dc0 <HAL_ADC_ConfigChannel+0x34c>
 8000d82:	0e90      	lsrs	r0, r2, #26
 8000d84:	3001      	adds	r0, #1
 8000d86:	f000 001f 	and.w	r0, r0, #31
 8000d8a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000d8e:	3a1e      	subs	r2, #30
 8000d90:	0512      	lsls	r2, r2, #20
 8000d92:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d96:	4322      	orrs	r2, r4
 8000d98:	e7a8      	b.n	8000cec <HAL_ADC_ConfigChannel+0x278>
 8000d9a:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d9e:	fab4 f484 	clz	r4, r4
 8000da2:	3401      	adds	r4, #1
 8000da4:	06a4      	lsls	r4, r4, #26
 8000da6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000daa:	e7e1      	b.n	8000d70 <HAL_ADC_ConfigChannel+0x2fc>
 8000dac:	fa92 f0a2 	rbit	r0, r2
 8000db0:	fab0 f080 	clz	r0, r0
 8000db4:	3001      	adds	r0, #1
 8000db6:	f000 071f 	and.w	r7, r0, #31
 8000dba:	2001      	movs	r0, #1
 8000dbc:	40b8      	lsls	r0, r7
 8000dbe:	e7de      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x30a>
 8000dc0:	fa92 f0a2 	rbit	r0, r2
 8000dc4:	fab0 f080 	clz	r0, r0
 8000dc8:	3001      	adds	r0, #1
 8000dca:	f000 001f 	and.w	r0, r0, #31
 8000dce:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000dd2:	3a1e      	subs	r2, #30
 8000dd4:	0512      	lsls	r2, r2, #20
 8000dd6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000dda:	e7dc      	b.n	8000d96 <HAL_ADC_ConfigChannel+0x322>
 8000ddc:	5c001000 	.word	0x5c001000
 8000de0:	000fffff 	.word	0x000fffff
 8000de4:	47ff0000 	.word	0x47ff0000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000de8:	6819      	ldr	r1, [r3, #0]
 8000dea:	4845      	ldr	r0, [pc, #276]	; (8000f00 <HAL_ADC_ConfigChannel+0x48c>)
 8000dec:	4c45      	ldr	r4, [pc, #276]	; (8000f04 <HAL_ADC_ConfigChannel+0x490>)
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	bf18      	it	ne
 8000df2:	4281      	cmpne	r1, r0
 8000df4:	bf0c      	ite	eq
 8000df6:	2001      	moveq	r0, #1
 8000df8:	2000      	movne	r0, #0
 8000dfa:	d121      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x3cc>
 8000dfc:	4d42      	ldr	r5, [pc, #264]	; (8000f08 <HAL_ADC_ConfigChannel+0x494>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dfe:	68ac      	ldr	r4, [r5, #8]
 8000e00:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e04:	b310      	cbz	r0, 8000e4c <HAL_ADC_ConfigChannel+0x3d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e06:	483e      	ldr	r0, [pc, #248]	; (8000f00 <HAL_ADC_ConfigChannel+0x48c>)
 8000e08:	6880      	ldr	r0, [r0, #8]
 8000e0a:	f010 0f01 	tst.w	r0, #1
 8000e0e:	d019      	beq.n	8000e44 <HAL_ADC_ConfigChannel+0x3d0>
 8000e10:	2001      	movs	r0, #1
 8000e12:	4f3c      	ldr	r7, [pc, #240]	; (8000f04 <HAL_ADC_ConfigChannel+0x490>)
 8000e14:	68bf      	ldr	r7, [r7, #8]
 8000e16:	f017 0f01 	tst.w	r7, #1
 8000e1a:	d015      	beq.n	8000e48 <HAL_ADC_ConfigChannel+0x3d4>
 8000e1c:	2701      	movs	r7, #1
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	bf0c      	ite	eq
 8000e22:	2001      	moveq	r0, #1
 8000e24:	2000      	movne	r0, #0
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d05e      	beq.n	8000ee8 <HAL_ADC_ConfigChannel+0x474>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000e2a:	4838      	ldr	r0, [pc, #224]	; (8000f0c <HAL_ADC_ConfigChannel+0x498>)
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	d018      	beq.n	8000e62 <HAL_ADC_ConfigChannel+0x3ee>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000e30:	4837      	ldr	r0, [pc, #220]	; (8000f10 <HAL_ADC_ConfigChannel+0x49c>)
 8000e32:	4282      	cmp	r2, r0
 8000e34:	d036      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x430>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000e36:	4837      	ldr	r0, [pc, #220]	; (8000f14 <HAL_ADC_ConfigChannel+0x4a0>)
 8000e38:	4282      	cmp	r2, r0
 8000e3a:	d044      	beq.n	8000ec6 <HAL_ADC_ConfigChannel+0x452>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	e630      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000e40:	4d35      	ldr	r5, [pc, #212]	; (8000f18 <HAL_ADC_ConfigChannel+0x4a4>)
 8000e42:	e7dc      	b.n	8000dfe <HAL_ADC_ConfigChannel+0x38a>
 8000e44:	2000      	movs	r0, #0
 8000e46:	e7e4      	b.n	8000e12 <HAL_ADC_ConfigChannel+0x39e>
 8000e48:	2700      	movs	r7, #0
 8000e4a:	e7e8      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x3aa>
 8000e4c:	4833      	ldr	r0, [pc, #204]	; (8000f1c <HAL_ADC_ConfigChannel+0x4a8>)
 8000e4e:	6880      	ldr	r0, [r0, #8]
 8000e50:	f010 0f01 	tst.w	r0, #1
 8000e54:	d003      	beq.n	8000e5e <HAL_ADC_ConfigChannel+0x3ea>
 8000e56:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e58:	f080 0001 	eor.w	r0, r0, #1
 8000e5c:	e7e3      	b.n	8000e26 <HAL_ADC_ConfigChannel+0x3b2>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e7fa      	b.n	8000e58 <HAL_ADC_ConfigChannel+0x3e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000e62:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8000e66:	d1e3      	bne.n	8000e30 <HAL_ADC_ConfigChannel+0x3bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000e68:	4a2c      	ldr	r2, [pc, #176]	; (8000f1c <HAL_ADC_ConfigChannel+0x4a8>)
 8000e6a:	4291      	cmp	r1, r2
 8000e6c:	d001      	beq.n	8000e72 <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6e:	2000      	movs	r0, #0
 8000e70:	e617      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8000e72:	f446 0200 	orr.w	r2, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e76:	68a9      	ldr	r1, [r5, #8]
 8000e78:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	60aa      	str	r2, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e80:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <HAL_ADC_ConfigChannel+0x4ac>)
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	0992      	lsrs	r2, r2, #6
 8000e86:	4927      	ldr	r1, [pc, #156]	; (8000f24 <HAL_ADC_ConfigChannel+0x4b0>)
 8000e88:	fba1 1202 	umull	r1, r2, r1, r2
 8000e8c:	0992      	lsrs	r2, r2, #6
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000e92:	e002      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x426>
                wait_loop_index--;
 8000e94:	9a01      	ldr	r2, [sp, #4]
 8000e96:	3a01      	subs	r2, #1
 8000e98:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000e9a:	9a01      	ldr	r2, [sp, #4]
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d1f9      	bne.n	8000e94 <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	e5fe      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000ea4:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8000ea8:	d1c5      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0x3c2>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <HAL_ADC_ConfigChannel+0x4a8>)
 8000eac:	4291      	cmp	r1, r2
 8000eae:	d001      	beq.n	8000eb4 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	e5f6      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000eb4:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
 8000eb8:	68a9      	ldr	r1, [r5, #8]
 8000eba:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	e5ed      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000ec6:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8000eca:	d115      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x484>
            if (ADC_VREFINT_INSTANCE(hadc))
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <HAL_ADC_ConfigChannel+0x4a8>)
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	d001      	beq.n	8000ed6 <HAL_ADC_ConfigChannel+0x462>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	e5e5      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8000ed6:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
 8000eda:	68a9      	ldr	r1, [r5, #8]
 8000edc:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e5dc      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	e5d6      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	e5d4      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
 8000ef8:	2000      	movs	r0, #0
 8000efa:	e5d2      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8000efc:	2002      	movs	r0, #2
 8000efe:	e5d3      	b.n	8000aa8 <HAL_ADC_ConfigChannel+0x34>
 8000f00:	40022000 	.word	0x40022000
 8000f04:	40022100 	.word	0x40022100
 8000f08:	40022300 	.word	0x40022300
 8000f0c:	cb840000 	.word	0xcb840000
 8000f10:	c7520000 	.word	0xc7520000
 8000f14:	cfb80000 	.word	0xcfb80000
 8000f18:	58026300 	.word	0x58026300
 8000f1c:	58026000 	.word	0x58026000
 8000f20:	20000014 	.word	0x20000014
 8000f24:	053e2d63 	.word	0x053e2d63

08000f28 <ADC_Enable>:
{
 8000f28:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f2a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	f012 0f01 	tst.w	r2, #1
 8000f32:	d152      	bne.n	8000fda <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000f34:	6899      	ldr	r1, [r3, #8]
 8000f36:	4a2a      	ldr	r2, [pc, #168]	; (8000fe0 <ADC_Enable+0xb8>)
 8000f38:	4211      	tst	r1, r2
 8000f3a:	d009      	beq.n	8000f50 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f44:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	e045      	b.n	8000fdc <ADC_Enable+0xb4>
 8000f50:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8000f52:	6899      	ldr	r1, [r3, #8]
 8000f54:	4a23      	ldr	r2, [pc, #140]	; (8000fe4 <ADC_Enable+0xbc>)
 8000f56:	400a      	ands	r2, r1
 8000f58:	f042 0201 	orr.w	r2, r2, #1
 8000f5c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000f5e:	f7ff fb9b 	bl	8000698 <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	4920      	ldr	r1, [pc, #128]	; (8000fe8 <ADC_Enable+0xc0>)
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <ADC_Enable+0xc4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	bf18      	it	ne
 8000f6e:	428b      	cmpne	r3, r1
 8000f70:	d10d      	bne.n	8000f8e <ADC_Enable+0x66>
 8000f72:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f76:	6892      	ldr	r2, [r2, #8]
 8000f78:	f002 021f 	and.w	r2, r2, #31
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f7c:	491b      	ldr	r1, [pc, #108]	; (8000fec <ADC_Enable+0xc4>)
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d007      	beq.n	8000f92 <ADC_Enable+0x6a>
 8000f82:	4619      	mov	r1, r3
 8000f84:	4299      	cmp	r1, r3
 8000f86:	d00c      	beq.n	8000fa2 <ADC_Enable+0x7a>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f88:	b15a      	cbz	r2, 8000fa2 <ADC_Enable+0x7a>
  return HAL_OK;
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	e026      	b.n	8000fdc <ADC_Enable+0xb4>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <ADC_Enable+0xc8>)
 8000f90:	e7f1      	b.n	8000f76 <ADC_Enable+0x4e>
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f92:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8000f96:	e7f5      	b.n	8000f84 <ADC_Enable+0x5c>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f98:	f7ff fb7e 	bl	8000698 <HAL_GetTick>
 8000f9c:	1b40      	subs	r0, r0, r5
 8000f9e:	2802      	cmp	r0, #2
 8000fa0:	d80f      	bhi.n	8000fc2 <ADC_Enable+0x9a>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	f012 0f01 	tst.w	r2, #1
 8000faa:	d114      	bne.n	8000fd6 <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	f012 0f01 	tst.w	r2, #1
 8000fb2:	d1f1      	bne.n	8000f98 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8000fb4:	6899      	ldr	r1, [r3, #8]
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <ADC_Enable+0xbc>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	f042 0201 	orr.w	r2, r2, #1
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	e7ea      	b.n	8000f98 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	e002      	b.n	8000fdc <ADC_Enable+0xb4>
  return HAL_OK;
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e000      	b.n	8000fdc <ADC_Enable+0xb4>
 8000fda:	2000      	movs	r0, #0
}
 8000fdc:	bd38      	pop	{r3, r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	8000003f 	.word	0x8000003f
 8000fe4:	7fffffc0 	.word	0x7fffffc0
 8000fe8:	40022000 	.word	0x40022000
 8000fec:	40022100 	.word	0x40022100
 8000ff0:	58026300 	.word	0x58026300

08000ff4 <HAL_ADC_Start_DMA>:
{
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000ff6:	6804      	ldr	r4, [r0, #0]
 8000ff8:	4e41      	ldr	r6, [pc, #260]	; (8001100 <HAL_ADC_Start_DMA+0x10c>)
 8000ffa:	4d42      	ldr	r5, [pc, #264]	; (8001104 <HAL_ADC_Start_DMA+0x110>)
 8000ffc:	42ac      	cmp	r4, r5
 8000ffe:	bf18      	it	ne
 8001000:	42b4      	cmpne	r4, r6
 8001002:	d11e      	bne.n	8001042 <HAL_ADC_Start_DMA+0x4e>
 8001004:	f505 7500 	add.w	r5, r5, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001008:	68ad      	ldr	r5, [r5, #8]
 800100a:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800100e:	68a4      	ldr	r4, [r4, #8]
 8001010:	f014 0f04 	tst.w	r4, #4
 8001014:	d16e      	bne.n	80010f4 <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 8001016:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800101a:	2c01      	cmp	r4, #1
 800101c:	d06d      	beq.n	80010fa <HAL_ADC_Start_DMA+0x106>
 800101e:	2301      	movs	r3, #1
 8001020:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001024:	2d05      	cmp	r5, #5
 8001026:	bf14      	ite	ne
 8001028:	2400      	movne	r4, #0
 800102a:	2401      	moveq	r4, #1
 800102c:	2d00      	cmp	r5, #0
 800102e:	bf08      	it	eq
 8001030:	461c      	moveq	r4, r3
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001032:	b944      	cbnz	r4, 8001046 <HAL_ADC_Start_DMA+0x52>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001034:	2d09      	cmp	r5, #9
 8001036:	d006      	beq.n	8001046 <HAL_ADC_Start_DMA+0x52>
      __HAL_UNLOCK(hadc);
 8001038:	2300      	movs	r3, #0
 800103a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e059      	b.n	80010f6 <HAL_ADC_Start_DMA+0x102>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001042:	4d31      	ldr	r5, [pc, #196]	; (8001108 <HAL_ADC_Start_DMA+0x114>)
 8001044:	e7e0      	b.n	8001008 <HAL_ADC_Start_DMA+0x14>
 8001046:	4616      	mov	r6, r2
 8001048:	460f      	mov	r7, r1
 800104a:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 800104c:	f7ff ff6c 	bl	8000f28 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001050:	4603      	mov	r3, r0
 8001052:	2800      	cmp	r0, #0
 8001054:	d14a      	bne.n	80010ec <HAL_ADC_Start_DMA+0xf8>
        ADC_STATE_CLR_SET(hadc->State,
 8001056:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <HAL_ADC_Start_DMA+0x118>)
 800105a:	4013      	ands	r3, r2
 800105c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001060:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	4a27      	ldr	r2, [pc, #156]	; (8001104 <HAL_ADC_Start_DMA+0x110>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d03a      	beq.n	80010e0 <HAL_ADC_Start_DMA+0xec>
 800106a:	461a      	mov	r2, r3
 800106c:	4293      	cmp	r3, r2
 800106e:	d000      	beq.n	8001072 <HAL_ADC_Start_DMA+0x7e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001070:	b91d      	cbnz	r5, 800107a <HAL_ADC_Start_DMA+0x86>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001072:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001074:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001078:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800107a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800107c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001080:	d031      	beq.n	80010e6 <HAL_ADC_Start_DMA+0xf2>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001082:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001084:	f023 0306 	bic.w	r3, r3, #6
 8001088:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800108a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800108c:	4a20      	ldr	r2, [pc, #128]	; (8001110 <HAL_ADC_Start_DMA+0x11c>)
 800108e:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001090:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001092:	4a20      	ldr	r2, [pc, #128]	; (8001114 <HAL_ADC_Start_DMA+0x120>)
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001096:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_ADC_Start_DMA+0x124>)
 800109a:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	221c      	movs	r2, #28
 80010a0:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 80010a2:	2300      	movs	r3, #0
 80010a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	6853      	ldr	r3, [r2, #4]
 80010ac:	f043 0310 	orr.w	r3, r3, #16
 80010b0:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80010b2:	6821      	ldr	r1, [r4, #0]
 80010b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80010b6:	68ca      	ldr	r2, [r1, #12]
 80010b8:	f022 0203 	bic.w	r2, r2, #3
 80010bc:	4313      	orrs	r3, r2
 80010be:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010c0:	6821      	ldr	r1, [r4, #0]
 80010c2:	4633      	mov	r3, r6
 80010c4:	463a      	mov	r2, r7
 80010c6:	3140      	adds	r1, #64	; 0x40
 80010c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80010ca:	f000 ff6d 	bl	8001fa8 <HAL_DMA_Start_IT>
 80010ce:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 80010d0:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80010d2:	6888      	ldr	r0, [r1, #8]
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <HAL_ADC_Start_DMA+0x128>)
 80010d6:	4002      	ands	r2, r0
 80010d8:	f042 0204 	orr.w	r2, r2, #4
 80010dc:	608a      	str	r2, [r1, #8]
 80010de:	e00a      	b.n	80010f6 <HAL_ADC_Start_DMA+0x102>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80010e0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80010e4:	e7c2      	b.n	800106c <HAL_ADC_Start_DMA+0x78>
          ADC_CLEAR_ERRORCODE(hadc);
 80010e6:	2300      	movs	r3, #0
 80010e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80010ea:	e7ce      	b.n	800108a <HAL_ADC_Start_DMA+0x96>
        __HAL_UNLOCK(hadc);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 80010f2:	e000      	b.n	80010f6 <HAL_ADC_Start_DMA+0x102>
    tmp_hal_status = HAL_BUSY;
 80010f4:	2302      	movs	r3, #2
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80010fa:	2302      	movs	r3, #2
 80010fc:	e7fb      	b.n	80010f6 <HAL_ADC_Start_DMA+0x102>
 80010fe:	bf00      	nop
 8001100:	40022000 	.word	0x40022000
 8001104:	40022100 	.word	0x40022100
 8001108:	58026300 	.word	0x58026300
 800110c:	fffff0fe 	.word	0xfffff0fe
 8001110:	080009d1 	.word	0x080009d1
 8001114:	080006ed 	.word	0x080006ed
 8001118:	08000a59 	.word	0x08000a59
 800111c:	7fffffc0 	.word	0x7fffffc0

08001120 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	4605      	mov	r5, r0
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001124:	6803      	ldr	r3, [r0, #0]
 8001126:	494f      	ldr	r1, [pc, #316]	; (8001264 <ADC_ConfigureBoostMode+0x144>)
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <ADC_ConfigureBoostMode+0x148>)
 800112a:	4293      	cmp	r3, r2
 800112c:	bf18      	it	ne
 800112e:	428b      	cmpne	r3, r1
 8001130:	d123      	bne.n	800117a <ADC_ConfigureBoostMode+0x5a>
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <ADC_ConfigureBoostMode+0x14c>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800113a:	bf14      	ite	ne
 800113c:	2301      	movne	r3, #1
 800113e:	2300      	moveq	r3, #0
 8001140:	b34b      	cbz	r3, 8001196 <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001142:	f002 fce1 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8001146:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8001148:	686b      	ldr	r3, [r5, #4]
 800114a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800114e:	d01c      	beq.n	800118a <ADC_ConfigureBoostMode+0x6a>
 8001150:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001154:	d01d      	beq.n	8001192 <ADC_ConfigureBoostMode+0x72>
 8001156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115a:	d016      	beq.n	800118a <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800115c:	f7ff fab6 	bl	80006cc <HAL_GetREVID>
 8001160:	f241 0303 	movw	r3, #4099	; 0x1003
 8001164:	4298      	cmp	r0, r3
 8001166:	d856      	bhi.n	8001216 <ADC_ConfigureBoostMode+0xf6>
  {
    if(freq > 20000000UL)
 8001168:	4b41      	ldr	r3, [pc, #260]	; (8001270 <ADC_ConfigureBoostMode+0x150>)
 800116a:	429c      	cmp	r4, r3
 800116c:	d94d      	bls.n	800120a <ADC_ConfigureBoostMode+0xea>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800116e:	682a      	ldr	r2, [r5, #0]
 8001170:	6893      	ldr	r3, [r2, #8]
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001178:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <ADC_ConfigureBoostMode+0x154>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	e7da      	b.n	8001140 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800118a:	0c1b      	lsrs	r3, r3, #16
 800118c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8001190:	e7e4      	b.n	800115c <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8001192:	0884      	lsrs	r4, r0, #2
        break;
 8001194:	e7e2      	b.n	800115c <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001196:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800119a:	f003 fda3 	bl	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 800119e:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 80011a0:	686b      	ldr	r3, [r5, #4]
 80011a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80011a6:	d016      	beq.n	80011d6 <ADC_ConfigureBoostMode+0xb6>
 80011a8:	d90b      	bls.n	80011c2 <ADC_ConfigureBoostMode+0xa2>
 80011aa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80011ae:	d028      	beq.n	8001202 <ADC_ConfigureBoostMode+0xe2>
 80011b0:	d81d      	bhi.n	80011ee <ADC_ConfigureBoostMode+0xce>
 80011b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80011b6:	d022      	beq.n	80011fe <ADC_ConfigureBoostMode+0xde>
 80011b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011bc:	d1ce      	bne.n	800115c <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 80011be:	0944      	lsrs	r4, r0, #5
        break;
 80011c0:	e7cc      	b.n	800115c <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 80011c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80011c6:	d006      	beq.n	80011d6 <ADC_ConfigureBoostMode+0xb6>
 80011c8:	d80a      	bhi.n	80011e0 <ADC_ConfigureBoostMode+0xc0>
 80011ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011ce:	d002      	beq.n	80011d6 <ADC_ConfigureBoostMode+0xb6>
 80011d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011d4:	d1c2      	bne.n	800115c <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80011d6:	0c9b      	lsrs	r3, r3, #18
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 80011de:	e7bd      	b.n	800115c <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 80011e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011e4:	d0f7      	beq.n	80011d6 <ADC_ConfigureBoostMode+0xb6>
 80011e6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80011ea:	d1b7      	bne.n	800115c <ADC_ConfigureBoostMode+0x3c>
 80011ec:	e7f3      	b.n	80011d6 <ADC_ConfigureBoostMode+0xb6>
 80011ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80011f2:	d008      	beq.n	8001206 <ADC_ConfigureBoostMode+0xe6>
 80011f4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80011f8:	d1b0      	bne.n	800115c <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 80011fa:	0a04      	lsrs	r4, r0, #8
        break;
 80011fc:	e7ae      	b.n	800115c <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 80011fe:	0904      	lsrs	r4, r0, #4
      break;
 8001200:	e7ac      	b.n	800115c <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8001202:	0984      	lsrs	r4, r0, #6
        break;
 8001204:	e7aa      	b.n	800115c <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8001206:	09c4      	lsrs	r4, r0, #7
        break;
 8001208:	e7a8      	b.n	800115c <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800120a:	682a      	ldr	r2, [r5, #0]
 800120c:	6893      	ldr	r3, [r2, #8]
 800120e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001212:	6093      	str	r3, [r2, #8]
 8001214:	e7b0      	b.n	8001178 <ADC_ConfigureBoostMode+0x58>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001216:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <ADC_ConfigureBoostMode+0x158>)
 800121a:	429c      	cmp	r4, r3
 800121c:	d90b      	bls.n	8001236 <ADC_ConfigureBoostMode+0x116>
    else if(freq <= 12500000UL)
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <ADC_ConfigureBoostMode+0x15c>)
 8001220:	429c      	cmp	r4, r3
 8001222:	d90e      	bls.n	8001242 <ADC_ConfigureBoostMode+0x122>
    else if(freq <= 25000000UL)
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <ADC_ConfigureBoostMode+0x160>)
 8001226:	429c      	cmp	r4, r3
 8001228:	d913      	bls.n	8001252 <ADC_ConfigureBoostMode+0x132>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800122a:	682a      	ldr	r2, [r5, #0]
 800122c:	6893      	ldr	r3, [r2, #8]
 800122e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001232:	6093      	str	r3, [r2, #8]
}
 8001234:	e7a0      	b.n	8001178 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001236:	682a      	ldr	r2, [r5, #0]
 8001238:	6893      	ldr	r3, [r2, #8]
 800123a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800123e:	6093      	str	r3, [r2, #8]
 8001240:	e79a      	b.n	8001178 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001242:	682a      	ldr	r2, [r5, #0]
 8001244:	6893      	ldr	r3, [r2, #8]
 8001246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6093      	str	r3, [r2, #8]
 8001250:	e792      	b.n	8001178 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001252:	682a      	ldr	r2, [r5, #0]
 8001254:	6893      	ldr	r3, [r2, #8]
 8001256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6093      	str	r3, [r2, #8]
 8001260:	e78a      	b.n	8001178 <ADC_ConfigureBoostMode+0x58>
 8001262:	bf00      	nop
 8001264:	40022000 	.word	0x40022000
 8001268:	40022100 	.word	0x40022100
 800126c:	40022300 	.word	0x40022300
 8001270:	01312d00 	.word	0x01312d00
 8001274:	58026300 	.word	0x58026300
 8001278:	005f5e10 	.word	0x005f5e10
 800127c:	00bebc20 	.word	0x00bebc20
 8001280:	017d7840 	.word	0x017d7840

08001284 <HAL_ADC_Init>:
{
 8001284:	b530      	push	{r4, r5, lr}
 8001286:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001288:	2300      	movs	r3, #0
 800128a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800128c:	2800      	cmp	r0, #0
 800128e:	f000 811c 	beq.w	80014ca <HAL_ADC_Init+0x246>
 8001292:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001294:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001296:	b1e3      	cbz	r3, 80012d2 <HAL_ADC_Init+0x4e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001298:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80012a0:	d003      	beq.n	80012aa <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012a2:	6899      	ldr	r1, [r3, #8]
 80012a4:	4a8a      	ldr	r2, [pc, #552]	; (80014d0 <HAL_ADC_Init+0x24c>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012aa:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80012b2:	d11b      	bne.n	80012ec <HAL_ADC_Init+0x68>
  MODIFY_REG(ADCx->CR,
 80012b4:	6899      	ldr	r1, [r3, #8]
 80012b6:	4a87      	ldr	r2, [pc, #540]	; (80014d4 <HAL_ADC_Init+0x250>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012be:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012c0:	4b85      	ldr	r3, [pc, #532]	; (80014d8 <HAL_ADC_Init+0x254>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	4a85      	ldr	r2, [pc, #532]	; (80014dc <HAL_ADC_Init+0x258>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80012d0:	e009      	b.n	80012e6 <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 80012d2:	f008 fae1 	bl	8009898 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80012d6:	2300      	movs	r3, #0
 80012d8:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80012da:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80012de:	e7db      	b.n	8001298 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 80012e0:	9b01      	ldr	r3, [sp, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80012e6:	9b01      	ldr	r3, [sp, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f9      	bne.n	80012e0 <HAL_ADC_Init+0x5c>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ec:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80012f4:	f040 809d 	bne.w	8001432 <HAL_ADC_Init+0x1ae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012fa:	f042 0210 	orr.w	r2, r2, #16
 80012fe:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001300:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001308:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	f012 0f04 	tst.w	r2, #4
 8001310:	f000 8091 	beq.w	8001436 <HAL_ADC_Init+0x1b2>
 8001314:	2101      	movs	r1, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001316:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001318:	f012 0f10 	tst.w	r2, #16
 800131c:	f040 80cd 	bne.w	80014ba <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001320:	2900      	cmp	r1, #0
 8001322:	f040 80ca 	bne.w	80014ba <HAL_ADC_Init+0x236>
    ADC_STATE_CLR_SET(hadc->State,
 8001326:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001328:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800132c:	f042 0202 	orr.w	r2, r2, #2
 8001330:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	f012 0f01 	tst.w	r2, #1
 8001338:	d121      	bne.n	800137e <HAL_ADC_Init+0xfa>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800133a:	4969      	ldr	r1, [pc, #420]	; (80014e0 <HAL_ADC_Init+0x25c>)
 800133c:	4a69      	ldr	r2, [pc, #420]	; (80014e4 <HAL_ADC_Init+0x260>)
 800133e:	4293      	cmp	r3, r2
 8001340:	bf18      	it	ne
 8001342:	428b      	cmpne	r3, r1
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	d17a      	bne.n	8001442 <HAL_ADC_Init+0x1be>
 800134c:	688a      	ldr	r2, [r1, #8]
 800134e:	f012 0f01 	tst.w	r2, #1
 8001352:	d072      	beq.n	800143a <HAL_ADC_Init+0x1b6>
 8001354:	2201      	movs	r2, #1
 8001356:	4963      	ldr	r1, [pc, #396]	; (80014e4 <HAL_ADC_Init+0x260>)
 8001358:	6889      	ldr	r1, [r1, #8]
 800135a:	f011 0f01 	tst.w	r1, #1
 800135e:	d06e      	beq.n	800143e <HAL_ADC_Init+0x1ba>
 8001360:	2101      	movs	r1, #1
 8001362:	430a      	orrs	r2, r1
 8001364:	bf0c      	ite	eq
 8001366:	2201      	moveq	r2, #1
 8001368:	2200      	movne	r2, #0
 800136a:	b142      	cbz	r2, 800137e <HAL_ADC_Init+0xfa>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800136c:	2b00      	cmp	r3, #0
 800136e:	d073      	beq.n	8001458 <HAL_ADC_Init+0x1d4>
 8001370:	495d      	ldr	r1, [pc, #372]	; (80014e8 <HAL_ADC_Init+0x264>)
 8001372:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001374:	688a      	ldr	r2, [r1, #8]
 8001376:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800137a:	4313      	orrs	r3, r2
 800137c:	608b      	str	r3, [r1, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800137e:	f7ff f9a5 	bl	80006cc <HAL_GetREVID>
 8001382:	f241 0303 	movw	r3, #4099	; 0x1003
 8001386:	4298      	cmp	r0, r3
 8001388:	d902      	bls.n	8001390 <HAL_ADC_Init+0x10c>
 800138a:	68a3      	ldr	r3, [r4, #8]
 800138c:	2b10      	cmp	r3, #16
 800138e:	d065      	beq.n	800145c <HAL_ADC_Init+0x1d8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001390:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8001392:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001394:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8001398:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 800139a:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800139c:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800139e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a2:	7f22      	ldrb	r2, [r4, #28]
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	d064      	beq.n	8001472 <HAL_ADC_Init+0x1ee>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013aa:	b122      	cbz	r2, 80013b6 <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013ac:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80013b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80013b2:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013b4:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013b6:	6821      	ldr	r1, [r4, #0]
 80013b8:	68c8      	ldr	r0, [r1, #12]
 80013ba:	4a4c      	ldr	r2, [pc, #304]	; (80014ec <HAL_ADC_Init+0x268>)
 80013bc:	4002      	ands	r2, r0
 80013be:	4313      	orrs	r3, r2
 80013c0:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013c2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	f012 0f04 	tst.w	r2, #4
 80013ca:	d057      	beq.n	800147c <HAL_ADC_Init+0x1f8>
 80013cc:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	f012 0f08 	tst.w	r2, #8
 80013d4:	d054      	beq.n	8001480 <HAL_ADC_Init+0x1fc>
 80013d6:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013d8:	430a      	orrs	r2, r1
 80013da:	d11b      	bne.n	8001414 <HAL_ADC_Init+0x190>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013dc:	7d21      	ldrb	r1, [r4, #20]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80013de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      tmpCFGR = (
 80013e0:	ea42 3181 	orr.w	r1, r2, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013e4:	68d8      	ldr	r0, [r3, #12]
 80013e6:	4a42      	ldr	r2, [pc, #264]	; (80014f0 <HAL_ADC_Init+0x26c>)
 80013e8:	4002      	ands	r2, r0
 80013ea:	430a      	orrs	r2, r1
 80013ec:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80013ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d046      	beq.n	8001484 <HAL_ADC_Init+0x200>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013f6:	6822      	ldr	r2, [r4, #0]
 80013f8:	6913      	ldr	r3, [r2, #16]
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001400:	6822      	ldr	r2, [r4, #0]
 8001402:	6913      	ldr	r3, [r2, #16]
 8001404:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800140a:	430b      	orrs	r3, r1
 800140c:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800140e:	4620      	mov	r0, r4
 8001410:	f7ff fe86 	bl	8001120 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001414:	68e3      	ldr	r3, [r4, #12]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d046      	beq.n	80014a8 <HAL_ADC_Init+0x224>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800141a:	6822      	ldr	r2, [r4, #0]
 800141c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800141e:	f023 030f 	bic.w	r3, r3, #15
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001424:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001426:	f023 0303 	bic.w	r3, r3, #3
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6563      	str	r3, [r4, #84]	; 0x54
 8001430:	e048      	b.n	80014c4 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001432:	2500      	movs	r5, #0
 8001434:	e769      	b.n	800130a <HAL_ADC_Init+0x86>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001436:	2100      	movs	r1, #0
 8001438:	e76d      	b.n	8001316 <HAL_ADC_Init+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800143a:	2200      	movs	r2, #0
 800143c:	e78b      	b.n	8001356 <HAL_ADC_Init+0xd2>
 800143e:	2100      	movs	r1, #0
 8001440:	e78f      	b.n	8001362 <HAL_ADC_Init+0xde>
 8001442:	4a2c      	ldr	r2, [pc, #176]	; (80014f4 <HAL_ADC_Init+0x270>)
 8001444:	6892      	ldr	r2, [r2, #8]
 8001446:	f012 0f01 	tst.w	r2, #1
 800144a:	d003      	beq.n	8001454 <HAL_ADC_Init+0x1d0>
 800144c:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800144e:	f082 0201 	eor.w	r2, r2, #1
 8001452:	e78a      	b.n	800136a <HAL_ADC_Init+0xe6>
 8001454:	2200      	movs	r2, #0
 8001456:	e7fa      	b.n	800144e <HAL_ADC_Init+0x1ca>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001458:	4927      	ldr	r1, [pc, #156]	; (80014f8 <HAL_ADC_Init+0x274>)
 800145a:	e78a      	b.n	8001372 <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800145c:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 800145e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001460:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8001464:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001466:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800146c:	f043 030c 	orr.w	r3, r3, #12
 8001470:	e797      	b.n	80013a2 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001472:	6a22      	ldr	r2, [r4, #32]
 8001474:	3a01      	subs	r2, #1
 8001476:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800147a:	e795      	b.n	80013a8 <HAL_ADC_Init+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800147c:	2100      	movs	r1, #0
 800147e:	e7a6      	b.n	80013ce <HAL_ADC_Init+0x14a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001480:	2200      	movs	r2, #0
 8001482:	e7a9      	b.n	80013d8 <HAL_ADC_Init+0x154>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001484:	6820      	ldr	r0, [r4, #0]
 8001486:	6902      	ldr	r2, [r0, #16]
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_ADC_Init+0x278>)
 800148a:	4013      	ands	r3, r2
 800148c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800148e:	1e51      	subs	r1, r2, #1
 8001490:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001492:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001496:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001498:	430a      	orrs	r2, r1
 800149a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800149c:	430a      	orrs	r2, r1
 800149e:	4313      	orrs	r3, r2
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6103      	str	r3, [r0, #16]
 80014a6:	e7ab      	b.n	8001400 <HAL_ADC_Init+0x17c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014a8:	6821      	ldr	r1, [r4, #0]
 80014aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014ac:	f023 030f 	bic.w	r3, r3, #15
 80014b0:	69a2      	ldr	r2, [r4, #24]
 80014b2:	3a01      	subs	r2, #1
 80014b4:	4313      	orrs	r3, r2
 80014b6:	630b      	str	r3, [r1, #48]	; 0x30
 80014b8:	e7b4      	b.n	8001424 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014bc:	f043 0310 	orr.w	r3, r3, #16
 80014c0:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80014c2:	2501      	movs	r5, #1
}
 80014c4:	4628      	mov	r0, r5
 80014c6:	b003      	add	sp, #12
 80014c8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80014ca:	2501      	movs	r5, #1
 80014cc:	e7fa      	b.n	80014c4 <HAL_ADC_Init+0x240>
 80014ce:	bf00      	nop
 80014d0:	5fffffc0 	.word	0x5fffffc0
 80014d4:	6fffffc0 	.word	0x6fffffc0
 80014d8:	20000014 	.word	0x20000014
 80014dc:	053e2d63 	.word	0x053e2d63
 80014e0:	40022000 	.word	0x40022000
 80014e4:	40022100 	.word	0x40022100
 80014e8:	40022300 	.word	0x40022300
 80014ec:	fff0c003 	.word	0xfff0c003
 80014f0:	ffffbffc 	.word	0xffffbffc
 80014f4:	58026000 	.word	0x58026000
 80014f8:	58026300 	.word	0x58026300
 80014fc:	fc00f81e 	.word	0xfc00f81e

08001500 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001500:	4770      	bx	lr

08001502 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001502:	4770      	bx	lr

08001504 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001504:	4770      	bx	lr

08001506 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001506:	4770      	bx	lr

08001508 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001508:	4770      	bx	lr
	...

0800150c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800150c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8001510:	2a01      	cmp	r2, #1
 8001512:	f000 80aa 	beq.w	800166a <HAL_ADCEx_MultiModeConfigChannel+0x15e>
{
 8001516:	b430      	push	{r4, r5}
 8001518:	b09a      	sub	sp, #104	; 0x68
 800151a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800151c:	2201      	movs	r2, #1
 800151e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001522:	6802      	ldr	r2, [r0, #0]
 8001524:	4852      	ldr	r0, [pc, #328]	; (8001670 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8001526:	4282      	cmp	r2, r0
 8001528:	d043      	beq.n	80015b2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800152a:	2000      	movs	r0, #0
 800152c:	9001      	str	r0, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800152e:	9801      	ldr	r0, [sp, #4]
 8001530:	2800      	cmp	r0, #0
 8001532:	d042      	beq.n	80015ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001534:	6880      	ldr	r0, [r0, #8]
 8001536:	f010 0f04 	tst.w	r0, #4
 800153a:	d047      	beq.n	80015cc <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 800153c:	2401      	movs	r4, #1
 800153e:	6890      	ldr	r0, [r2, #8]
 8001540:	f010 0f04 	tst.w	r0, #4
 8001544:	f040 8082 	bne.w	800164c <HAL_ADCEx_MultiModeConfigChannel+0x140>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001548:	2c00      	cmp	r4, #0
 800154a:	d17f      	bne.n	800164c <HAL_ADCEx_MultiModeConfigChannel+0x140>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800154c:	4c48      	ldr	r4, [pc, #288]	; (8001670 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800154e:	4849      	ldr	r0, [pc, #292]	; (8001674 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001550:	4282      	cmp	r2, r0
 8001552:	bf18      	it	ne
 8001554:	42a2      	cmpne	r2, r4
 8001556:	d13b      	bne.n	80015d0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8001558:	f500 7000 	add.w	r0, r0, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800155c:	680a      	ldr	r2, [r1, #0]
 800155e:	2a00      	cmp	r2, #0
 8001560:	d047      	beq.n	80015f2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001562:	6882      	ldr	r2, [r0, #8]
 8001564:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001568:	684c      	ldr	r4, [r1, #4]
 800156a:	4322      	orrs	r2, r4
 800156c:	6082      	str	r2, [r0, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4d3f      	ldr	r5, [pc, #252]	; (8001670 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8001572:	4c40      	ldr	r4, [pc, #256]	; (8001674 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001574:	42a2      	cmp	r2, r4
 8001576:	bf18      	it	ne
 8001578:	42aa      	cmpne	r2, r5
 800157a:	d12f      	bne.n	80015dc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800157c:	68aa      	ldr	r2, [r5, #8]
 800157e:	f012 0f01 	tst.w	r2, #1
 8001582:	d027      	beq.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001584:	2401      	movs	r4, #1
 8001586:	4a3b      	ldr	r2, [pc, #236]	; (8001674 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001588:	6892      	ldr	r2, [r2, #8]
 800158a:	f012 0f01 	tst.w	r2, #1
 800158e:	d023      	beq.n	80015d8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001590:	2201      	movs	r2, #1
 8001592:	4322      	orrs	r2, r4
 8001594:	bf0c      	ite	eq
 8001596:	2201      	moveq	r2, #1
 8001598:	2200      	movne	r2, #0
 800159a:	2a00      	cmp	r2, #0
 800159c:	d061      	beq.n	8001662 <HAL_ADCEx_MultiModeConfigChannel+0x156>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800159e:	6884      	ldr	r4, [r0, #8]
 80015a0:	4a35      	ldr	r2, [pc, #212]	; (8001678 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 80015a2:	4022      	ands	r2, r4
 80015a4:	680c      	ldr	r4, [r1, #0]
 80015a6:	6889      	ldr	r1, [r1, #8]
 80015a8:	4321      	orrs	r1, r4
 80015aa:	430a      	orrs	r2, r1
 80015ac:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ae:	2000      	movs	r0, #0
 80015b0:	e051      	b.n	8001656 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80015b2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80015b6:	9001      	str	r0, [sp, #4]
 80015b8:	e7b9      	b.n	800152e <HAL_ADCEx_MultiModeConfigChannel+0x22>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015bc:	f042 0220 	orr.w	r2, r2, #32
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80015c8:	2001      	movs	r0, #1
 80015ca:	e047      	b.n	800165c <HAL_ADCEx_MultiModeConfigChannel+0x150>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015cc:	2400      	movs	r4, #0
 80015ce:	e7b6      	b.n	800153e <HAL_ADCEx_MultiModeConfigChannel+0x32>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80015d0:	482a      	ldr	r0, [pc, #168]	; (800167c <HAL_ADCEx_MultiModeConfigChannel+0x170>)
 80015d2:	e7c3      	b.n	800155c <HAL_ADCEx_MultiModeConfigChannel+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015d4:	2400      	movs	r4, #0
 80015d6:	e7d6      	b.n	8001586 <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 80015d8:	2200      	movs	r2, #0
 80015da:	e7da      	b.n	8001592 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80015dc:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 80015de:	6892      	ldr	r2, [r2, #8]
 80015e0:	f012 0f01 	tst.w	r2, #1
 80015e4:	d003      	beq.n	80015ee <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 80015e6:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015e8:	f082 0201 	eor.w	r2, r2, #1
 80015ec:	e7d5      	b.n	800159a <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80015ee:	2200      	movs	r2, #0
 80015f0:	e7fa      	b.n	80015e8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80015f2:	6881      	ldr	r1, [r0, #8]
 80015f4:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80015f8:	6081      	str	r1, [r0, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	4d1c      	ldr	r5, [pc, #112]	; (8001670 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80015fe:	4c1d      	ldr	r4, [pc, #116]	; (8001674 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001600:	42a1      	cmp	r1, r4
 8001602:	bf18      	it	ne
 8001604:	42a9      	cmpne	r1, r5
 8001606:	d117      	bne.n	8001638 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
 8001608:	68a9      	ldr	r1, [r5, #8]
 800160a:	f011 0f01 	tst.w	r1, #1
 800160e:	d011      	beq.n	8001634 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 8001610:	2401      	movs	r4, #1
 8001612:	4918      	ldr	r1, [pc, #96]	; (8001674 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001614:	6889      	ldr	r1, [r1, #8]
 8001616:	f011 0f01 	tst.w	r1, #1
 800161a:	d000      	beq.n	800161e <HAL_ADCEx_MultiModeConfigChannel+0x112>
 800161c:	2201      	movs	r2, #1
 800161e:	4322      	orrs	r2, r4
 8001620:	bf0c      	ite	eq
 8001622:	2201      	moveq	r2, #1
 8001624:	2200      	movne	r2, #0
 8001626:	b1f2      	cbz	r2, 8001666 <HAL_ADCEx_MultiModeConfigChannel+0x15a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001628:	6881      	ldr	r1, [r0, #8]
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 800162c:	400a      	ands	r2, r1
 800162e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001630:	2000      	movs	r0, #0
 8001632:	e010      	b.n	8001656 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8001634:	4614      	mov	r4, r2
 8001636:	e7ec      	b.n	8001612 <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8001638:	4911      	ldr	r1, [pc, #68]	; (8001680 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 800163a:	6889      	ldr	r1, [r1, #8]
 800163c:	f011 0f01 	tst.w	r1, #1
 8001640:	d000      	beq.n	8001644 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001642:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001644:	fab2 f282 	clz	r2, r2
 8001648:	0952      	lsrs	r2, r2, #5
 800164a:	e7ec      	b.n	8001626 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800164c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800164e:	f042 0220 	orr.w	r2, r2, #32
 8001652:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001654:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800165c:	b01a      	add	sp, #104	; 0x68
 800165e:	bc30      	pop	{r4, r5}
 8001660:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001662:	2000      	movs	r0, #0
 8001664:	e7f7      	b.n	8001656 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8001666:	2000      	movs	r0, #0
 8001668:	e7f5      	b.n	8001656 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  __HAL_LOCK(hadc);
 800166a:	2002      	movs	r0, #2
}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000
 8001674:	40022100 	.word	0x40022100
 8001678:	fffff0e0 	.word	0xfffff0e0
 800167c:	58026300 	.word	0x58026300
 8001680:	58026000 	.word	0x58026000

08001684 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4906      	ldr	r1, [pc, #24]	; (80016a0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001686:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001688:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800168c:	041b      	lsls	r3, r3, #16
 800168e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	0200      	lsls	r0, r0, #8
 8001692:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001696:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001698:	4a02      	ldr	r2, [pc, #8]	; (80016a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800169a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800169c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	05fa0000 	.word	0x05fa0000

080016a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_NVIC_SetPriority+0x58>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b2:	f1c3 0407 	rsb	r4, r3, #7
 80016b6:	2c04      	cmp	r4, #4
 80016b8:	bf28      	it	cs
 80016ba:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016bc:	1d1d      	adds	r5, r3, #4
 80016be:	2d06      	cmp	r5, #6
 80016c0:	d914      	bls.n	80016ec <HAL_NVIC_SetPriority+0x44>
 80016c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80016c8:	fa05 f404 	lsl.w	r4, r5, r4
 80016cc:	ea21 0104 	bic.w	r1, r1, r4
 80016d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d2:	fa05 f303 	lsl.w	r3, r5, r3
 80016d6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016da:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80016dc:	2800      	cmp	r0, #0
 80016de:	db07      	blt.n	80016f0 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	0109      	lsls	r1, r1, #4
 80016e2:	b2c9      	uxtb	r1, r1
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_NVIC_SetPriority+0x5c>)
 80016e6:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016e8:	bc30      	pop	{r4, r5}
 80016ea:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ec:	2300      	movs	r3, #0
 80016ee:	e7e9      	b.n	80016c4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	f000 000f 	and.w	r0, r0, #15
 80016f4:	0109      	lsls	r1, r1, #4
 80016f6:	b2c9      	uxtb	r1, r1
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_NVIC_SetPriority+0x60>)
 80016fa:	5419      	strb	r1, [r3, r0]
 80016fc:	e7f4      	b.n	80016e8 <HAL_NVIC_SetPriority+0x40>
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00
 8001704:	e000e400 	.word	0xe000e400
 8001708:	e000ed14 	.word	0xe000ed14

0800170c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800170c:	2800      	cmp	r0, #0
 800170e:	db07      	blt.n	8001720 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001710:	f000 021f 	and.w	r2, r0, #31
 8001714:	0940      	lsrs	r0, r0, #5
 8001716:	2301      	movs	r3, #1
 8001718:	4093      	lsls	r3, r2
 800171a:	4a02      	ldr	r2, [pc, #8]	; (8001724 <HAL_NVIC_EnableIRQ+0x18>)
 800171c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	3801      	subs	r0, #1
 800172a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800172e:	d20a      	bcs.n	8001746 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_SYSTICK_Config+0x24>)
 8001732:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_SYSTICK_Config+0x28>)
 8001736:	21f0      	movs	r1, #240	; 0xf0
 8001738:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	2000      	movs	r0, #0
 800173e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001754:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_MPU_Disable+0x18>)
 800175a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800175c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001760:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001762:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_MPU_Disable+0x1c>)
 8001764:	2200      	movs	r2, #0
 8001766:	605a      	str	r2, [r3, #4]
}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	e000ed90 	.word	0xe000ed90

08001774 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001774:	f040 0001 	orr.w	r0, r0, #1
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_MPU_Enable+0x1c>)
 800177a:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800177c:	4a05      	ldr	r2, [pc, #20]	; (8001794 <HAL_MPU_Enable+0x20>)
 800177e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800178a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800178e:	4770      	bx	lr
 8001790:	e000ed90 	.word	0xe000ed90
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001798:	7842      	ldrb	r2, [r0, #1]
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <HAL_MPU_ConfigRegion+0x50>)
 800179c:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800179e:	7803      	ldrb	r3, [r0, #0]
 80017a0:	b923      	cbnz	r3, 80017ac <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_MPU_ConfigRegion+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80017a8:	611a      	str	r2, [r3, #16]
  }
}
 80017aa:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80017ac:	6843      	ldr	r3, [r0, #4]
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_MPU_ConfigRegion+0x50>)
 80017b0:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b2:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017b4:	7ac3      	ldrb	r3, [r0, #11]
 80017b6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017bc:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017be:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017c2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017c4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017c8:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017ca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017ce:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017d4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017da:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017dc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017e0:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017e2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017e4:	6113      	str	r3, [r2, #16]
 80017e6:	4770      	bx	lr
 80017e8:	e000ed90 	.word	0xe000ed90

080017ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017ec:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ee:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017f0:	6804      	ldr	r4, [r0, #0]
 80017f2:	4e65      	ldr	r6, [pc, #404]	; (8001988 <DMA_SetConfig+0x19c>)
 80017f4:	4d65      	ldr	r5, [pc, #404]	; (800198c <DMA_SetConfig+0x1a0>)
 80017f6:	42ac      	cmp	r4, r5
 80017f8:	bf18      	it	ne
 80017fa:	42b4      	cmpne	r4, r6
 80017fc:	d042      	beq.n	8001884 <DMA_SetConfig+0x98>
 80017fe:	3518      	adds	r5, #24
 8001800:	42ac      	cmp	r4, r5
 8001802:	d03f      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001804:	3518      	adds	r5, #24
 8001806:	42ac      	cmp	r4, r5
 8001808:	d03c      	beq.n	8001884 <DMA_SetConfig+0x98>
 800180a:	3518      	adds	r5, #24
 800180c:	42ac      	cmp	r4, r5
 800180e:	d039      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001810:	3518      	adds	r5, #24
 8001812:	42ac      	cmp	r4, r5
 8001814:	d036      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001816:	3518      	adds	r5, #24
 8001818:	42ac      	cmp	r4, r5
 800181a:	d033      	beq.n	8001884 <DMA_SetConfig+0x98>
 800181c:	3518      	adds	r5, #24
 800181e:	42ac      	cmp	r4, r5
 8001820:	d030      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001822:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001826:	42ac      	cmp	r4, r5
 8001828:	d02c      	beq.n	8001884 <DMA_SetConfig+0x98>
 800182a:	3518      	adds	r5, #24
 800182c:	42ac      	cmp	r4, r5
 800182e:	d029      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001830:	3518      	adds	r5, #24
 8001832:	42ac      	cmp	r4, r5
 8001834:	d026      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001836:	3518      	adds	r5, #24
 8001838:	42ac      	cmp	r4, r5
 800183a:	d023      	beq.n	8001884 <DMA_SetConfig+0x98>
 800183c:	3518      	adds	r5, #24
 800183e:	42ac      	cmp	r4, r5
 8001840:	d020      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001842:	3518      	adds	r5, #24
 8001844:	42ac      	cmp	r4, r5
 8001846:	d01d      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001848:	3518      	adds	r5, #24
 800184a:	42ac      	cmp	r4, r5
 800184c:	d01a      	beq.n	8001884 <DMA_SetConfig+0x98>
 800184e:	3518      	adds	r5, #24
 8001850:	42ac      	cmp	r4, r5
 8001852:	d017      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001854:	4d4e      	ldr	r5, [pc, #312]	; (8001990 <DMA_SetConfig+0x1a4>)
 8001856:	42ac      	cmp	r4, r5
 8001858:	d014      	beq.n	8001884 <DMA_SetConfig+0x98>
 800185a:	3514      	adds	r5, #20
 800185c:	42ac      	cmp	r4, r5
 800185e:	d011      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001860:	3514      	adds	r5, #20
 8001862:	42ac      	cmp	r4, r5
 8001864:	d00e      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001866:	3514      	adds	r5, #20
 8001868:	42ac      	cmp	r4, r5
 800186a:	d00b      	beq.n	8001884 <DMA_SetConfig+0x98>
 800186c:	3514      	adds	r5, #20
 800186e:	42ac      	cmp	r4, r5
 8001870:	d008      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001872:	3514      	adds	r5, #20
 8001874:	42ac      	cmp	r4, r5
 8001876:	d005      	beq.n	8001884 <DMA_SetConfig+0x98>
 8001878:	3514      	adds	r5, #20
 800187a:	42ac      	cmp	r4, r5
 800187c:	d002      	beq.n	8001884 <DMA_SetConfig+0x98>
 800187e:	3514      	adds	r5, #20
 8001880:	42ac      	cmp	r4, r5
 8001882:	d107      	bne.n	8001894 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001884:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001886:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8001888:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800188a:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 800188c:	b114      	cbz	r4, 8001894 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800188e:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8001890:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8001892:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001894:	6804      	ldr	r4, [r0, #0]
 8001896:	4e3c      	ldr	r6, [pc, #240]	; (8001988 <DMA_SetConfig+0x19c>)
 8001898:	4d3c      	ldr	r5, [pc, #240]	; (800198c <DMA_SetConfig+0x1a0>)
 800189a:	42ac      	cmp	r4, r5
 800189c:	bf18      	it	ne
 800189e:	42b4      	cmpne	r4, r6
 80018a0:	d052      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018a2:	3518      	adds	r5, #24
 80018a4:	42ac      	cmp	r4, r5
 80018a6:	d04f      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018a8:	3518      	adds	r5, #24
 80018aa:	42ac      	cmp	r4, r5
 80018ac:	d04c      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018ae:	3518      	adds	r5, #24
 80018b0:	42ac      	cmp	r4, r5
 80018b2:	d049      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018b4:	3518      	adds	r5, #24
 80018b6:	42ac      	cmp	r4, r5
 80018b8:	d046      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018ba:	3518      	adds	r5, #24
 80018bc:	42ac      	cmp	r4, r5
 80018be:	d043      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018c0:	3518      	adds	r5, #24
 80018c2:	42ac      	cmp	r4, r5
 80018c4:	d040      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018c6:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80018ca:	42ac      	cmp	r4, r5
 80018cc:	d03c      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018ce:	3518      	adds	r5, #24
 80018d0:	42ac      	cmp	r4, r5
 80018d2:	d039      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018d4:	3518      	adds	r5, #24
 80018d6:	42ac      	cmp	r4, r5
 80018d8:	d036      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018da:	3518      	adds	r5, #24
 80018dc:	42ac      	cmp	r4, r5
 80018de:	d033      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018e0:	3518      	adds	r5, #24
 80018e2:	42ac      	cmp	r4, r5
 80018e4:	d030      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018e6:	3518      	adds	r5, #24
 80018e8:	42ac      	cmp	r4, r5
 80018ea:	d02d      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018ec:	3518      	adds	r5, #24
 80018ee:	42ac      	cmp	r4, r5
 80018f0:	d02a      	beq.n	8001948 <DMA_SetConfig+0x15c>
 80018f2:	3518      	adds	r5, #24
 80018f4:	42ac      	cmp	r4, r5
 80018f6:	d027      	beq.n	8001948 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80018f8:	4e25      	ldr	r6, [pc, #148]	; (8001990 <DMA_SetConfig+0x1a4>)
 80018fa:	4d26      	ldr	r5, [pc, #152]	; (8001994 <DMA_SetConfig+0x1a8>)
 80018fc:	42ac      	cmp	r4, r5
 80018fe:	bf18      	it	ne
 8001900:	42b4      	cmpne	r4, r6
 8001902:	d011      	beq.n	8001928 <DMA_SetConfig+0x13c>
 8001904:	4d24      	ldr	r5, [pc, #144]	; (8001998 <DMA_SetConfig+0x1ac>)
 8001906:	42ac      	cmp	r4, r5
 8001908:	d00e      	beq.n	8001928 <DMA_SetConfig+0x13c>
 800190a:	3514      	adds	r5, #20
 800190c:	42ac      	cmp	r4, r5
 800190e:	d00b      	beq.n	8001928 <DMA_SetConfig+0x13c>
 8001910:	3514      	adds	r5, #20
 8001912:	42ac      	cmp	r4, r5
 8001914:	d008      	beq.n	8001928 <DMA_SetConfig+0x13c>
 8001916:	3514      	adds	r5, #20
 8001918:	42ac      	cmp	r4, r5
 800191a:	d005      	beq.n	8001928 <DMA_SetConfig+0x13c>
 800191c:	3514      	adds	r5, #20
 800191e:	42ac      	cmp	r4, r5
 8001920:	d002      	beq.n	8001928 <DMA_SetConfig+0x13c>
 8001922:	3514      	adds	r5, #20
 8001924:	42ac      	cmp	r4, r5
 8001926:	d123      	bne.n	8001970 <DMA_SetConfig+0x184>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001928:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800192a:	f004 051f 	and.w	r5, r4, #31
 800192e:	2401      	movs	r4, #1
 8001930:	40ac      	lsls	r4, r5
 8001932:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001934:	6804      	ldr	r4, [r0, #0]
 8001936:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001938:	6883      	ldr	r3, [r0, #8]
 800193a:	2b40      	cmp	r3, #64	; 0x40
 800193c:	d01f      	beq.n	800197e <DMA_SetConfig+0x192>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800193e:	6803      	ldr	r3, [r0, #0]
 8001940:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001942:	6803      	ldr	r3, [r0, #0]
 8001944:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001946:	e013      	b.n	8001970 <DMA_SetConfig+0x184>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001948:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800194a:	f004 051f 	and.w	r5, r4, #31
 800194e:	243f      	movs	r4, #63	; 0x3f
 8001950:	40ac      	lsls	r4, r5
 8001952:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001954:	6805      	ldr	r5, [r0, #0]
 8001956:	682c      	ldr	r4, [r5, #0]
 8001958:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800195c:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800195e:	6804      	ldr	r4, [r0, #0]
 8001960:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001962:	6883      	ldr	r3, [r0, #8]
 8001964:	2b40      	cmp	r3, #64	; 0x40
 8001966:	d005      	beq.n	8001974 <DMA_SetConfig+0x188>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8001968:	6803      	ldr	r3, [r0, #0]
 800196a:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800196c:	6803      	ldr	r3, [r0, #0]
 800196e:	60da      	str	r2, [r3, #12]
}
 8001970:	bcf0      	pop	{r4, r5, r6, r7}
 8001972:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8001974:	6803      	ldr	r3, [r0, #0]
 8001976:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8001978:	6803      	ldr	r3, [r0, #0]
 800197a:	60d9      	str	r1, [r3, #12]
 800197c:	e7f8      	b.n	8001970 <DMA_SetConfig+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800197e:	6803      	ldr	r3, [r0, #0]
 8001980:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001982:	6803      	ldr	r3, [r0, #0]
 8001984:	60d9      	str	r1, [r3, #12]
 8001986:	e7f3      	b.n	8001970 <DMA_SetConfig+0x184>
 8001988:	40020010 	.word	0x40020010
 800198c:	40020028 	.word	0x40020028
 8001990:	58025408 	.word	0x58025408
 8001994:	5802541c 	.word	0x5802541c
 8001998:	58025430 	.word	0x58025430

0800199c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800199c:	6802      	ldr	r2, [r0, #0]
 800199e:	4928      	ldr	r1, [pc, #160]	; (8001a40 <DMA_CalcBaseAndBitshift+0xa4>)
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <DMA_CalcBaseAndBitshift+0xa8>)
 80019a2:	429a      	cmp	r2, r3
 80019a4:	bf18      	it	ne
 80019a6:	428a      	cmpne	r2, r1
 80019a8:	d02f      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019aa:	3318      	adds	r3, #24
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d02c      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019b0:	3318      	adds	r3, #24
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d029      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019b6:	3318      	adds	r3, #24
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d026      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019bc:	3318      	adds	r3, #24
 80019be:	429a      	cmp	r2, r3
 80019c0:	d023      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019c2:	3318      	adds	r3, #24
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d020      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019c8:	3318      	adds	r3, #24
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d01d      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019ce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d019      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019d6:	3318      	adds	r3, #24
 80019d8:	429a      	cmp	r2, r3
 80019da:	d016      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019dc:	3318      	adds	r3, #24
 80019de:	429a      	cmp	r2, r3
 80019e0:	d013      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019e2:	3318      	adds	r3, #24
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d010      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019e8:	3318      	adds	r3, #24
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d00d      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019ee:	3318      	adds	r3, #24
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d00a      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019f4:	3318      	adds	r3, #24
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d007      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
 80019fa:	3318      	adds	r3, #24
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d004      	beq.n	8001a0a <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001a00:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a04:	6582      	str	r2, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8001a06:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a08:	4770      	bx	lr
{
 8001a0a:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001a0c:	b2d3      	uxtb	r3, r2
 8001a0e:	3b10      	subs	r3, #16
 8001a10:	490d      	ldr	r1, [pc, #52]	; (8001a48 <DMA_CalcBaseAndBitshift+0xac>)
 8001a12:	fba1 1303 	umull	r1, r3, r1, r3
 8001a16:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001a18:	f003 0107 	and.w	r1, r3, #7
 8001a1c:	4c0b      	ldr	r4, [pc, #44]	; (8001a4c <DMA_CalcBaseAndBitshift+0xb0>)
 8001a1e:	5c61      	ldrb	r1, [r4, r1]
 8001a20:	65c1      	str	r1, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d806      	bhi.n	8001a34 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <DMA_CalcBaseAndBitshift+0xb4>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	6583      	str	r3, [r0, #88]	; 0x58
}
 8001a2c:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a32:	4770      	bx	lr
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <DMA_CalcBaseAndBitshift+0xb4>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	3304      	adds	r3, #4
 8001a3a:	6583      	str	r3, [r0, #88]	; 0x58
 8001a3c:	e7f6      	b.n	8001a2c <DMA_CalcBaseAndBitshift+0x90>
 8001a3e:	bf00      	nop
 8001a40:	40020010 	.word	0x40020010
 8001a44:	40020028 	.word	0x40020028
 8001a48:	aaaaaaab 	.word	0xaaaaaaab
 8001a4c:	0800d0a8 	.word	0x0800d0a8
 8001a50:	fffffc00 	.word	0xfffffc00

08001a54 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a54:	6983      	ldr	r3, [r0, #24]
 8001a56:	b99b      	cbnz	r3, 8001a80 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8001a58:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d00a      	beq.n	8001a74 <DMA_CheckFifoParam+0x20>
 8001a5e:	b11b      	cbz	r3, 8001a68 <DMA_CheckFifoParam+0x14>
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d001      	beq.n	8001a68 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001a64:	2000      	movs	r0, #0
 8001a66:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a6a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001a6e:	d12e      	bne.n	8001ace <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a70:	2000      	movs	r0, #0
 8001a72:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a7a:	d02a      	beq.n	8001ad2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a84:	d006      	beq.n	8001a94 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8001a86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d92a      	bls.n	8001ae2 <DMA_CheckFifoParam+0x8e>
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d016      	beq.n	8001abe <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a90:	2000      	movs	r0, #0
 8001a92:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8001a94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d803      	bhi.n	8001aa2 <DMA_CheckFifoParam+0x4e>
 8001a9a:	e8df f003 	tbb	[pc, r3]
 8001a9e:	041c      	.short	0x041c
 8001aa0:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001aa8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001aac:	d115      	bne.n	8001ada <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8001aae:	2000      	movs	r0, #0
 8001ab0:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ab8:	d011      	beq.n	8001ade <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2000      	movs	r0, #0
 8001abc:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001abe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ac0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001ac4:	d001      	beq.n	8001aca <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 8001ac6:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8001ac8:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001aca:	2000      	movs	r0, #0
 8001acc:	4770      	bx	lr
          status = HAL_ERROR;
 8001ace:	2001      	movs	r0, #1
 8001ad0:	4770      	bx	lr
          status = HAL_ERROR;
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	4770      	bx	lr
        status = HAL_ERROR;
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	4770      	bx	lr
          status = HAL_ERROR;
 8001ada:	2001      	movs	r0, #1
 8001adc:	4770      	bx	lr
          status = HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
 8001ae0:	4770      	bx	lr
        status = HAL_ERROR;
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	4770      	bx	lr
	...

08001ae8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001ae8:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001aea:	4922      	ldr	r1, [pc, #136]	; (8001b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001aec:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	bf18      	it	ne
 8001af2:	428b      	cmpne	r3, r1
 8001af4:	d028      	beq.n	8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001af6:	3214      	adds	r2, #20
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d025      	beq.n	8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001afc:	3214      	adds	r2, #20
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d022      	beq.n	8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001b02:	3214      	adds	r2, #20
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d01f      	beq.n	8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001b08:	3214      	adds	r2, #20
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01c      	beq.n	8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001b0e:	3214      	adds	r2, #20
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d019      	beq.n	8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001b14:	3214      	adds	r2, #20
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d016      	beq.n	8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	3a10      	subs	r2, #16
 8001b1e:	4917      	ldr	r1, [pc, #92]	; (8001b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8001b20:	fba1 1202 	umull	r1, r2, r1, r2
 8001b24:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b26:	4916      	ldr	r1, [pc, #88]	; (8001b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8001b28:	4419      	add	r1, r3
 8001b2a:	29a8      	cmp	r1, #168	; 0xa8
 8001b2c:	d91f      	bls.n	8001b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001b38:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b3a:	f002 021f 	and.w	r2, r2, #31
 8001b3e:	2301      	movs	r3, #1
 8001b40:	fa03 f202 	lsl.w	r2, r3, r2
 8001b44:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8001b46:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3b08      	subs	r3, #8
 8001b4c:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001b56:	441a      	add	r2, r3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001b5e:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	2201      	movs	r2, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	6683      	str	r3, [r0, #104]	; 0x68
 8001b6c:	4770      	bx	lr
      stream_number += 8U;
 8001b6e:	3208      	adds	r2, #8
 8001b70:	e7dd      	b.n	8001b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8001b72:	bf00      	nop
 8001b74:	58025408 	.word	0x58025408
 8001b78:	5802541c 	.word	0x5802541c
 8001b7c:	aaaaaaab 	.word	0xaaaaaaab
 8001b80:	bffdfbf0 	.word	0xbffdfbf0
 8001b84:	10008200 	.word	0x10008200
 8001b88:	40020880 	.word	0x40020880
 8001b8c:	cccccccd 	.word	0xcccccccd
 8001b90:	16009600 	.word	0x16009600
 8001b94:	58025880 	.word	0x58025880

08001b98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b98:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001b9a:	1e4a      	subs	r2, r1, #1
 8001b9c:	2a07      	cmp	r2, #7
 8001b9e:	d82c      	bhi.n	8001bfa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 8001ba0:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ba2:	6803      	ldr	r3, [r0, #0]
 8001ba4:	4d15      	ldr	r5, [pc, #84]	; (8001bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8001ba6:	4c16      	ldr	r4, [pc, #88]	; (8001c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8001ba8:	42a3      	cmp	r3, r4
 8001baa:	bf18      	it	ne
 8001bac:	42ab      	cmpne	r3, r5
 8001bae:	d018      	beq.n	8001be2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001bb0:	3414      	adds	r4, #20
 8001bb2:	42a3      	cmp	r3, r4
 8001bb4:	d015      	beq.n	8001be2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001bb6:	3414      	adds	r4, #20
 8001bb8:	42a3      	cmp	r3, r4
 8001bba:	d012      	beq.n	8001be2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001bbc:	3414      	adds	r4, #20
 8001bbe:	42a3      	cmp	r3, r4
 8001bc0:	d00f      	beq.n	8001be2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001bc2:	3414      	adds	r4, #20
 8001bc4:	42a3      	cmp	r3, r4
 8001bc6:	d00c      	beq.n	8001be2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001bc8:	3414      	adds	r4, #20
 8001bca:	42a3      	cmp	r3, r4
 8001bcc:	d009      	beq.n	8001be2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001bce:	3414      	adds	r4, #20
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	d006      	beq.n	8001be2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8001bd6:	440b      	add	r3, r1
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8001bde:	6703      	str	r3, [r0, #112]	; 0x70
 8001be0:	e005      	b.n	8001bee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8001be4:	440b      	add	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8001bec:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001bee:	2301      	movs	r3, #1
 8001bf0:	fa03 f202 	lsl.w	r2, r3, r2
 8001bf4:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 8001bf6:	bc30      	pop	{r4, r5}
 8001bf8:	4770      	bx	lr
 8001bfa:	4770      	bx	lr
 8001bfc:	58025408 	.word	0x58025408
 8001c00:	5802541c 	.word	0x5802541c
 8001c04:	1000823f 	.word	0x1000823f
 8001c08:	40020940 	.word	0x40020940
 8001c0c:	1600963f 	.word	0x1600963f
 8001c10:	58025940 	.word	0x58025940

08001c14 <HAL_DMA_Init>:
{
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7fe fd3e 	bl	8000698 <HAL_GetTick>
  if(hdma == NULL)
 8001c1c:	2c00      	cmp	r4, #0
 8001c1e:	f000 81bd 	beq.w	8001f9c <HAL_DMA_Init+0x388>
 8001c22:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	49b7      	ldr	r1, [pc, #732]	; (8001f04 <HAL_DMA_Init+0x2f0>)
 8001c28:	4ab7      	ldr	r2, [pc, #732]	; (8001f08 <HAL_DMA_Init+0x2f4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	bf18      	it	ne
 8001c2e:	428b      	cmpne	r3, r1
 8001c30:	bf0c      	ite	eq
 8001c32:	2201      	moveq	r2, #1
 8001c34:	2200      	movne	r2, #0
 8001c36:	d050      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c38:	3130      	adds	r1, #48	; 0x30
 8001c3a:	428b      	cmp	r3, r1
 8001c3c:	d04d      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c3e:	3118      	adds	r1, #24
 8001c40:	428b      	cmp	r3, r1
 8001c42:	d04a      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c44:	3118      	adds	r1, #24
 8001c46:	428b      	cmp	r3, r1
 8001c48:	d047      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c4a:	3118      	adds	r1, #24
 8001c4c:	428b      	cmp	r3, r1
 8001c4e:	d044      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c50:	3118      	adds	r1, #24
 8001c52:	428b      	cmp	r3, r1
 8001c54:	d041      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c56:	3118      	adds	r1, #24
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	d03e      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c5c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001c60:	428b      	cmp	r3, r1
 8001c62:	d03a      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c64:	3118      	adds	r1, #24
 8001c66:	428b      	cmp	r3, r1
 8001c68:	d037      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c6a:	3118      	adds	r1, #24
 8001c6c:	428b      	cmp	r3, r1
 8001c6e:	d034      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c70:	3118      	adds	r1, #24
 8001c72:	428b      	cmp	r3, r1
 8001c74:	d031      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c76:	3118      	adds	r1, #24
 8001c78:	428b      	cmp	r3, r1
 8001c7a:	d02e      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c7c:	3118      	adds	r1, #24
 8001c7e:	428b      	cmp	r3, r1
 8001c80:	d02b      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c82:	3118      	adds	r1, #24
 8001c84:	428b      	cmp	r3, r1
 8001c86:	d028      	beq.n	8001cda <HAL_DMA_Init+0xc6>
 8001c88:	3118      	adds	r1, #24
 8001c8a:	428b      	cmp	r3, r1
 8001c8c:	d025      	beq.n	8001cda <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c8e:	499f      	ldr	r1, [pc, #636]	; (8001f0c <HAL_DMA_Init+0x2f8>)
 8001c90:	4a9f      	ldr	r2, [pc, #636]	; (8001f10 <HAL_DMA_Init+0x2fc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	bf18      	it	ne
 8001c96:	428b      	cmpne	r3, r1
 8001c98:	f000 8124 	beq.w	8001ee4 <HAL_DMA_Init+0x2d0>
 8001c9c:	4a9d      	ldr	r2, [pc, #628]	; (8001f14 <HAL_DMA_Init+0x300>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f000 8120 	beq.w	8001ee4 <HAL_DMA_Init+0x2d0>
 8001ca4:	3214      	adds	r2, #20
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	f000 811c 	beq.w	8001ee4 <HAL_DMA_Init+0x2d0>
 8001cac:	3214      	adds	r2, #20
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	f000 8118 	beq.w	8001ee4 <HAL_DMA_Init+0x2d0>
 8001cb4:	3214      	adds	r2, #20
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	f000 8114 	beq.w	8001ee4 <HAL_DMA_Init+0x2d0>
 8001cbc:	3214      	adds	r2, #20
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	f000 8110 	beq.w	8001ee4 <HAL_DMA_Init+0x2d0>
 8001cc4:	3214      	adds	r2, #20
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f000 810c 	beq.w	8001ee4 <HAL_DMA_Init+0x2d0>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ccc:	2340      	movs	r3, #64	; 0x40
 8001cce:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e04a      	b.n	8001d70 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001ce6:	bb7a      	cbnz	r2, 8001d48 <HAL_DMA_Init+0x134>
 8001ce8:	4a8b      	ldr	r2, [pc, #556]	; (8001f18 <HAL_DMA_Init+0x304>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d02c      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001cee:	3218      	adds	r2, #24
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d029      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001cf4:	3218      	adds	r2, #24
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d026      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001cfa:	3218      	adds	r2, #24
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d023      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d00:	3218      	adds	r2, #24
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d020      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d06:	3218      	adds	r2, #24
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d01d      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d0c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d019      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d14:	3218      	adds	r2, #24
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d016      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d1a:	3218      	adds	r2, #24
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d20:	3218      	adds	r2, #24
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d010      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d26:	3218      	adds	r2, #24
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00d      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d2c:	3218      	adds	r2, #24
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00a      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d32:	3218      	adds	r2, #24
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d007      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d38:	3218      	adds	r2, #24
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_DMA_Init+0x134>
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e003      	b.n	8001d50 <HAL_DMA_Init+0x13c>
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f012 0f01 	tst.w	r2, #1
 8001d58:	d00b      	beq.n	8001d72 <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5a:	f7fe fc9d 	bl	8000698 <HAL_GetTick>
 8001d5e:	1b40      	subs	r0, r0, r5
 8001d60:	2805      	cmp	r0, #5
 8001d62:	d9f5      	bls.n	8001d50 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d64:	2320      	movs	r3, #32
 8001d66:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8001d6e:	2001      	movs	r0, #1
}
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d72:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d74:	4869      	ldr	r0, [pc, #420]	; (8001f1c <HAL_DMA_Init+0x308>)
 8001d76:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8001d78:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7a:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d7c:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7e:	6921      	ldr	r1, [r4, #16]
 8001d80:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d84:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d86:	69a1      	ldr	r1, [r4, #24]
 8001d88:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d8a:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8c:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d8e:	6a21      	ldr	r1, [r4, #32]
 8001d90:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8001d92:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d96:	2904      	cmp	r1, #4
 8001d98:	f000 8099 	beq.w	8001ece <HAL_DMA_Init+0x2ba>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d9c:	4960      	ldr	r1, [pc, #384]	; (8001f20 <HAL_DMA_Init+0x30c>)
 8001d9e:	6808      	ldr	r0, [r1, #0]
 8001da0:	4960      	ldr	r1, [pc, #384]	; (8001f24 <HAL_DMA_Init+0x310>)
 8001da2:	4001      	ands	r1, r0
 8001da4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001da8:	d311      	bcc.n	8001dce <HAL_DMA_Init+0x1ba>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001daa:	6861      	ldr	r1, [r4, #4]
 8001dac:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8001db0:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8001db4:	2803      	cmp	r0, #3
 8001db6:	bf88      	it	hi
 8001db8:	2d05      	cmphi	r5, #5
 8001dba:	d906      	bls.n	8001dca <HAL_DMA_Init+0x1b6>
 8001dbc:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8001dc0:	2801      	cmp	r0, #1
 8001dc2:	d902      	bls.n	8001dca <HAL_DMA_Init+0x1b6>
 8001dc4:	394f      	subs	r1, #79	; 0x4f
 8001dc6:	2903      	cmp	r1, #3
 8001dc8:	d801      	bhi.n	8001dce <HAL_DMA_Init+0x1ba>
        registerValue |= DMA_SxCR_TRBUFF;
 8001dca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001dce:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001dd0:	6826      	ldr	r6, [r4, #0]
 8001dd2:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dd4:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8001dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dda:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d108      	bne.n	8001df2 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 8001de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001de2:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001de4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001de6:	b123      	cbz	r3, 8001df2 <HAL_DMA_Init+0x1de>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff fe33 	bl	8001a54 <DMA_CheckFifoParam>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d172      	bne.n	8001ed8 <HAL_DMA_Init+0x2c4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001df2:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7ff fdd1 	bl	800199c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dfa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	233f      	movs	r3, #63	; 0x3f
 8001e02:	4093      	lsls	r3, r2
 8001e04:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	493e      	ldr	r1, [pc, #248]	; (8001f04 <HAL_DMA_Init+0x2f0>)
 8001e0a:	4a3f      	ldr	r2, [pc, #252]	; (8001f08 <HAL_DMA_Init+0x2f4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf18      	it	ne
 8001e10:	428b      	cmpne	r3, r1
 8001e12:	d042      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e14:	3218      	adds	r2, #24
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d03f      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e1a:	3218      	adds	r2, #24
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d03c      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e20:	3218      	adds	r2, #24
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d039      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e26:	3218      	adds	r2, #24
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d036      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e2c:	3218      	adds	r2, #24
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d033      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e32:	3218      	adds	r2, #24
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d030      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e38:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d02c      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e40:	3218      	adds	r2, #24
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d029      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e46:	3218      	adds	r2, #24
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d026      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e4c:	3218      	adds	r2, #24
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d023      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e52:	3218      	adds	r2, #24
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d020      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e58:	3218      	adds	r2, #24
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01d      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e5e:	3218      	adds	r2, #24
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d01a      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e64:	3218      	adds	r2, #24
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d017      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e6a:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <HAL_DMA_Init+0x2f8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d014      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e70:	3214      	adds	r2, #20
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d011      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e76:	3214      	adds	r2, #20
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00e      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e7c:	3214      	adds	r2, #20
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00b      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e82:	3214      	adds	r2, #20
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d008      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e88:	3214      	adds	r2, #20
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d005      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e8e:	3214      	adds	r2, #20
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d002      	beq.n	8001e9a <HAL_DMA_Init+0x286>
 8001e94:	3214      	adds	r2, #20
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d113      	bne.n	8001ec2 <HAL_DMA_Init+0x2ae>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff fe24 	bl	8001ae8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ea0:	68a3      	ldr	r3, [r4, #8]
 8001ea2:	2b80      	cmp	r3, #128	; 0x80
 8001ea4:	d06d      	beq.n	8001f82 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ea6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ea8:	7922      	ldrb	r2, [r4, #4]
 8001eaa:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001eae:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001eb0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001eb2:	6863      	ldr	r3, [r4, #4]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	d966      	bls.n	8001f88 <HAL_DMA_Init+0x374>
      hdma->DMAmuxRequestGen = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ebe:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ec0:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ecc:	e750      	b.n	8001d70 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ece:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ed0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ed2:	4301      	orrs	r1, r0
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	e761      	b.n	8001d9c <HAL_DMA_Init+0x188>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed8:	2340      	movs	r3, #64	; 0x40
 8001eda:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001edc:	2001      	movs	r0, #1
 8001ede:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8001ee2:	e745      	b.n	8001d70 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eea:	2202      	movs	r2, #2
 8001eec:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ef0:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ef2:	490d      	ldr	r1, [pc, #52]	; (8001f28 <HAL_DMA_Init+0x314>)
 8001ef4:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ef6:	68a2      	ldr	r2, [r4, #8]
 8001ef8:	2a40      	cmp	r2, #64	; 0x40
 8001efa:	d01a      	beq.n	8001f32 <HAL_DMA_Init+0x31e>
 8001efc:	2a80      	cmp	r2, #128	; 0x80
 8001efe:	d015      	beq.n	8001f2c <HAL_DMA_Init+0x318>
 8001f00:	2200      	movs	r2, #0
 8001f02:	e017      	b.n	8001f34 <HAL_DMA_Init+0x320>
 8001f04:	40020010 	.word	0x40020010
 8001f08:	40020028 	.word	0x40020028
 8001f0c:	58025408 	.word	0x58025408
 8001f10:	5802541c 	.word	0x5802541c
 8001f14:	58025430 	.word	0x58025430
 8001f18:	40020040 	.word	0x40020040
 8001f1c:	fe10803f 	.word	0xfe10803f
 8001f20:	5c001000 	.word	0x5c001000
 8001f24:	ffff0000 	.word	0xffff0000
 8001f28:	fffe000f 	.word	0xfffe000f
 8001f2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f30:	e000      	b.n	8001f34 <HAL_DMA_Init+0x320>
 8001f32:	2210      	movs	r2, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f34:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f36:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f3a:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f3c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f40:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f42:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f46:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f48:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f4c:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f4e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f52:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f54:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f58:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f5a:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f5c:	6822      	ldr	r2, [r4, #0]
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_DMA_Init+0x38c>)
 8001f60:	4413      	add	r3, r2
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_DMA_Init+0x390>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7ff fd14 	bl	800199c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f76:	f003 021f 	and.w	r2, r3, #31
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	6043      	str	r3, [r0, #4]
 8001f80:	e741      	b.n	8001e06 <HAL_DMA_Init+0x1f2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f82:	2300      	movs	r3, #0
 8001f84:	6063      	str	r3, [r4, #4]
 8001f86:	e78e      	b.n	8001ea6 <HAL_DMA_Init+0x292>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff fe05 	bl	8001b98 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f94:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001f96:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	e792      	b.n	8001ec2 <HAL_DMA_Init+0x2ae>
    return HAL_ERROR;
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	e6e7      	b.n	8001d70 <HAL_DMA_Init+0x15c>
 8001fa0:	a7fdabf8 	.word	0xa7fdabf8
 8001fa4:	cccccccd 	.word	0xcccccccd

08001fa8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	f000 813e 	beq.w	800222a <HAL_DMA_Start_IT+0x282>
{
 8001fae:	b570      	push	{r4, r5, r6, lr}
 8001fb0:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001fb2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001fb6:	2801      	cmp	r0, #1
 8001fb8:	f000 8139 	beq.w	800222e <HAL_DMA_Start_IT+0x286>
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc2:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001fc6:	b2c0      	uxtb	r0, r0
 8001fc8:	2801      	cmp	r0, #1
 8001fca:	d007      	beq.n	8001fdc <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001fd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fd6:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
}
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001fe6:	6820      	ldr	r0, [r4, #0]
 8001fe8:	4e92      	ldr	r6, [pc, #584]	; (8002234 <HAL_DMA_Start_IT+0x28c>)
 8001fea:	4d93      	ldr	r5, [pc, #588]	; (8002238 <HAL_DMA_Start_IT+0x290>)
 8001fec:	42a8      	cmp	r0, r5
 8001fee:	bf18      	it	ne
 8001ff0:	42b0      	cmpne	r0, r6
 8001ff2:	d02f      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8001ff4:	3518      	adds	r5, #24
 8001ff6:	42a8      	cmp	r0, r5
 8001ff8:	d02c      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8001ffa:	3518      	adds	r5, #24
 8001ffc:	42a8      	cmp	r0, r5
 8001ffe:	d029      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8002000:	3518      	adds	r5, #24
 8002002:	42a8      	cmp	r0, r5
 8002004:	d026      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8002006:	3518      	adds	r5, #24
 8002008:	42a8      	cmp	r0, r5
 800200a:	d023      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 800200c:	3518      	adds	r5, #24
 800200e:	42a8      	cmp	r0, r5
 8002010:	d020      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8002012:	3518      	adds	r5, #24
 8002014:	42a8      	cmp	r0, r5
 8002016:	d01d      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8002018:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800201c:	42a8      	cmp	r0, r5
 800201e:	d019      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8002020:	3518      	adds	r5, #24
 8002022:	42a8      	cmp	r0, r5
 8002024:	d016      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8002026:	3518      	adds	r5, #24
 8002028:	42a8      	cmp	r0, r5
 800202a:	d013      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 800202c:	3518      	adds	r5, #24
 800202e:	42a8      	cmp	r0, r5
 8002030:	d010      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8002032:	3518      	adds	r5, #24
 8002034:	42a8      	cmp	r0, r5
 8002036:	d00d      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8002038:	3518      	adds	r5, #24
 800203a:	42a8      	cmp	r0, r5
 800203c:	d00a      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 800203e:	3518      	adds	r5, #24
 8002040:	42a8      	cmp	r0, r5
 8002042:	d007      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 8002044:	3518      	adds	r5, #24
 8002046:	42a8      	cmp	r0, r5
 8002048:	d004      	beq.n	8002054 <HAL_DMA_Start_IT+0xac>
 800204a:	6805      	ldr	r5, [r0, #0]
 800204c:	f025 0501 	bic.w	r5, r5, #1
 8002050:	6005      	str	r5, [r0, #0]
 8002052:	e003      	b.n	800205c <HAL_DMA_Start_IT+0xb4>
 8002054:	6805      	ldr	r5, [r0, #0]
 8002056:	f025 0501 	bic.w	r5, r5, #1
 800205a:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800205c:	4620      	mov	r0, r4
 800205e:	f7ff fbc5 	bl	80017ec <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	4973      	ldr	r1, [pc, #460]	; (8002234 <HAL_DMA_Start_IT+0x28c>)
 8002066:	4a74      	ldr	r2, [pc, #464]	; (8002238 <HAL_DMA_Start_IT+0x290>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf18      	it	ne
 800206c:	428b      	cmpne	r3, r1
 800206e:	d038      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 8002070:	3218      	adds	r2, #24
 8002072:	4293      	cmp	r3, r2
 8002074:	d035      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 8002076:	3218      	adds	r2, #24
 8002078:	4293      	cmp	r3, r2
 800207a:	d032      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 800207c:	3218      	adds	r2, #24
 800207e:	4293      	cmp	r3, r2
 8002080:	d02f      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 8002082:	3218      	adds	r2, #24
 8002084:	4293      	cmp	r3, r2
 8002086:	d02c      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 8002088:	3218      	adds	r2, #24
 800208a:	4293      	cmp	r3, r2
 800208c:	d029      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 800208e:	3218      	adds	r2, #24
 8002090:	4293      	cmp	r3, r2
 8002092:	d026      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 8002094:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 800209c:	3218      	adds	r2, #24
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 80020a2:	3218      	adds	r2, #24
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d01c      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 80020a8:	3218      	adds	r2, #24
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 80020ae:	3218      	adds	r2, #24
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d016      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 80020b4:	3218      	adds	r2, #24
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 80020ba:	3218      	adds	r2, #24
 80020bc:	4293      	cmp	r3, r2
 80020be:	d010      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
 80020c0:	3218      	adds	r2, #24
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00d      	beq.n	80020e2 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	f022 020e 	bic.w	r2, r2, #14
 80020cc:	f042 020a 	orr.w	r2, r2, #10
 80020d0:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80020d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020d4:	b193      	cbz	r3, 80020fc <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e00c      	b.n	80020fc <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f022 021e 	bic.w	r2, r2, #30
 80020e8:	f042 0216 	orr.w	r2, r2, #22
 80020ec:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80020ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f0:	b123      	cbz	r3, 80020fc <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80020f2:	6822      	ldr	r2, [r4, #0]
 80020f4:	6813      	ldr	r3, [r2, #0]
 80020f6:	f043 0308 	orr.w	r3, r3, #8
 80020fa:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	494d      	ldr	r1, [pc, #308]	; (8002234 <HAL_DMA_Start_IT+0x28c>)
 8002100:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <HAL_DMA_Start_IT+0x290>)
 8002102:	4293      	cmp	r3, r2
 8002104:	bf18      	it	ne
 8002106:	428b      	cmpne	r3, r1
 8002108:	d042      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 800210a:	3218      	adds	r2, #24
 800210c:	4293      	cmp	r3, r2
 800210e:	d03f      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002110:	3218      	adds	r2, #24
 8002112:	4293      	cmp	r3, r2
 8002114:	d03c      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002116:	3218      	adds	r2, #24
 8002118:	4293      	cmp	r3, r2
 800211a:	d039      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 800211c:	3218      	adds	r2, #24
 800211e:	4293      	cmp	r3, r2
 8002120:	d036      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002122:	3218      	adds	r2, #24
 8002124:	4293      	cmp	r3, r2
 8002126:	d033      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002128:	3218      	adds	r2, #24
 800212a:	4293      	cmp	r3, r2
 800212c:	d030      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 800212e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002132:	4293      	cmp	r3, r2
 8002134:	d02c      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002136:	3218      	adds	r2, #24
 8002138:	4293      	cmp	r3, r2
 800213a:	d029      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 800213c:	3218      	adds	r2, #24
 800213e:	4293      	cmp	r3, r2
 8002140:	d026      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002142:	3218      	adds	r2, #24
 8002144:	4293      	cmp	r3, r2
 8002146:	d023      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002148:	3218      	adds	r2, #24
 800214a:	4293      	cmp	r3, r2
 800214c:	d020      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 800214e:	3218      	adds	r2, #24
 8002150:	4293      	cmp	r3, r2
 8002152:	d01d      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002154:	3218      	adds	r2, #24
 8002156:	4293      	cmp	r3, r2
 8002158:	d01a      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 800215a:	3218      	adds	r2, #24
 800215c:	4293      	cmp	r3, r2
 800215e:	d017      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002160:	4a36      	ldr	r2, [pc, #216]	; (800223c <HAL_DMA_Start_IT+0x294>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d014      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002166:	3214      	adds	r2, #20
 8002168:	4293      	cmp	r3, r2
 800216a:	d011      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 800216c:	3214      	adds	r2, #20
 800216e:	4293      	cmp	r3, r2
 8002170:	d00e      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002172:	3214      	adds	r2, #20
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002178:	3214      	adds	r2, #20
 800217a:	4293      	cmp	r3, r2
 800217c:	d008      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 800217e:	3214      	adds	r2, #20
 8002180:	4293      	cmp	r3, r2
 8002182:	d005      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 8002184:	3214      	adds	r2, #20
 8002186:	4293      	cmp	r3, r2
 8002188:	d002      	beq.n	8002190 <HAL_DMA_Start_IT+0x1e8>
 800218a:	3214      	adds	r2, #20
 800218c:	4293      	cmp	r3, r2
 800218e:	d10e      	bne.n	80021ae <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002190:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002198:	d003      	beq.n	80021a2 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a0:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80021a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80021a4:	b11b      	cbz	r3, 80021ae <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ac:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	4920      	ldr	r1, [pc, #128]	; (8002234 <HAL_DMA_Start_IT+0x28c>)
 80021b2:	4a21      	ldr	r2, [pc, #132]	; (8002238 <HAL_DMA_Start_IT+0x290>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bf18      	it	ne
 80021b8:	428b      	cmpne	r3, r1
 80021ba:	d030      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021bc:	3218      	adds	r2, #24
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02d      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021c2:	3218      	adds	r2, #24
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d02a      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021c8:	3218      	adds	r2, #24
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d027      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021ce:	3218      	adds	r2, #24
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d024      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021d4:	3218      	adds	r2, #24
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d021      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021da:	3218      	adds	r2, #24
 80021dc:	4293      	cmp	r3, r2
 80021de:	d01e      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021e0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d01a      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021e8:	3218      	adds	r2, #24
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d017      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021ee:	3218      	adds	r2, #24
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d014      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021f4:	3218      	adds	r2, #24
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d011      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 80021fa:	3218      	adds	r2, #24
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00e      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 8002200:	3218      	adds	r2, #24
 8002202:	4293      	cmp	r3, r2
 8002204:	d00b      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 8002206:	3218      	adds	r2, #24
 8002208:	4293      	cmp	r3, r2
 800220a:	d008      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 800220c:	3218      	adds	r2, #24
 800220e:	4293      	cmp	r3, r2
 8002210:	d005      	beq.n	800221e <HAL_DMA_Start_IT+0x276>
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2000      	movs	r0, #0
 800221c:	e6dd      	b.n	8001fda <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	f042 0201 	orr.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002226:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002228:	e6d7      	b.n	8001fda <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 800222a:	2001      	movs	r0, #1
}
 800222c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800222e:	2002      	movs	r0, #2
 8002230:	e6d3      	b.n	8001fda <HAL_DMA_Start_IT+0x32>
 8002232:	bf00      	nop
 8002234:	40020010 	.word	0x40020010
 8002238:	40020028 	.word	0x40020028
 800223c:	58025408 	.word	0x58025408

08002240 <HAL_DMA_IRQHandler>:
{
 8002240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002242:	b083      	sub	sp, #12
 8002244:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800224a:	4ba2      	ldr	r3, [pc, #648]	; (80024d4 <HAL_DMA_IRQHandler+0x294>)
 800224c:	681d      	ldr	r5, [r3, #0]
 800224e:	4ba2      	ldr	r3, [pc, #648]	; (80024d8 <HAL_DMA_IRQHandler+0x298>)
 8002250:	fba3 3505 	umull	r3, r5, r3, r5
 8002254:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002256:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8002258:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 800225a:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800225e:	6803      	ldr	r3, [r0, #0]
 8002260:	499e      	ldr	r1, [pc, #632]	; (80024dc <HAL_DMA_IRQHandler+0x29c>)
 8002262:	489f      	ldr	r0, [pc, #636]	; (80024e0 <HAL_DMA_IRQHandler+0x2a0>)
 8002264:	4283      	cmp	r3, r0
 8002266:	bf18      	it	ne
 8002268:	428b      	cmpne	r3, r1
 800226a:	bf0c      	ite	eq
 800226c:	2001      	moveq	r0, #1
 800226e:	2000      	movne	r0, #0
 8002270:	d061      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 8002272:	4a9c      	ldr	r2, [pc, #624]	; (80024e4 <HAL_DMA_IRQHandler+0x2a4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d05e      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 8002278:	3218      	adds	r2, #24
 800227a:	4293      	cmp	r3, r2
 800227c:	d05b      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 800227e:	3218      	adds	r2, #24
 8002280:	4293      	cmp	r3, r2
 8002282:	d058      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 8002284:	3218      	adds	r2, #24
 8002286:	4293      	cmp	r3, r2
 8002288:	d055      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 800228a:	3218      	adds	r2, #24
 800228c:	4293      	cmp	r3, r2
 800228e:	d052      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 8002290:	3218      	adds	r2, #24
 8002292:	4293      	cmp	r3, r2
 8002294:	d04f      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 8002296:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800229a:	4293      	cmp	r3, r2
 800229c:	d04b      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 800229e:	3218      	adds	r2, #24
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d048      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 80022a4:	3218      	adds	r2, #24
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d045      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 80022aa:	3218      	adds	r2, #24
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d042      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 80022b0:	3218      	adds	r2, #24
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d03f      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 80022b6:	3218      	adds	r2, #24
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d03c      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 80022bc:	3218      	adds	r2, #24
 80022be:	4293      	cmp	r3, r2
 80022c0:	d039      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
 80022c2:	3218      	adds	r2, #24
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d036      	beq.n	8002336 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80022c8:	4987      	ldr	r1, [pc, #540]	; (80024e8 <HAL_DMA_IRQHandler+0x2a8>)
 80022ca:	4a88      	ldr	r2, [pc, #544]	; (80024ec <HAL_DMA_IRQHandler+0x2ac>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	bf18      	it	ne
 80022d0:	428b      	cmpne	r3, r1
 80022d2:	d012      	beq.n	80022fa <HAL_DMA_IRQHandler+0xba>
 80022d4:	4a86      	ldr	r2, [pc, #536]	; (80024f0 <HAL_DMA_IRQHandler+0x2b0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00f      	beq.n	80022fa <HAL_DMA_IRQHandler+0xba>
 80022da:	3214      	adds	r2, #20
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00c      	beq.n	80022fa <HAL_DMA_IRQHandler+0xba>
 80022e0:	3214      	adds	r2, #20
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d009      	beq.n	80022fa <HAL_DMA_IRQHandler+0xba>
 80022e6:	3214      	adds	r2, #20
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d006      	beq.n	80022fa <HAL_DMA_IRQHandler+0xba>
 80022ec:	3214      	adds	r2, #20
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d003      	beq.n	80022fa <HAL_DMA_IRQHandler+0xba>
 80022f2:	3214      	adds	r2, #20
 80022f4:	4293      	cmp	r3, r2
 80022f6:	f040 8262 	bne.w	80027be <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80022fa:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80022fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80022fe:	f001 011f 	and.w	r1, r1, #31
 8002302:	2004      	movs	r0, #4
 8002304:	4088      	lsls	r0, r1
 8002306:	ea10 0f0c 	tst.w	r0, ip
 800230a:	f000 82a8 	beq.w	800285e <HAL_DMA_IRQHandler+0x61e>
 800230e:	f012 0f04 	tst.w	r2, #4
 8002312:	f000 82a4 	beq.w	800285e <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002316:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002318:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800231c:	f000 825b 	beq.w	80027d6 <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002320:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002324:	f040 8251 	bne.w	80027ca <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002328:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8247 	beq.w	80027be <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 8002330:	4620      	mov	r0, r4
 8002332:	4798      	blx	r3
 8002334:	e243      	b.n	80027be <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002336:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002338:	f002 011f 	and.w	r1, r2, #31
 800233c:	2208      	movs	r2, #8
 800233e:	408a      	lsls	r2, r1
 8002340:	4232      	tst	r2, r6
 8002342:	d041      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002344:	bb70      	cbnz	r0, 80023a4 <HAL_DMA_IRQHandler+0x164>
 8002346:	4a67      	ldr	r2, [pc, #412]	; (80024e4 <HAL_DMA_IRQHandler+0x2a4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d02b      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 800234c:	3218      	adds	r2, #24
 800234e:	4293      	cmp	r3, r2
 8002350:	d028      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 8002352:	3218      	adds	r2, #24
 8002354:	4293      	cmp	r3, r2
 8002356:	d025      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 8002358:	3218      	adds	r2, #24
 800235a:	4293      	cmp	r3, r2
 800235c:	d022      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 800235e:	3218      	adds	r2, #24
 8002360:	4293      	cmp	r3, r2
 8002362:	d01f      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 8002364:	3218      	adds	r2, #24
 8002366:	4293      	cmp	r3, r2
 8002368:	d01c      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 800236a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800236e:	4293      	cmp	r3, r2
 8002370:	d018      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 8002372:	3218      	adds	r2, #24
 8002374:	4293      	cmp	r3, r2
 8002376:	d015      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 8002378:	3218      	adds	r2, #24
 800237a:	4293      	cmp	r3, r2
 800237c:	d012      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 800237e:	3218      	adds	r2, #24
 8002380:	4293      	cmp	r3, r2
 8002382:	d00f      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 8002384:	3218      	adds	r2, #24
 8002386:	4293      	cmp	r3, r2
 8002388:	d00c      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 800238a:	3218      	adds	r2, #24
 800238c:	4293      	cmp	r3, r2
 800238e:	d009      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 8002390:	3218      	adds	r2, #24
 8002392:	4293      	cmp	r3, r2
 8002394:	d006      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 8002396:	3218      	adds	r2, #24
 8002398:	4293      	cmp	r3, r2
 800239a:	d003      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x164>
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80023a2:	e002      	b.n	80023aa <HAL_DMA_IRQHandler+0x16a>
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80023aa:	b16a      	cbz	r2, 80023c8 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023b6:	f003 021f 	and.w	r2, r3, #31
 80023ba:	2308      	movs	r3, #8
 80023bc:	4093      	lsls	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023ca:	f002 021f 	and.w	r2, r2, #31
 80023ce:	fa26 f302 	lsr.w	r3, r6, r2
 80023d2:	f013 0f01 	tst.w	r3, #1
 80023d6:	d037      	beq.n	8002448 <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	4840      	ldr	r0, [pc, #256]	; (80024dc <HAL_DMA_IRQHandler+0x29c>)
 80023dc:	4940      	ldr	r1, [pc, #256]	; (80024e0 <HAL_DMA_IRQHandler+0x2a0>)
 80023de:	428b      	cmp	r3, r1
 80023e0:	bf18      	it	ne
 80023e2:	4283      	cmpne	r3, r0
 80023e4:	d02c      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 80023e6:	3118      	adds	r1, #24
 80023e8:	428b      	cmp	r3, r1
 80023ea:	d029      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 80023ec:	3118      	adds	r1, #24
 80023ee:	428b      	cmp	r3, r1
 80023f0:	d026      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 80023f2:	3118      	adds	r1, #24
 80023f4:	428b      	cmp	r3, r1
 80023f6:	d023      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 80023f8:	3118      	adds	r1, #24
 80023fa:	428b      	cmp	r3, r1
 80023fc:	d020      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 80023fe:	3118      	adds	r1, #24
 8002400:	428b      	cmp	r3, r1
 8002402:	d01d      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 8002404:	3118      	adds	r1, #24
 8002406:	428b      	cmp	r3, r1
 8002408:	d01a      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 800240a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800240e:	428b      	cmp	r3, r1
 8002410:	d016      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 8002412:	3118      	adds	r1, #24
 8002414:	428b      	cmp	r3, r1
 8002416:	d013      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 8002418:	3118      	adds	r1, #24
 800241a:	428b      	cmp	r3, r1
 800241c:	d010      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 800241e:	3118      	adds	r1, #24
 8002420:	428b      	cmp	r3, r1
 8002422:	d00d      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 8002424:	3118      	adds	r1, #24
 8002426:	428b      	cmp	r3, r1
 8002428:	d00a      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 800242a:	3118      	adds	r1, #24
 800242c:	428b      	cmp	r3, r1
 800242e:	d007      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 8002430:	3118      	adds	r1, #24
 8002432:	428b      	cmp	r3, r1
 8002434:	d004      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 8002436:	3118      	adds	r1, #24
 8002438:	428b      	cmp	r3, r1
 800243a:	d001      	beq.n	8002440 <HAL_DMA_IRQHandler+0x200>
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	e003      	b.n	8002448 <HAL_DMA_IRQHandler+0x208>
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002446:	d13b      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002448:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2204      	movs	r2, #4
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	4233      	tst	r3, r6
 8002456:	d051      	beq.n	80024fc <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002458:	6822      	ldr	r2, [r4, #0]
 800245a:	4820      	ldr	r0, [pc, #128]	; (80024dc <HAL_DMA_IRQHandler+0x29c>)
 800245c:	4920      	ldr	r1, [pc, #128]	; (80024e0 <HAL_DMA_IRQHandler+0x2a0>)
 800245e:	428a      	cmp	r2, r1
 8002460:	bf18      	it	ne
 8002462:	4282      	cmpne	r2, r0
 8002464:	d046      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 8002466:	3118      	adds	r1, #24
 8002468:	428a      	cmp	r2, r1
 800246a:	d043      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 800246c:	3118      	adds	r1, #24
 800246e:	428a      	cmp	r2, r1
 8002470:	d040      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 8002472:	3118      	adds	r1, #24
 8002474:	428a      	cmp	r2, r1
 8002476:	d03d      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 8002478:	3118      	adds	r1, #24
 800247a:	428a      	cmp	r2, r1
 800247c:	d03a      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 800247e:	3118      	adds	r1, #24
 8002480:	428a      	cmp	r2, r1
 8002482:	d037      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 8002484:	3118      	adds	r1, #24
 8002486:	428a      	cmp	r2, r1
 8002488:	d034      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 800248a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800248e:	428a      	cmp	r2, r1
 8002490:	d030      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 8002492:	3118      	adds	r1, #24
 8002494:	428a      	cmp	r2, r1
 8002496:	d02d      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 8002498:	3118      	adds	r1, #24
 800249a:	428a      	cmp	r2, r1
 800249c:	d02a      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 800249e:	3118      	adds	r1, #24
 80024a0:	428a      	cmp	r2, r1
 80024a2:	d027      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 80024a4:	3118      	adds	r1, #24
 80024a6:	428a      	cmp	r2, r1
 80024a8:	d024      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 80024aa:	3118      	adds	r1, #24
 80024ac:	428a      	cmp	r2, r1
 80024ae:	d021      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 80024b0:	3118      	adds	r1, #24
 80024b2:	428a      	cmp	r2, r1
 80024b4:	d01e      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 80024b6:	3118      	adds	r1, #24
 80024b8:	428a      	cmp	r2, r1
 80024ba:	d01b      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x2b4>
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	e01d      	b.n	80024fc <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024c0:	2301      	movs	r3, #1
 80024c2:	fa03 f202 	lsl.w	r2, r3, r2
 80024c6:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	6563      	str	r3, [r4, #84]	; 0x54
 80024d0:	e7ba      	b.n	8002448 <HAL_DMA_IRQHandler+0x208>
 80024d2:	bf00      	nop
 80024d4:	20000014 	.word	0x20000014
 80024d8:	1b4e81b5 	.word	0x1b4e81b5
 80024dc:	40020010 	.word	0x40020010
 80024e0:	40020028 	.word	0x40020028
 80024e4:	40020040 	.word	0x40020040
 80024e8:	58025408 	.word	0x58025408
 80024ec:	5802541c 	.word	0x5802541c
 80024f0:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	f012 0f02 	tst.w	r2, #2
 80024fa:	d13d      	bne.n	8002578 <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	2210      	movs	r2, #16
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	4233      	tst	r3, r6
 800250a:	d05f      	beq.n	80025cc <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800250c:	6822      	ldr	r2, [r4, #0]
 800250e:	489b      	ldr	r0, [pc, #620]	; (800277c <HAL_DMA_IRQHandler+0x53c>)
 8002510:	499b      	ldr	r1, [pc, #620]	; (8002780 <HAL_DMA_IRQHandler+0x540>)
 8002512:	428a      	cmp	r2, r1
 8002514:	bf18      	it	ne
 8002516:	4282      	cmpne	r2, r0
 8002518:	d034      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 800251a:	3118      	adds	r1, #24
 800251c:	428a      	cmp	r2, r1
 800251e:	d031      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 8002520:	3118      	adds	r1, #24
 8002522:	428a      	cmp	r2, r1
 8002524:	d02e      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 8002526:	3118      	adds	r1, #24
 8002528:	428a      	cmp	r2, r1
 800252a:	d02b      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 800252c:	3118      	adds	r1, #24
 800252e:	428a      	cmp	r2, r1
 8002530:	d028      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 8002532:	3118      	adds	r1, #24
 8002534:	428a      	cmp	r2, r1
 8002536:	d025      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 8002538:	3118      	adds	r1, #24
 800253a:	428a      	cmp	r2, r1
 800253c:	d022      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 800253e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002542:	428a      	cmp	r2, r1
 8002544:	d01e      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 8002546:	3118      	adds	r1, #24
 8002548:	428a      	cmp	r2, r1
 800254a:	d01b      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 800254c:	3118      	adds	r1, #24
 800254e:	428a      	cmp	r2, r1
 8002550:	d018      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 8002552:	3118      	adds	r1, #24
 8002554:	428a      	cmp	r2, r1
 8002556:	d015      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 8002558:	3118      	adds	r1, #24
 800255a:	428a      	cmp	r2, r1
 800255c:	d012      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 800255e:	3118      	adds	r1, #24
 8002560:	428a      	cmp	r2, r1
 8002562:	d00f      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 8002564:	3118      	adds	r1, #24
 8002566:	428a      	cmp	r2, r1
 8002568:	d00c      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 800256a:	3118      	adds	r1, #24
 800256c:	428a      	cmp	r2, r1
 800256e:	d009      	beq.n	8002584 <HAL_DMA_IRQHandler+0x344>
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002576:	e008      	b.n	800258a <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002578:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800257a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6563      	str	r3, [r4, #84]	; 0x54
 8002582:	e7bb      	b.n	80024fc <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800258a:	b1fa      	cbz	r2, 80025cc <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800258c:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002596:	d00d      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800259e:	d104      	bne.n	80025aa <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 80025a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025a2:	b19b      	cbz	r3, 80025cc <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 80025a4:	4620      	mov	r0, r4
 80025a6:	4798      	blx	r3
 80025a8:	e010      	b.n	80025cc <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80025aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80025ac:	b173      	cbz	r3, 80025cc <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 80025ae:	4620      	mov	r0, r4
 80025b0:	4798      	blx	r3
 80025b2:	e00b      	b.n	80025cc <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80025ba:	d103      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f022 0208 	bic.w	r2, r2, #8
 80025c2:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80025c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025c6:	b10b      	cbz	r3, 80025cc <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 80025c8:	4620      	mov	r0, r4
 80025ca:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2220      	movs	r2, #32
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	4233      	tst	r3, r6
 80025da:	f000 808e 	beq.w	80026fa <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80025de:	6822      	ldr	r2, [r4, #0]
 80025e0:	4866      	ldr	r0, [pc, #408]	; (800277c <HAL_DMA_IRQHandler+0x53c>)
 80025e2:	4967      	ldr	r1, [pc, #412]	; (8002780 <HAL_DMA_IRQHandler+0x540>)
 80025e4:	428a      	cmp	r2, r1
 80025e6:	bf18      	it	ne
 80025e8:	4282      	cmpne	r2, r0
 80025ea:	d02e      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 80025ec:	3118      	adds	r1, #24
 80025ee:	428a      	cmp	r2, r1
 80025f0:	d02b      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 80025f2:	3118      	adds	r1, #24
 80025f4:	428a      	cmp	r2, r1
 80025f6:	d028      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 80025f8:	3118      	adds	r1, #24
 80025fa:	428a      	cmp	r2, r1
 80025fc:	d025      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 80025fe:	3118      	adds	r1, #24
 8002600:	428a      	cmp	r2, r1
 8002602:	d022      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 8002604:	3118      	adds	r1, #24
 8002606:	428a      	cmp	r2, r1
 8002608:	d01f      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 800260a:	3118      	adds	r1, #24
 800260c:	428a      	cmp	r2, r1
 800260e:	d01c      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 8002610:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002614:	428a      	cmp	r2, r1
 8002616:	d018      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 8002618:	3118      	adds	r1, #24
 800261a:	428a      	cmp	r2, r1
 800261c:	d015      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 800261e:	3118      	adds	r1, #24
 8002620:	428a      	cmp	r2, r1
 8002622:	d012      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 8002624:	3118      	adds	r1, #24
 8002626:	428a      	cmp	r2, r1
 8002628:	d00f      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 800262a:	3118      	adds	r1, #24
 800262c:	428a      	cmp	r2, r1
 800262e:	d00c      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 8002630:	3118      	adds	r1, #24
 8002632:	428a      	cmp	r2, r1
 8002634:	d009      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 8002636:	3118      	adds	r1, #24
 8002638:	428a      	cmp	r2, r1
 800263a:	d006      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 800263c:	3118      	adds	r1, #24
 800263e:	428a      	cmp	r2, r1
 8002640:	d003      	beq.n	800264a <HAL_DMA_IRQHandler+0x40a>
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002648:	e002      	b.n	8002650 <HAL_DMA_IRQHandler+0x410>
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002650:	2a00      	cmp	r2, #0
 8002652:	d052      	beq.n	80026fa <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002654:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002656:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b04      	cmp	r3, #4
 800265e:	d00e      	beq.n	800267e <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002668:	d035      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002670:	d12c      	bne.n	80026cc <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 8002672:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002674:	2b00      	cmp	r3, #0
 8002676:	d040      	beq.n	80026fa <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 8002678:	4620      	mov	r0, r4
 800267a:	4798      	blx	r3
 800267c:	e03d      	b.n	80026fa <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	6813      	ldr	r3, [r2, #0]
 8002682:	f023 0316 	bic.w	r3, r3, #22
 8002686:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	6953      	ldr	r3, [r2, #20]
 800268c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002690:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002694:	b1b3      	cbz	r3, 80026c4 <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002696:	6822      	ldr	r2, [r4, #0]
 8002698:	6813      	ldr	r3, [r2, #0]
 800269a:	f023 0308 	bic.w	r3, r3, #8
 800269e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026a2:	f003 021f 	and.w	r2, r3, #31
 80026a6:	233f      	movs	r3, #63	; 0x3f
 80026a8:	4093      	lsls	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 80026ac:	2300      	movs	r3, #0
 80026ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80026b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d07f      	beq.n	80027be <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 80026be:	4620      	mov	r0, r4
 80026c0:	4798      	blx	r3
 80026c2:	e07c      	b.n	80027be <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e5      	bne.n	8002696 <HAL_DMA_IRQHandler+0x456>
 80026ca:	e7e9      	b.n	80026a0 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 80026cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026ce:	b1a3      	cbz	r3, 80026fa <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 80026d0:	4620      	mov	r0, r4
 80026d2:	4798      	blx	r3
 80026d4:	e011      	b.n	80026fa <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80026dc:	d109      	bne.n	80026f2 <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f022 0210 	bic.w	r2, r2, #16
 80026e4:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 80026e6:	2300      	movs	r3, #0
 80026e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 80026f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026f4:	b10b      	cbz	r3, 80026fa <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 80026f6:	4620      	mov	r0, r4
 80026f8:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d05e      	beq.n	80027be <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002702:	f013 0f01 	tst.w	r3, #1
 8002706:	d056      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 8002708:	2304      	movs	r3, #4
 800270a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	491a      	ldr	r1, [pc, #104]	; (800277c <HAL_DMA_IRQHandler+0x53c>)
 8002712:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_DMA_IRQHandler+0x540>)
 8002714:	4293      	cmp	r3, r2
 8002716:	bf18      	it	ne
 8002718:	428b      	cmpne	r3, r1
 800271a:	d033      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 800271c:	3218      	adds	r2, #24
 800271e:	4293      	cmp	r3, r2
 8002720:	d030      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 8002722:	3218      	adds	r2, #24
 8002724:	4293      	cmp	r3, r2
 8002726:	d02d      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 8002728:	3218      	adds	r2, #24
 800272a:	4293      	cmp	r3, r2
 800272c:	d02a      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 800272e:	3218      	adds	r2, #24
 8002730:	4293      	cmp	r3, r2
 8002732:	d027      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 8002734:	3218      	adds	r2, #24
 8002736:	4293      	cmp	r3, r2
 8002738:	d024      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 800273a:	3218      	adds	r2, #24
 800273c:	4293      	cmp	r3, r2
 800273e:	d021      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 8002740:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002744:	4293      	cmp	r3, r2
 8002746:	d01d      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 8002748:	3218      	adds	r2, #24
 800274a:	4293      	cmp	r3, r2
 800274c:	d01a      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 800274e:	3218      	adds	r2, #24
 8002750:	4293      	cmp	r3, r2
 8002752:	d017      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 8002754:	3218      	adds	r2, #24
 8002756:	4293      	cmp	r3, r2
 8002758:	d014      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 800275a:	3218      	adds	r2, #24
 800275c:	4293      	cmp	r3, r2
 800275e:	d011      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 8002760:	3218      	adds	r2, #24
 8002762:	4293      	cmp	r3, r2
 8002764:	d00e      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 8002766:	3218      	adds	r2, #24
 8002768:	4293      	cmp	r3, r2
 800276a:	d00b      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 800276c:	3218      	adds	r2, #24
 800276e:	4293      	cmp	r3, r2
 8002770:	d008      	beq.n	8002784 <HAL_DMA_IRQHandler+0x544>
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e007      	b.n	800278c <HAL_DMA_IRQHandler+0x54c>
 800277c:	40020010 	.word	0x40020010
 8002780:	40020028 	.word	0x40020028
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 800278c:	9b01      	ldr	r3, [sp, #4]
 800278e:	3301      	adds	r3, #1
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	42ab      	cmp	r3, r5
 8002794:	d804      	bhi.n	80027a0 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f013 0f01 	tst.w	r3, #1
 800279e:	d1f5      	bne.n	800278c <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 80027a0:	2300      	movs	r3, #0
 80027a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f013 0f01 	tst.w	r3, #1
 80027ae:	d008      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80027b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80027b8:	b10b      	cbz	r3, 80027be <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 80027ba:	4620      	mov	r0, r4
 80027bc:	4798      	blx	r3
}
 80027be:	b003      	add	sp, #12
 80027c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80027c8:	e7f5      	b.n	80027b6 <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 80027ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f6      	beq.n	80027be <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 80027d0:	4620      	mov	r0, r4
 80027d2:	4798      	blx	r3
 80027d4:	e7f3      	b.n	80027be <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80027d6:	f012 0f20 	tst.w	r2, #32
 80027da:	d135      	bne.n	8002848 <HAL_DMA_IRQHandler+0x608>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	4964      	ldr	r1, [pc, #400]	; (8002970 <HAL_DMA_IRQHandler+0x730>)
 80027e0:	4a64      	ldr	r2, [pc, #400]	; (8002974 <HAL_DMA_IRQHandler+0x734>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	bf18      	it	ne
 80027e6:	428b      	cmpne	r3, r1
 80027e8:	d02a      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 80027ea:	3218      	adds	r2, #24
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d027      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 80027f0:	3218      	adds	r2, #24
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d024      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 80027f6:	3218      	adds	r2, #24
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d021      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 80027fc:	3218      	adds	r2, #24
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01e      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 8002802:	3218      	adds	r2, #24
 8002804:	4293      	cmp	r3, r2
 8002806:	d01b      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 8002808:	3218      	adds	r2, #24
 800280a:	4293      	cmp	r3, r2
 800280c:	d018      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 800280e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002812:	4293      	cmp	r3, r2
 8002814:	d014      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 8002816:	3218      	adds	r2, #24
 8002818:	4293      	cmp	r3, r2
 800281a:	d011      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 800281c:	3218      	adds	r2, #24
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 8002822:	3218      	adds	r2, #24
 8002824:	4293      	cmp	r3, r2
 8002826:	d00b      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 8002828:	3218      	adds	r2, #24
 800282a:	4293      	cmp	r3, r2
 800282c:	d008      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 800282e:	3218      	adds	r2, #24
 8002830:	4293      	cmp	r3, r2
 8002832:	d005      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 8002834:	3218      	adds	r2, #24
 8002836:	4293      	cmp	r3, r2
 8002838:	d002      	beq.n	8002840 <HAL_DMA_IRQHandler+0x600>
 800283a:	3218      	adds	r2, #24
 800283c:	4293      	cmp	r3, r2
 800283e:	d109      	bne.n	8002854 <HAL_DMA_IRQHandler+0x614>
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f022 0208 	bic.w	r2, r2, #8
 8002846:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0b7      	beq.n	80027be <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 800284e:	4620      	mov	r0, r4
 8002850:	4798      	blx	r3
 8002852:	e7b4      	b.n	80027be <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	f022 0204 	bic.w	r2, r2, #4
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e7f4      	b.n	8002848 <HAL_DMA_IRQHandler+0x608>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800285e:	2002      	movs	r0, #2
 8002860:	4088      	lsls	r0, r1
 8002862:	ea10 0f0c 	tst.w	r0, ip
 8002866:	d060      	beq.n	800292a <HAL_DMA_IRQHandler+0x6ea>
 8002868:	f012 0f02 	tst.w	r2, #2
 800286c:	d05d      	beq.n	800292a <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800286e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002870:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002874:	d00e      	beq.n	8002894 <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002876:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800287a:	d105      	bne.n	8002888 <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 800287c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800287e:	2b00      	cmp	r3, #0
 8002880:	d09d      	beq.n	80027be <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 8002882:	4620      	mov	r0, r4
 8002884:	4798      	blx	r3
 8002886:	e79a      	b.n	80027be <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 8002888:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d097      	beq.n	80027be <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 800288e:	4620      	mov	r0, r4
 8002890:	4798      	blx	r3
 8002892:	e794      	b.n	80027be <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002894:	f012 0f20 	tst.w	r2, #32
 8002898:	d13b      	bne.n	8002912 <HAL_DMA_IRQHandler+0x6d2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	4934      	ldr	r1, [pc, #208]	; (8002970 <HAL_DMA_IRQHandler+0x730>)
 800289e:	4a35      	ldr	r2, [pc, #212]	; (8002974 <HAL_DMA_IRQHandler+0x734>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf18      	it	ne
 80028a4:	428b      	cmpne	r3, r1
 80028a6:	d02a      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028a8:	3218      	adds	r2, #24
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d027      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028ae:	3218      	adds	r2, #24
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d024      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028b4:	3218      	adds	r2, #24
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d021      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028ba:	3218      	adds	r2, #24
 80028bc:	4293      	cmp	r3, r2
 80028be:	d01e      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028c0:	3218      	adds	r2, #24
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01b      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028c6:	3218      	adds	r2, #24
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d018      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028cc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d014      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028d4:	3218      	adds	r2, #24
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d011      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028da:	3218      	adds	r2, #24
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00e      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028e0:	3218      	adds	r2, #24
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00b      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028e6:	3218      	adds	r2, #24
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d008      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028ec:	3218      	adds	r2, #24
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d005      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028f2:	3218      	adds	r2, #24
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d002      	beq.n	80028fe <HAL_DMA_IRQHandler+0x6be>
 80028f8:	3218      	adds	r2, #24
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d110      	bne.n	8002920 <HAL_DMA_IRQHandler+0x6e0>
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f022 0214 	bic.w	r2, r2, #20
 8002904:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002906:	2300      	movs	r3, #0
 8002908:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800290c:	2301      	movs	r3, #1
 800290e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002912:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002914:	2b00      	cmp	r3, #0
 8002916:	f43f af52 	beq.w	80027be <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 800291a:	4620      	mov	r0, r4
 800291c:	4798      	blx	r3
 800291e:	e74e      	b.n	80027be <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f022 020a 	bic.w	r2, r2, #10
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e7ed      	b.n	8002906 <HAL_DMA_IRQHandler+0x6c6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800292a:	2008      	movs	r0, #8
 800292c:	fa00 f101 	lsl.w	r1, r0, r1
 8002930:	ea11 0f0c 	tst.w	r1, ip
 8002934:	f43f af43 	beq.w	80027be <HAL_DMA_IRQHandler+0x57e>
 8002938:	f012 0f08 	tst.w	r2, #8
 800293c:	f43f af3f 	beq.w	80027be <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	f022 020e 	bic.w	r2, r2, #14
 8002946:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002948:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2201      	movs	r2, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002956:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002958:	2300      	movs	r3, #0
 800295a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800295e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002962:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002964:	2b00      	cmp	r3, #0
 8002966:	f43f af2a 	beq.w	80027be <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 800296a:	4620      	mov	r0, r4
 800296c:	4798      	blx	r3
 800296e:	e726      	b.n	80027be <HAL_DMA_IRQHandler+0x57e>
 8002970:	40020010 	.word	0x40020010
 8002974:	40020028 	.word	0x40020028

08002978 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002978:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800297a:	4770      	bx	lr

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002980:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002982:	e03a      	b.n	80029fa <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002984:	2409      	movs	r4, #9
 8002986:	e000      	b.n	800298a <HAL_GPIO_Init+0xe>
 8002988:	2400      	movs	r4, #0
 800298a:	40b4      	lsls	r4, r6
 800298c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298e:	3502      	adds	r5, #2
 8002990:	4e6e      	ldr	r6, [pc, #440]	; (8002b4c <HAL_GPIO_Init+0x1d0>)
 8002992:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002996:	4c6e      	ldr	r4, [pc, #440]	; (8002b50 <HAL_GPIO_Init+0x1d4>)
 8002998:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800299a:	43d4      	mvns	r4, r2
 800299c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a0:	684f      	ldr	r7, [r1, #4]
 80029a2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80029a6:	d001      	beq.n	80029ac <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 80029a8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029ac:	4d68      	ldr	r5, [pc, #416]	; (8002b50 <HAL_GPIO_Init+0x1d4>)
 80029ae:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80029b0:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 80029b2:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b6:	684f      	ldr	r7, [r1, #4]
 80029b8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80029bc:	d001      	beq.n	80029c2 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 80029be:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029c2:	4e63      	ldr	r6, [pc, #396]	; (8002b50 <HAL_GPIO_Init+0x1d4>)
 80029c4:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029c6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80029ca:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80029cc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d0:	684f      	ldr	r7, [r1, #4]
 80029d2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80029d6:	d001      	beq.n	80029dc <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 80029d8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80029dc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80029e0:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80029e2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80029e4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e6:	684e      	ldr	r6, [r1, #4]
 80029e8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80029ec:	d001      	beq.n	80029f2 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80029ee:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80029f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f6:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80029f8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029fa:	680a      	ldr	r2, [r1, #0]
 80029fc:	fa32 f403 	lsrs.w	r4, r2, r3
 8002a00:	f000 80a2 	beq.w	8002b48 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a04:	2401      	movs	r4, #1
 8002a06:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8002a08:	4022      	ands	r2, r4
 8002a0a:	d0f5      	beq.n	80029f8 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a0c:	684d      	ldr	r5, [r1, #4]
 8002a0e:	1e6e      	subs	r6, r5, #1
 8002a10:	2d11      	cmp	r5, #17
 8002a12:	bf18      	it	ne
 8002a14:	2e01      	cmpne	r6, #1
 8002a16:	d901      	bls.n	8002a1c <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a18:	2d12      	cmp	r5, #18
 8002a1a:	d112      	bne.n	8002a42 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 8002a1c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a1e:	005f      	lsls	r7, r3, #1
 8002a20:	2503      	movs	r5, #3
 8002a22:	40bd      	lsls	r5, r7
 8002a24:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a28:	68cd      	ldr	r5, [r1, #12]
 8002a2a:	40bd      	lsls	r5, r7
 8002a2c:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002a2e:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a30:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a32:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a36:	684d      	ldr	r5, [r1, #4]
 8002a38:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8002a3c:	409c      	lsls	r4, r3
 8002a3e:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8002a40:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002a42:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a44:	005f      	lsls	r7, r3, #1
 8002a46:	2503      	movs	r5, #3
 8002a48:	40bd      	lsls	r5, r7
 8002a4a:	43ec      	mvns	r4, r5
 8002a4c:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4e:	688d      	ldr	r5, [r1, #8]
 8002a50:	40bd      	lsls	r5, r7
 8002a52:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002a54:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a56:	684d      	ldr	r5, [r1, #4]
 8002a58:	2d12      	cmp	r5, #18
 8002a5a:	bf18      	it	ne
 8002a5c:	2d02      	cmpne	r5, #2
 8002a5e:	d113      	bne.n	8002a88 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8002a60:	08de      	lsrs	r6, r3, #3
 8002a62:	3608      	adds	r6, #8
 8002a64:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a68:	f003 0507 	and.w	r5, r3, #7
 8002a6c:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002a70:	250f      	movs	r5, #15
 8002a72:	fa05 f50c 	lsl.w	r5, r5, ip
 8002a76:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a7a:	690d      	ldr	r5, [r1, #16]
 8002a7c:	fa05 f50c 	lsl.w	r5, r5, ip
 8002a80:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002a84:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002a88:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a8a:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8c:	684c      	ldr	r4, [r1, #4]
 8002a8e:	f004 0403 	and.w	r4, r4, #3
 8002a92:	40bc      	lsls	r4, r7
 8002a94:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002a96:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a98:	684c      	ldr	r4, [r1, #4]
 8002a9a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002a9e:	d0ab      	beq.n	80029f8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa0:	4c2c      	ldr	r4, [pc, #176]	; (8002b54 <HAL_GPIO_Init+0x1d8>)
 8002aa2:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002aa6:	f045 0502 	orr.w	r5, r5, #2
 8002aaa:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8002aae:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8002ab2:	f004 0402 	and.w	r4, r4, #2
 8002ab6:	9401      	str	r4, [sp, #4]
 8002ab8:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002aba:	089d      	lsrs	r5, r3, #2
 8002abc:	1cae      	adds	r6, r5, #2
 8002abe:	4c23      	ldr	r4, [pc, #140]	; (8002b4c <HAL_GPIO_Init+0x1d0>)
 8002ac0:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ac4:	f003 0403 	and.w	r4, r3, #3
 8002ac8:	00a6      	lsls	r6, r4, #2
 8002aca:	240f      	movs	r4, #15
 8002acc:	40b4      	lsls	r4, r6
 8002ace:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ad2:	4c21      	ldr	r4, [pc, #132]	; (8002b58 <HAL_GPIO_Init+0x1dc>)
 8002ad4:	42a0      	cmp	r0, r4
 8002ad6:	f43f af57 	beq.w	8002988 <HAL_GPIO_Init+0xc>
 8002ada:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ade:	42a0      	cmp	r0, r4
 8002ae0:	d022      	beq.n	8002b28 <HAL_GPIO_Init+0x1ac>
 8002ae2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ae6:	42a0      	cmp	r0, r4
 8002ae8:	d020      	beq.n	8002b2c <HAL_GPIO_Init+0x1b0>
 8002aea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002aee:	42a0      	cmp	r0, r4
 8002af0:	d01e      	beq.n	8002b30 <HAL_GPIO_Init+0x1b4>
 8002af2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002af6:	42a0      	cmp	r0, r4
 8002af8:	d01c      	beq.n	8002b34 <HAL_GPIO_Init+0x1b8>
 8002afa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002afe:	42a0      	cmp	r0, r4
 8002b00:	d01a      	beq.n	8002b38 <HAL_GPIO_Init+0x1bc>
 8002b02:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b06:	42a0      	cmp	r0, r4
 8002b08:	d018      	beq.n	8002b3c <HAL_GPIO_Init+0x1c0>
 8002b0a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b0e:	42a0      	cmp	r0, r4
 8002b10:	d016      	beq.n	8002b40 <HAL_GPIO_Init+0x1c4>
 8002b12:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b16:	42a0      	cmp	r0, r4
 8002b18:	d014      	beq.n	8002b44 <HAL_GPIO_Init+0x1c8>
 8002b1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b1e:	42a0      	cmp	r0, r4
 8002b20:	f43f af30 	beq.w	8002984 <HAL_GPIO_Init+0x8>
 8002b24:	240a      	movs	r4, #10
 8002b26:	e730      	b.n	800298a <HAL_GPIO_Init+0xe>
 8002b28:	2401      	movs	r4, #1
 8002b2a:	e72e      	b.n	800298a <HAL_GPIO_Init+0xe>
 8002b2c:	2402      	movs	r4, #2
 8002b2e:	e72c      	b.n	800298a <HAL_GPIO_Init+0xe>
 8002b30:	2403      	movs	r4, #3
 8002b32:	e72a      	b.n	800298a <HAL_GPIO_Init+0xe>
 8002b34:	2404      	movs	r4, #4
 8002b36:	e728      	b.n	800298a <HAL_GPIO_Init+0xe>
 8002b38:	2405      	movs	r4, #5
 8002b3a:	e726      	b.n	800298a <HAL_GPIO_Init+0xe>
 8002b3c:	2406      	movs	r4, #6
 8002b3e:	e724      	b.n	800298a <HAL_GPIO_Init+0xe>
 8002b40:	2407      	movs	r4, #7
 8002b42:	e722      	b.n	800298a <HAL_GPIO_Init+0xe>
 8002b44:	2408      	movs	r4, #8
 8002b46:	e720      	b.n	800298a <HAL_GPIO_Init+0xe>
  }
}
 8002b48:	b003      	add	sp, #12
 8002b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4c:	58000400 	.word	0x58000400
 8002b50:	58000080 	.word	0x58000080
 8002b54:	58024400 	.word	0x58024400
 8002b58:	58020000 	.word	0x58020000

08002b5c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b5c:	6903      	ldr	r3, [r0, #16]
 8002b5e:	4219      	tst	r1, r3
 8002b60:	d101      	bne.n	8002b66 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b62:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002b64:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002b66:	2001      	movs	r0, #1
 8002b68:	4770      	bx	lr

08002b6a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b6a:	b912      	cbnz	r2, 8002b72 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b6c:	0409      	lsls	r1, r1, #16
 8002b6e:	6181      	str	r1, [r0, #24]
  }
}
 8002b70:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002b72:	6181      	str	r1, [r0, #24]
 8002b74:	4770      	bx	lr

08002b76 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b76:	6803      	ldr	r3, [r0, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	f012 0f02 	tst.w	r2, #2
 8002b7e:	d001      	beq.n	8002b84 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b84:	6803      	ldr	r3, [r0, #0]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	f012 0f01 	tst.w	r2, #1
 8002b8c:	d103      	bne.n	8002b96 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	f042 0201 	orr.w	r2, r2, #1
 8002b94:	619a      	str	r2, [r3, #24]
  }
}
 8002b96:	4770      	bx	lr

08002b98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002b98:	b470      	push	{r4, r5, r6}
 8002b9a:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b9c:	6805      	ldr	r5, [r0, #0]
 8002b9e:	6868      	ldr	r0, [r5, #4]
 8002ba0:	0d74      	lsrs	r4, r6, #21
 8002ba2:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002ba6:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002baa:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002bae:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002bb2:	f044 0403 	orr.w	r4, r4, #3
 8002bb6:	ea20 0004 	bic.w	r0, r0, r4
 8002bba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002bbe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002bc2:	4319      	orrs	r1, r3
 8002bc4:	4331      	orrs	r1, r6
 8002bc6:	4301      	orrs	r1, r0
 8002bc8:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002bca:	bc70      	pop	{r4, r5, r6}
 8002bcc:	4770      	bx	lr

08002bce <I2C_IsAcknowledgeFailed>:
{
 8002bce:	b570      	push	{r4, r5, r6, lr}
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	460d      	mov	r5, r1
 8002bd4:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd6:	6803      	ldr	r3, [r0, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f013 0f10 	tst.w	r3, #16
 8002bde:	d01c      	beq.n	8002c1a <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	f012 0f20 	tst.w	r2, #32
 8002be8:	d119      	bne.n	8002c1e <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002bea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002bee:	d0f7      	beq.n	8002be0 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf0:	f7fd fd52 	bl	8000698 <HAL_GetTick>
 8002bf4:	1b80      	subs	r0, r0, r6
 8002bf6:	42a8      	cmp	r0, r5
 8002bf8:	d801      	bhi.n	8002bfe <I2C_IsAcknowledgeFailed+0x30>
 8002bfa:	2d00      	cmp	r5, #0
 8002bfc:	d1f0      	bne.n	8002be0 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c00:	f043 0320 	orr.w	r3, r3, #32
 8002c04:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	2320      	movs	r3, #32
 8002c08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002c12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
 8002c18:	e020      	b.n	8002c5c <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	e01e      	b.n	8002c5c <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c1e:	2210      	movs	r2, #16
 8002c20:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	2520      	movs	r5, #32
 8002c26:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7ff ffa4 	bl	8002b76 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	6853      	ldr	r3, [r2, #4]
 8002c32:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002c36:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002c3a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002c56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002c5a:	2001      	movs	r0, #1
}
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}

08002c5e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002c5e:	b570      	push	{r4, r5, r6, lr}
 8002c60:	4604      	mov	r4, r0
 8002c62:	460d      	mov	r5, r1
 8002c64:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f013 0f02 	tst.w	r3, #2
 8002c6e:	d11d      	bne.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c70:	4632      	mov	r2, r6
 8002c72:	4629      	mov	r1, r5
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7ff ffaa 	bl	8002bce <I2C_IsAcknowledgeFailed>
 8002c7a:	b9c8      	cbnz	r0, 8002cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002c7c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002c80:	d0f1      	beq.n	8002c66 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c82:	f7fd fd09 	bl	8000698 <HAL_GetTick>
 8002c86:	1b80      	subs	r0, r0, r6
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	d801      	bhi.n	8002c90 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002c8c:	2d00      	cmp	r5, #0
 8002c8e:	d1ea      	bne.n	8002c66 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c92:	f043 0320 	orr.w	r3, r3, #32
 8002c96:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002ca4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
 8002caa:	e000      	b.n	8002cae <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002cac:	2000      	movs	r0, #0
}
 8002cae:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	e7fc      	b.n	8002cae <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002cb4 <I2C_WaitOnFlagUntilTimeout>:
{
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	4605      	mov	r5, r0
 8002cb8:	460f      	mov	r7, r1
 8002cba:	4616      	mov	r6, r2
 8002cbc:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cbe:	682b      	ldr	r3, [r5, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	ea37 0303 	bics.w	r3, r7, r3
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	42b3      	cmp	r3, r6
 8002cce:	d118      	bne.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002cd0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002cd4:	d0f3      	beq.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7fd fcdf 	bl	8000698 <HAL_GetTick>
 8002cda:	9b06      	ldr	r3, [sp, #24]
 8002cdc:	1ac0      	subs	r0, r0, r3
 8002cde:	42a0      	cmp	r0, r4
 8002ce0:	d801      	bhi.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002ce2:	2c00      	cmp	r4, #0
 8002ce4:	d1eb      	bne.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002ce8:	f043 0320 	orr.w	r3, r3, #32
 8002cec:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002cfa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002cfe:	2001      	movs	r0, #1
 8002d00:	e000      	b.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8002d02:	2000      	movs	r0, #0
}
 8002d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d06 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002d06:	b570      	push	{r4, r5, r6, lr}
 8002d08:	4605      	mov	r5, r0
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d0e:	682b      	ldr	r3, [r5, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f013 0f20 	tst.w	r3, #32
 8002d16:	d11a      	bne.n	8002d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d18:	4632      	mov	r2, r6
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	f7ff ff56 	bl	8002bce <I2C_IsAcknowledgeFailed>
 8002d22:	b9b0      	cbnz	r0, 8002d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d24:	f7fd fcb8 	bl	8000698 <HAL_GetTick>
 8002d28:	1b80      	subs	r0, r0, r6
 8002d2a:	42a0      	cmp	r0, r4
 8002d2c:	d801      	bhi.n	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002d2e:	2c00      	cmp	r4, #0
 8002d30:	d1ed      	bne.n	8002d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d32:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002d34:	f043 0320 	orr.w	r3, r3, #32
 8002d38:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002d46:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002d4a:	2001      	movs	r0, #1
}
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e7fc      	b.n	8002d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002d52:	2001      	movs	r0, #1
 8002d54:	e7fa      	b.n	8002d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08002d58 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d057      	beq.n	8002e0c <HAL_I2C_Init+0xb4>
{
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d041      	beq.n	8002dec <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d68:	2324      	movs	r3, #36	; 0x24
 8002d6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	6813      	ldr	r3, [r2, #0]
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d78:	6863      	ldr	r3, [r4, #4]
 8002d7a:	6822      	ldr	r2, [r4, #0]
 8002d7c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002d80:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d82:	6822      	ldr	r2, [r4, #0]
 8002d84:	6893      	ldr	r3, [r2, #8]
 8002d86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d8a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d8c:	68e3      	ldr	r3, [r4, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d031      	beq.n	8002df6 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d92:	68a3      	ldr	r3, [r4, #8]
 8002d94:	6822      	ldr	r2, [r4, #0]
 8002d96:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002d9a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d9c:	68e3      	ldr	r3, [r4, #12]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d02f      	beq.n	8002e02 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002da2:	6822      	ldr	r2, [r4, #0]
 8002da4:	6851      	ldr	r1, [r2, #4]
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_I2C_Init+0xb8>)
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dac:	6822      	ldr	r2, [r4, #0]
 8002dae:	68d3      	ldr	r3, [r2, #12]
 8002db0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002db4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002db6:	6923      	ldr	r3, [r4, #16]
 8002db8:	6962      	ldr	r2, [r4, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	69a1      	ldr	r1, [r4, #24]
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002dc4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dc6:	69e3      	ldr	r3, [r4, #28]
 8002dc8:	6a21      	ldr	r1, [r4, #32]
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002dd0:	6822      	ldr	r2, [r4, #0]
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dda:	2000      	movs	r0, #0
 8002ddc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	2320      	movs	r3, #32
 8002de0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002dea:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002dec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002df0:	f007 fb8a 	bl	800a508 <HAL_I2C_MspInit>
 8002df4:	e7b8      	b.n	8002d68 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002df6:	68a3      	ldr	r3, [r4, #8]
 8002df8:	6822      	ldr	r2, [r4, #0]
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	6093      	str	r3, [r2, #8]
 8002e00:	e7cc      	b.n	8002d9c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	e7ca      	b.n	8002da2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002e0c:	2001      	movs	r0, #1
}
 8002e0e:	4770      	bx	lr
 8002e10:	02008000 	.word	0x02008000

08002e14 <HAL_I2C_Master_Transmit>:
{
 8002e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e18:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002e1e:	b2ed      	uxtb	r5, r5
 8002e20:	2d20      	cmp	r5, #32
 8002e22:	f040 80a4 	bne.w	8002f6e <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8002e26:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002e2a:	2c01      	cmp	r4, #1
 8002e2c:	f000 80a4 	beq.w	8002f78 <HAL_I2C_Master_Transmit+0x164>
 8002e30:	4698      	mov	r8, r3
 8002e32:	4617      	mov	r7, r2
 8002e34:	460e      	mov	r6, r1
 8002e36:	4604      	mov	r4, r0
 8002e38:	f04f 0901 	mov.w	r9, #1
 8002e3c:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002e40:	f7fd fc2a 	bl	8000698 <HAL_GetTick>
 8002e44:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e46:	9000      	str	r0, [sp, #0]
 8002e48:	2319      	movs	r3, #25
 8002e4a:	464a      	mov	r2, r9
 8002e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e50:	4620      	mov	r0, r4
 8002e52:	f7ff ff2f 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	f040 8090 	bne.w	8002f7c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e5c:	2321      	movs	r3, #33	; 0x21
 8002e5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e62:	2310      	movs	r3, #16
 8002e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002e6c:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e6e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e72:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2bff      	cmp	r3, #255	; 0xff
 8002e7a:	d90a      	bls.n	8002e92 <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7c:	22ff      	movs	r2, #255	; 0xff
 8002e7e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <HAL_I2C_Master_Transmit+0x178>)
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e88:	4631      	mov	r1, r6
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff fe84 	bl	8002b98 <I2C_TransferConfig>
 8002e90:	e018      	b.n	8002ec4 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8002e92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e94:	b292      	uxth	r2, r2
 8002e96:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002e98:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <HAL_I2C_Master_Transmit+0x178>)
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	4631      	mov	r1, r6
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f7ff fe77 	bl	8002b98 <I2C_TransferConfig>
 8002eaa:	e00b      	b.n	8002ec4 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8002eac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002eae:	b292      	uxth	r2, r2
 8002eb0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	4631      	mov	r1, r6
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7ff fe6a 	bl	8002b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ec4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d033      	beq.n	8002f34 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ecc:	462a      	mov	r2, r5
 8002ece:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7ff fec4 	bl	8002c5e <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d152      	bne.n	8002f80 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002ee8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ef0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ef8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002efa:	b292      	uxth	r2, r2
 8002efc:	2a00      	cmp	r2, #0
 8002efe:	d0e1      	beq.n	8002ec4 <HAL_I2C_Master_Transmit+0xb0>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1df      	bne.n	8002ec4 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f04:	9500      	str	r5, [sp, #0]
 8002f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff fed1 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d136      	bne.n	8002f84 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2bff      	cmp	r3, #255	; 0xff
 8002f1c:	d9c6      	bls.n	8002eac <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f1e:	22ff      	movs	r2, #255	; 0xff
 8002f20:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f22:	2300      	movs	r3, #0
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f2a:	4631      	mov	r1, r6
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7ff fe33 	bl	8002b98 <I2C_TransferConfig>
 8002f32:	e7c7      	b.n	8002ec4 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f34:	462a      	mov	r2, r5
 8002f36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7ff fee4 	bl	8002d06 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	bb10      	cbnz	r0, 8002f88 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	2120      	movs	r1, #32
 8002f46:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	6842      	ldr	r2, [r0, #4]
 8002f4c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002f50:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002f54:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f62:	2200      	movs	r2, #0
 8002f64:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002f68:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002f6c:	e000      	b.n	8002f70 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	b003      	add	sp, #12
 8002f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e7f9      	b.n	8002f70 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e7f7      	b.n	8002f70 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e7f5      	b.n	8002f70 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e7f3      	b.n	8002f70 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e7f1      	b.n	8002f70 <HAL_I2C_Master_Transmit+0x15c>
 8002f8c:	80002000 	.word	0x80002000

08002f90 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f90:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d124      	bne.n	8002fe4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d022      	beq.n	8002fe8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa8:	2324      	movs	r3, #36	; 0x24
 8002faa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fae:	6802      	ldr	r2, [r0, #0]
 8002fb0:	6813      	ldr	r3, [r2, #0]
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fb8:	6802      	ldr	r2, [r0, #0]
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fc0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fc2:	6802      	ldr	r2, [r0, #0]
 8002fc4:	6813      	ldr	r3, [r2, #0]
 8002fc6:	4319      	orrs	r1, r3
 8002fc8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fca:	6802      	ldr	r2, [r0, #0]
 8002fcc:	6813      	ldr	r3, [r2, #0]
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002fe8:	2002      	movs	r0, #2
  }
}
 8002fea:	4770      	bx	lr

08002fec <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d122      	bne.n	800303c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d020      	beq.n	8003040 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002ffe:	2301      	movs	r3, #1
 8003000:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003004:	2324      	movs	r3, #36	; 0x24
 8003006:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800300a:	6802      	ldr	r2, [r0, #0]
 800300c:	6813      	ldr	r3, [r2, #0]
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003014:	6802      	ldr	r2, [r0, #0]
 8003016:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800301c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003020:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003022:	6802      	ldr	r2, [r0, #0]
 8003024:	6813      	ldr	r3, [r2, #0]
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800302c:	2320      	movs	r3, #32
 800302e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003032:	2300      	movs	r3, #0
 8003034:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003038:	4618      	mov	r0, r3
 800303a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800303c:	2002      	movs	r0, #2
 800303e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003040:	2002      	movs	r0, #2
  }
}
 8003042:	4770      	bx	lr

08003044 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003044:	4b13      	ldr	r3, [pc, #76]	; (8003094 <HAL_PWREx_ConfigSupply+0x50>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f013 0f04 	tst.w	r3, #4
 800304c:	d107      	bne.n	800305e <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_PWREx_ConfigSupply+0x50>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	4283      	cmp	r3, r0
 8003058:	d01a      	beq.n	8003090 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800305a:	2001      	movs	r0, #1
 800305c:	4770      	bx	lr
{
 800305e:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003060:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <HAL_PWREx_ConfigSupply+0x50>)
 8003062:	68d3      	ldr	r3, [r2, #12]
 8003064:	f023 0307 	bic.w	r3, r3, #7
 8003068:	4318      	orrs	r0, r3
 800306a:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800306c:	f7fd fb14 	bl	8000698 <HAL_GetTick>
 8003070:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_PWREx_ConfigSupply+0x50>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800307a:	d107      	bne.n	800308c <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800307c:	f7fd fb0c 	bl	8000698 <HAL_GetTick>
 8003080:	1b00      	subs	r0, r0, r4
 8003082:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003086:	d9f4      	bls.n	8003072 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8003088:	2001      	movs	r0, #1
 800308a:	e000      	b.n	800308e <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800308c:	2000      	movs	r0, #0
}
 800308e:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8003090:	2000      	movs	r0, #0
}
 8003092:	4770      	bx	lr
 8003094:	58024800 	.word	0x58024800

08003098 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003098:	2800      	cmp	r0, #0
 800309a:	f000 82e6 	beq.w	800366a <HAL_RCC_OscConfig+0x5d2>
{
 800309e:	b538      	push	{r3, r4, r5, lr}
 80030a0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a2:	6803      	ldr	r3, [r0, #0]
 80030a4:	f013 0f01 	tst.w	r3, #1
 80030a8:	d025      	beq.n	80030f6 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4aaa      	ldr	r2, [pc, #680]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80030ac:	6913      	ldr	r3, [r2, #16]
 80030ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d015      	beq.n	80030e4 <HAL_RCC_OscConfig+0x4c>
 80030b8:	2b18      	cmp	r3, #24
 80030ba:	d00f      	beq.n	80030dc <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030bc:	6863      	ldr	r3, [r4, #4]
 80030be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c2:	d03e      	beq.n	8003142 <HAL_RCC_OscConfig+0xaa>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d152      	bne.n	800316e <HAL_RCC_OscConfig+0xd6>
 80030c8:	4ba2      	ldr	r3, [pc, #648]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e037      	b.n	800314c <HAL_RCC_OscConfig+0xb4>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80030dc:	f002 0203 	and.w	r2, r2, #3
 80030e0:	2a02      	cmp	r2, #2
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	4b9b      	ldr	r3, [pc, #620]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030ec:	d003      	beq.n	80030f6 <HAL_RCC_OscConfig+0x5e>
 80030ee:	6863      	ldr	r3, [r4, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 82bc 	beq.w	800366e <HAL_RCC_OscConfig+0x5d6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	f013 0f02 	tst.w	r3, #2
 80030fc:	d077      	beq.n	80031ee <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fe:	4a95      	ldr	r2, [pc, #596]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003100:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003102:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003104:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003108:	d05a      	beq.n	80031c0 <HAL_RCC_OscConfig+0x128>
 800310a:	2b18      	cmp	r3, #24
 800310c:	d055      	beq.n	80031ba <HAL_RCC_OscConfig+0x122>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800310e:	68e3      	ldr	r3, [r4, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80b2 	beq.w	800327a <HAL_RCC_OscConfig+0x1e2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003116:	498f      	ldr	r1, [pc, #572]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003118:	680a      	ldr	r2, [r1, #0]
 800311a:	f022 0219 	bic.w	r2, r2, #25
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fd fab9 	bl	8000698 <HAL_GetTick>
 8003126:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003128:	4b8a      	ldr	r3, [pc, #552]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f013 0f04 	tst.w	r3, #4
 8003130:	f040 808b 	bne.w	800324a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003134:	f7fd fab0 	bl	8000698 <HAL_GetTick>
 8003138:	1b40      	subs	r0, r0, r5
 800313a:	2802      	cmp	r0, #2
 800313c:	d9f4      	bls.n	8003128 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 800313e:	2003      	movs	r0, #3
 8003140:	e29a      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003142:	4a84      	ldr	r2, [pc, #528]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800314c:	6863      	ldr	r3, [r4, #4]
 800314e:	b32b      	cbz	r3, 800319c <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8003150:	f7fd faa2 	bl	8000698 <HAL_GetTick>
 8003154:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800315e:	d1ca      	bne.n	80030f6 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7fd fa9a 	bl	8000698 <HAL_GetTick>
 8003164:	1b40      	subs	r0, r0, r5
 8003166:	2864      	cmp	r0, #100	; 0x64
 8003168:	d9f5      	bls.n	8003156 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 800316a:	2003      	movs	r0, #3
 800316c:	e284      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003172:	d009      	beq.n	8003188 <HAL_RCC_OscConfig+0xf0>
 8003174:	4b77      	ldr	r3, [pc, #476]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e7e1      	b.n	800314c <HAL_RCC_OscConfig+0xb4>
 8003188:	4b72      	ldr	r3, [pc, #456]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e7d7      	b.n	800314c <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 800319c:	f7fd fa7c 	bl	8000698 <HAL_GetTick>
 80031a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031a2:	4b6c      	ldr	r3, [pc, #432]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80031aa:	d0a4      	beq.n	80030f6 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fd fa74 	bl	8000698 <HAL_GetTick>
 80031b0:	1b40      	subs	r0, r0, r5
 80031b2:	2864      	cmp	r0, #100	; 0x64
 80031b4:	d9f5      	bls.n	80031a2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80031b6:	2003      	movs	r0, #3
 80031b8:	e25e      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031ba:	f012 0f03 	tst.w	r2, #3
 80031be:	d1a6      	bne.n	800310e <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c0:	4b64      	ldr	r3, [pc, #400]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f013 0f04 	tst.w	r3, #4
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_OscConfig+0x13a>
 80031ca:	68e3      	ldr	r3, [r4, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8250 	beq.w	8003672 <HAL_RCC_OscConfig+0x5da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	f7fd fa7b 	bl	80006cc <HAL_GetREVID>
 80031d6:	f241 0303 	movw	r3, #4099	; 0x1003
 80031da:	4298      	cmp	r0, r3
 80031dc:	d82c      	bhi.n	8003238 <HAL_RCC_OscConfig+0x1a0>
 80031de:	4a5d      	ldr	r2, [pc, #372]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80031e0:	6853      	ldr	r3, [r2, #4]
 80031e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031e6:	6921      	ldr	r1, [r4, #16]
 80031e8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80031ec:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	f013 0f10 	tst.w	r3, #16
 80031f4:	d071      	beq.n	80032da <HAL_RCC_OscConfig+0x242>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f6:	4a57      	ldr	r2, [pc, #348]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80031f8:	6913      	ldr	r3, [r2, #16]
 80031fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003200:	2b08      	cmp	r3, #8
 8003202:	d052      	beq.n	80032aa <HAL_RCC_OscConfig+0x212>
 8003204:	2b18      	cmp	r3, #24
 8003206:	d04c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x20a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003208:	69e3      	ldr	r3, [r4, #28]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80a4 	beq.w	8003358 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003210:	4a50      	ldr	r2, [pc, #320]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003212:	6813      	ldr	r3, [r2, #0]
 8003214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fd fa3d 	bl	8000698 <HAL_GetTick>
 800321e:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003220:	4b4c      	ldr	r3, [pc, #304]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003228:	d17b      	bne.n	8003322 <HAL_RCC_OscConfig+0x28a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800322a:	f7fd fa35 	bl	8000698 <HAL_GetTick>
 800322e:	1b40      	subs	r0, r0, r5
 8003230:	2802      	cmp	r0, #2
 8003232:	d9f5      	bls.n	8003220 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003234:	2003      	movs	r0, #3
 8003236:	e21f      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4a46      	ldr	r2, [pc, #280]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 800323a:	6853      	ldr	r3, [r2, #4]
 800323c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003240:	6921      	ldr	r1, [r4, #16]
 8003242:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003246:	6053      	str	r3, [r2, #4]
 8003248:	e7d1      	b.n	80031ee <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324a:	f7fd fa3f 	bl	80006cc <HAL_GetREVID>
 800324e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003252:	4298      	cmp	r0, r3
 8003254:	d808      	bhi.n	8003268 <HAL_RCC_OscConfig+0x1d0>
 8003256:	4a3f      	ldr	r2, [pc, #252]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003258:	6853      	ldr	r3, [r2, #4]
 800325a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800325e:	6921      	ldr	r1, [r4, #16]
 8003260:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003264:	6053      	str	r3, [r2, #4]
 8003266:	e7c2      	b.n	80031ee <HAL_RCC_OscConfig+0x156>
 8003268:	4a3a      	ldr	r2, [pc, #232]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 800326a:	6853      	ldr	r3, [r2, #4]
 800326c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003270:	6921      	ldr	r1, [r4, #16]
 8003272:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003276:	6053      	str	r3, [r2, #4]
 8003278:	e7b9      	b.n	80031ee <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_DISABLE();
 800327a:	4a36      	ldr	r2, [pc, #216]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 800327c:	6813      	ldr	r3, [r2, #0]
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003284:	f7fd fa08 	bl	8000698 <HAL_GetTick>
 8003288:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800328a:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f013 0f04 	tst.w	r3, #4
 8003292:	d0ac      	beq.n	80031ee <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003294:	f7fd fa00 	bl	8000698 <HAL_GetTick>
 8003298:	1b40      	subs	r0, r0, r5
 800329a:	2802      	cmp	r0, #2
 800329c:	d9f5      	bls.n	800328a <HAL_RCC_OscConfig+0x1f2>
            return HAL_TIMEOUT;
 800329e:	2003      	movs	r0, #3
 80032a0:	e1ea      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032a2:	f002 0203 	and.w	r2, r2, #3
 80032a6:	2a01      	cmp	r2, #1
 80032a8:	d1ae      	bne.n	8003208 <HAL_RCC_OscConfig+0x170>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032aa:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032b2:	d004      	beq.n	80032be <HAL_RCC_OscConfig+0x226>
 80032b4:	69e3      	ldr	r3, [r4, #28]
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d001      	beq.n	80032be <HAL_RCC_OscConfig+0x226>
        return HAL_ERROR;
 80032ba:	2001      	movs	r0, #1
 80032bc:	e1dc      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032be:	f7fd fa05 	bl	80006cc <HAL_GetREVID>
 80032c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80032c6:	4298      	cmp	r0, r3
 80032c8:	d822      	bhi.n	8003310 <HAL_RCC_OscConfig+0x278>
 80032ca:	4a22      	ldr	r2, [pc, #136]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80032cc:	6853      	ldr	r3, [r2, #4]
 80032ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80032d2:	6a21      	ldr	r1, [r4, #32]
 80032d4:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 80032d8:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	f013 0f08 	tst.w	r3, #8
 80032e0:	d062      	beq.n	80033a8 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032e2:	6963      	ldr	r3, [r4, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d04b      	beq.n	8003380 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e8:	4a1a      	ldr	r2, [pc, #104]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80032ea:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fd f9d1 	bl	8000698 <HAL_GetTick>
 80032f6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 80032fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fc:	f013 0f02 	tst.w	r3, #2
 8003300:	d152      	bne.n	80033a8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003302:	f7fd f9c9 	bl	8000698 <HAL_GetTick>
 8003306:	1b40      	subs	r0, r0, r5
 8003308:	2802      	cmp	r0, #2
 800330a:	d9f5      	bls.n	80032f8 <HAL_RCC_OscConfig+0x260>
        {
          return HAL_TIMEOUT;
 800330c:	2003      	movs	r0, #3
 800330e:	e1b3      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003310:	4a10      	ldr	r2, [pc, #64]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003312:	68d3      	ldr	r3, [r2, #12]
 8003314:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003318:	6a21      	ldr	r1, [r4, #32]
 800331a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800331e:	60d3      	str	r3, [r2, #12]
 8003320:	e7db      	b.n	80032da <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003322:	f7fd f9d3 	bl	80006cc <HAL_GetREVID>
 8003326:	f241 0303 	movw	r3, #4099	; 0x1003
 800332a:	4298      	cmp	r0, r3
 800332c:	d808      	bhi.n	8003340 <HAL_RCC_OscConfig+0x2a8>
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003330:	6853      	ldr	r3, [r2, #4]
 8003332:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003336:	6a21      	ldr	r1, [r4, #32]
 8003338:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 800333c:	6053      	str	r3, [r2, #4]
 800333e:	e7cc      	b.n	80032da <HAL_RCC_OscConfig+0x242>
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <HAL_RCC_OscConfig+0x2bc>)
 8003342:	68d3      	ldr	r3, [r2, #12]
 8003344:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003348:	6a21      	ldr	r1, [r4, #32]
 800334a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	e7c3      	b.n	80032da <HAL_RCC_OscConfig+0x242>
 8003352:	bf00      	nop
 8003354:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 8003358:	4aad      	ldr	r2, [pc, #692]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 800335a:	6813      	ldr	r3, [r2, #0]
 800335c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003360:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003362:	f7fd f999 	bl	8000698 <HAL_GetTick>
 8003366:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003368:	4ba9      	ldr	r3, [pc, #676]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003370:	d0b3      	beq.n	80032da <HAL_RCC_OscConfig+0x242>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003372:	f7fd f991 	bl	8000698 <HAL_GetTick>
 8003376:	1b40      	subs	r0, r0, r5
 8003378:	2802      	cmp	r0, #2
 800337a:	d9f5      	bls.n	8003368 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 800337c:	2003      	movs	r0, #3
 800337e:	e17b      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003380:	4aa3      	ldr	r2, [pc, #652]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003382:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7fd f985 	bl	8000698 <HAL_GetTick>
 800338e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003390:	4b9f      	ldr	r3, [pc, #636]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003394:	f013 0f02 	tst.w	r3, #2
 8003398:	d006      	beq.n	80033a8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339a:	f7fd f97d 	bl	8000698 <HAL_GetTick>
 800339e:	1b40      	subs	r0, r0, r5
 80033a0:	2802      	cmp	r0, #2
 80033a2:	d9f5      	bls.n	8003390 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033a4:	2003      	movs	r0, #3
 80033a6:	e167      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	f013 0f20 	tst.w	r3, #32
 80033ae:	d029      	beq.n	8003404 <HAL_RCC_OscConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80033b0:	69a3      	ldr	r3, [r4, #24]
 80033b2:	b19b      	cbz	r3, 80033dc <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033b4:	4a96      	ldr	r2, [pc, #600]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033b6:	6813      	ldr	r3, [r2, #0]
 80033b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033be:	f7fd f96b 	bl	8000698 <HAL_GetTick>
 80033c2:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033c4:	4b92      	ldr	r3, [pc, #584]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80033cc:	d11a      	bne.n	8003404 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033ce:	f7fd f963 	bl	8000698 <HAL_GetTick>
 80033d2:	1b40      	subs	r0, r0, r5
 80033d4:	2802      	cmp	r0, #2
 80033d6:	d9f5      	bls.n	80033c4 <HAL_RCC_OscConfig+0x32c>
        {
          return HAL_TIMEOUT;
 80033d8:	2003      	movs	r0, #3
 80033da:	e14d      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033dc:	4a8c      	ldr	r2, [pc, #560]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033de:	6813      	ldr	r3, [r2, #0]
 80033e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033e6:	f7fd f957 	bl	8000698 <HAL_GetTick>
 80033ea:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ec:	4b88      	ldr	r3, [pc, #544]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80033f4:	d006      	beq.n	8003404 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033f6:	f7fd f94f 	bl	8000698 <HAL_GetTick>
 80033fa:	1b40      	subs	r0, r0, r5
 80033fc:	2802      	cmp	r0, #2
 80033fe:	d9f5      	bls.n	80033ec <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 8003400:	2003      	movs	r0, #3
 8003402:	e139      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	f013 0f04 	tst.w	r3, #4
 800340a:	d121      	bne.n	8003450 <HAL_RCC_OscConfig+0x3b8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8131 	beq.w	8003676 <HAL_RCC_OscConfig+0x5de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003414:	4a7e      	ldr	r2, [pc, #504]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003416:	6912      	ldr	r2, [r2, #16]
 8003418:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800341c:	2a18      	cmp	r2, #24
 800341e:	f000 80ea 	beq.w	80035f6 <HAL_RCC_OscConfig+0x55e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003422:	2b02      	cmp	r3, #2
 8003424:	d075      	beq.n	8003512 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4a7a      	ldr	r2, [pc, #488]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003428:	6813      	ldr	r3, [r2, #0]
 800342a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fd f932 	bl	8000698 <HAL_GetTick>
 8003434:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800343e:	f000 80d8 	beq.w	80035f2 <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003442:	f7fd f929 	bl	8000698 <HAL_GetTick>
 8003446:	1b00      	subs	r0, r0, r4
 8003448:	2802      	cmp	r0, #2
 800344a:	d9f4      	bls.n	8003436 <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 800344c:	2003      	movs	r0, #3
 800344e:	e113      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
    PWR->CR1 |= PWR_CR1_DBP;
 8003450:	4a70      	ldr	r2, [pc, #448]	; (8003614 <HAL_RCC_OscConfig+0x57c>)
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800345a:	f7fd f91d 	bl	8000698 <HAL_GetTick>
 800345e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003460:	4b6c      	ldr	r3, [pc, #432]	; (8003614 <HAL_RCC_OscConfig+0x57c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003468:	d106      	bne.n	8003478 <HAL_RCC_OscConfig+0x3e0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fd f915 	bl	8000698 <HAL_GetTick>
 800346e:	1b40      	subs	r0, r0, r5
 8003470:	2864      	cmp	r0, #100	; 0x64
 8003472:	d9f5      	bls.n	8003460 <HAL_RCC_OscConfig+0x3c8>
        return HAL_TIMEOUT;
 8003474:	2003      	movs	r0, #3
 8003476:	e0ff      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	68a3      	ldr	r3, [r4, #8]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d00a      	beq.n	8003494 <HAL_RCC_OscConfig+0x3fc>
 800347e:	bb0b      	cbnz	r3, 80034c4 <HAL_RCC_OscConfig+0x42c>
 8003480:	4b63      	ldr	r3, [pc, #396]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	671a      	str	r2, [r3, #112]	; 0x70
 800348a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800348c:	f022 0204 	bic.w	r2, r2, #4
 8003490:	671a      	str	r2, [r3, #112]	; 0x70
 8003492:	e004      	b.n	800349e <HAL_RCC_OscConfig+0x406>
 8003494:	4a5e      	ldr	r2, [pc, #376]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003496:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800349e:	68a3      	ldr	r3, [r4, #8]
 80034a0:	b333      	cbz	r3, 80034f0 <HAL_RCC_OscConfig+0x458>
      tickstart = HAL_GetTick();
 80034a2:	f7fd f8f9 	bl	8000698 <HAL_GetTick>
 80034a6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034a8:	4b59      	ldr	r3, [pc, #356]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	f013 0f02 	tst.w	r3, #2
 80034b0:	d1ac      	bne.n	800340c <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fd f8f1 	bl	8000698 <HAL_GetTick>
 80034b6:	1b40      	subs	r0, r0, r5
 80034b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80034bc:	4298      	cmp	r0, r3
 80034be:	d9f3      	bls.n	80034a8 <HAL_RCC_OscConfig+0x410>
          return HAL_TIMEOUT;
 80034c0:	2003      	movs	r0, #3
 80034c2:	e0d9      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d009      	beq.n	80034dc <HAL_RCC_OscConfig+0x444>
 80034c8:	4b51      	ldr	r3, [pc, #324]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80034ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	671a      	str	r2, [r3, #112]	; 0x70
 80034d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034d4:	f022 0204 	bic.w	r2, r2, #4
 80034d8:	671a      	str	r2, [r3, #112]	; 0x70
 80034da:	e7e0      	b.n	800349e <HAL_RCC_OscConfig+0x406>
 80034dc:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80034de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034e0:	f042 0204 	orr.w	r2, r2, #4
 80034e4:	671a      	str	r2, [r3, #112]	; 0x70
 80034e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	671a      	str	r2, [r3, #112]	; 0x70
 80034ee:	e7d6      	b.n	800349e <HAL_RCC_OscConfig+0x406>
      tickstart = HAL_GetTick();
 80034f0:	f7fd f8d2 	bl	8000698 <HAL_GetTick>
 80034f4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034f6:	4b46      	ldr	r3, [pc, #280]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	f013 0f02 	tst.w	r3, #2
 80034fe:	d085      	beq.n	800340c <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fd f8ca 	bl	8000698 <HAL_GetTick>
 8003504:	1b40      	subs	r0, r0, r5
 8003506:	f241 3388 	movw	r3, #5000	; 0x1388
 800350a:	4298      	cmp	r0, r3
 800350c:	d9f3      	bls.n	80034f6 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 800350e:	2003      	movs	r0, #3
 8003510:	e0b2      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_DISABLE();
 8003512:	4a3f      	ldr	r2, [pc, #252]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003514:	6813      	ldr	r3, [r2, #0]
 8003516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800351a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800351c:	f7fd f8bc 	bl	8000698 <HAL_GetTick>
 8003520:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800352a:	d006      	beq.n	800353a <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352c:	f7fd f8b4 	bl	8000698 <HAL_GetTick>
 8003530:	1b40      	subs	r0, r0, r5
 8003532:	2802      	cmp	r0, #2
 8003534:	d9f5      	bls.n	8003522 <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 8003536:	2003      	movs	r0, #3
 8003538:	e09e      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353a:	4b35      	ldr	r3, [pc, #212]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 800353c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800353e:	4a36      	ldr	r2, [pc, #216]	; (8003618 <HAL_RCC_OscConfig+0x580>)
 8003540:	400a      	ands	r2, r1
 8003542:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003544:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003546:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800354a:	430a      	orrs	r2, r1
 800354c:	629a      	str	r2, [r3, #40]	; 0x28
 800354e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003550:	3a01      	subs	r2, #1
 8003552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003558:	3901      	subs	r1, #1
 800355a:	0249      	lsls	r1, r1, #9
 800355c:	b289      	uxth	r1, r1
 800355e:	430a      	orrs	r2, r1
 8003560:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003562:	3901      	subs	r1, #1
 8003564:	0409      	lsls	r1, r1, #16
 8003566:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800356a:	430a      	orrs	r2, r1
 800356c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800356e:	3901      	subs	r1, #1
 8003570:	0609      	lsls	r1, r1, #24
 8003572:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003576:	430a      	orrs	r2, r1
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003582:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003584:	4a25      	ldr	r2, [pc, #148]	; (800361c <HAL_RCC_OscConfig+0x584>)
 8003586:	400a      	ands	r2, r1
 8003588:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800358a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800358e:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003592:	f022 020c 	bic.w	r2, r2, #12
 8003596:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003598:	430a      	orrs	r2, r1
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	f022 0202 	bic.w	r2, r2, #2
 80035a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80035a4:	430a      	orrs	r2, r1
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80035ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035d0:	f7fd f862 	bl	8000698 <HAL_GetTick>
 80035d4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x556>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fd f85a 	bl	8000698 <HAL_GetTick>
 80035e4:	1b00      	subs	r0, r0, r4
 80035e6:	2802      	cmp	r0, #2
 80035e8:	d9f5      	bls.n	80035d6 <HAL_RCC_OscConfig+0x53e>
            return HAL_TIMEOUT;
 80035ea:	2003      	movs	r0, #3
 80035ec:	e044      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80035ee:	2000      	movs	r0, #0
 80035f0:	e042      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
 80035f2:	2000      	movs	r0, #0
 80035f4:	e040      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035f6:	4a06      	ldr	r2, [pc, #24]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035fa:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d03c      	beq.n	800367a <HAL_RCC_OscConfig+0x5e2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003600:	f001 0303 	and.w	r3, r1, #3
 8003604:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003606:	4293      	cmp	r3, r2
 8003608:	d00a      	beq.n	8003620 <HAL_RCC_OscConfig+0x588>
        return HAL_ERROR;
 800360a:	2001      	movs	r0, #1
 800360c:	e034      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
 800360e:	bf00      	nop
 8003610:	58024400 	.word	0x58024400
 8003614:	58024800 	.word	0x58024800
 8003618:	fffffc0c 	.word	0xfffffc0c
 800361c:	ffff0007 	.word	0xffff0007
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003620:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8003624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	4299      	cmp	r1, r3
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x596>
        return HAL_ERROR;
 800362a:	2001      	movs	r0, #1
 800362c:	e024      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800362e:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003632:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003634:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x5a6>
        return HAL_ERROR;
 800363a:	2001      	movs	r0, #1
 800363c:	e01c      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800363e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8003642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003644:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d001      	beq.n	800364e <HAL_RCC_OscConfig+0x5b6>
        return HAL_ERROR;
 800364a:	2001      	movs	r0, #1
 800364c:	e014      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800364e:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8003652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003654:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d111      	bne.n	800367e <HAL_RCC_OscConfig+0x5e6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800365a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800365e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003660:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003662:	4298      	cmp	r0, r3
 8003664:	d00d      	beq.n	8003682 <HAL_RCC_OscConfig+0x5ea>
        return HAL_ERROR;
 8003666:	2001      	movs	r0, #1
 8003668:	e006      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
    return HAL_ERROR;
 800366a:	2001      	movs	r0, #1
}
 800366c:	4770      	bx	lr
        return HAL_ERROR;
 800366e:	2001      	movs	r0, #1
 8003670:	e002      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
        return HAL_ERROR;
 8003672:	2001      	movs	r0, #1
 8003674:	e000      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8003676:	2000      	movs	r0, #0
}
 8003678:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800367a:	2001      	movs	r0, #1
 800367c:	e7fc      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
 800367e:	2001      	movs	r0, #1
 8003680:	e7fa      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8003682:	2000      	movs	r0, #0
 8003684:	e7f8      	b.n	8003678 <HAL_RCC_OscConfig+0x5e0>
 8003686:	bf00      	nop

08003688 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003688:	4b72      	ldr	r3, [pc, #456]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003690:	2b10      	cmp	r3, #16
 8003692:	f000 80db 	beq.w	800384c <HAL_RCC_GetSysClockFreq+0x1c4>
 8003696:	2b18      	cmp	r3, #24
 8003698:	d010      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x34>
 800369a:	b10b      	cbz	r3, 80036a0 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800369c:	486e      	ldr	r0, [pc, #440]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1d0>)
 800369e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036a0:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f013 0f20 	tst.w	r3, #32
 80036a8:	f000 80d2 	beq.w	8003850 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036ac:	4b69      	ldr	r3, [pc, #420]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80036b4:	4b69      	ldr	r3, [pc, #420]	; (800385c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80036b6:	fa23 f000 	lsr.w	r0, r3, r0
 80036ba:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036bc:	4a65      	ldr	r2, [pc, #404]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80036be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80036c0:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80036c4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80036c6:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80036cc:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80036d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036d2:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80036d6:	fb03 f302 	mul.w	r3, r3, r2
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80036e2:	2800      	cmp	r0, #0
 80036e4:	f000 80b5 	beq.w	8003852 <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 80036e8:	2901      	cmp	r1, #1
 80036ea:	d066      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x132>
 80036ec:	b1f9      	cbz	r1, 800372e <HAL_RCC_GetSysClockFreq+0xa6>
 80036ee:	2902      	cmp	r1, #2
 80036f0:	f000 808f 	beq.w	8003812 <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036f4:	ee07 0a10 	vmov	s14, r0
 80036f8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80036fc:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8003860 <HAL_RCC_GetSysClockFreq+0x1d8>
 8003700:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003704:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370c:	ee06 3a90 	vmov	s13, r3
 8003710:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003714:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8003864 <HAL_RCC_GetSysClockFreq+0x1dc>
 8003718:	ee67 7a86 	vmul.f32	s15, s15, s12
 800371c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003728:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800372c:	e061      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f013 0f20 	tst.w	r3, #32
 8003736:	d023      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003738:	4946      	ldr	r1, [pc, #280]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800373a:	680a      	ldr	r2, [r1, #0]
 800373c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003740:	4b46      	ldr	r3, [pc, #280]	; (800385c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003742:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003744:	ee07 3a10 	vmov	s14, r3
 8003748:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800374c:	ee07 0a10 	vmov	s14, r0
 8003750:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003754:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003758:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	ee06 3a90 	vmov	s13, r3
 8003762:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003766:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8003864 <HAL_RCC_GetSysClockFreq+0x1dc>
 800376a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800377e:	e038      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003780:	ee07 0a10 	vmov	s14, r0
 8003784:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003788:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003868 <HAL_RCC_GetSysClockFreq+0x1e0>
 800378c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003798:	ee06 3a90 	vmov	s13, r3
 800379c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80037a0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003864 <HAL_RCC_GetSysClockFreq+0x1dc>
 80037a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80037a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037b8:	e01b      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037ba:	ee07 0a10 	vmov	s14, r0
 80037be:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80037c2:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8003860 <HAL_RCC_GetSysClockFreq+0x1d8>
 80037c6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80037ca:	4b22      	ldr	r3, [pc, #136]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee06 3a90 	vmov	s13, r3
 80037d6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80037da:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8003864 <HAL_RCC_GetSysClockFreq+0x1dc>
 80037de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80037e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ee:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80037fa:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003804:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003808:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800380c:	ee17 0a90 	vmov	r0, s15
 8003810:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003812:	ee07 0a10 	vmov	s14, r0
 8003816:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800381a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800386c <HAL_RCC_GetSysClockFreq+0x1e4>
 800381e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382a:	ee06 3a90 	vmov	s13, r3
 800382e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003832:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003864 <HAL_RCC_GetSysClockFreq+0x1dc>
 8003836:	ee67 7a86 	vmul.f32	s15, s15, s12
 800383a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003846:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800384a:	e7d2      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 800384c:	4808      	ldr	r0, [pc, #32]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1e8>)
 800384e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003852:	4770      	bx	lr
 8003854:	58024400 	.word	0x58024400
 8003858:	003d0900 	.word	0x003d0900
 800385c:	03d09000 	.word	0x03d09000
 8003860:	4a742400 	.word	0x4a742400
 8003864:	39000000 	.word	0x39000000
 8003868:	4c742400 	.word	0x4c742400
 800386c:	4bbebc20 	.word	0x4bbebc20
 8003870:	017d7840 	.word	0x017d7840

08003874 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003874:	2800      	cmp	r0, #0
 8003876:	f000 8136 	beq.w	8003ae6 <HAL_RCC_ClockConfig+0x272>
 800387a:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4a9c      	ldr	r2, [pc, #624]	; (8003af0 <HAL_RCC_ClockConfig+0x27c>)
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	f002 020f 	and.w	r2, r2, #15
 8003884:	428a      	cmp	r2, r1
 8003886:	d20c      	bcs.n	80038a2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003888:	4899      	ldr	r0, [pc, #612]	; (8003af0 <HAL_RCC_ClockConfig+0x27c>)
 800388a:	6802      	ldr	r2, [r0, #0]
 800388c:	f022 020f 	bic.w	r2, r2, #15
 8003890:	430a      	orrs	r2, r1
 8003892:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003894:	6802      	ldr	r2, [r0, #0]
 8003896:	f002 020f 	and.w	r2, r2, #15
 800389a:	428a      	cmp	r2, r1
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 800389e:	2001      	movs	r0, #1
}
 80038a0:	4770      	bx	lr
{
 80038a2:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f012 0f04 	tst.w	r2, #4
 80038aa:	d00c      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038ac:	6918      	ldr	r0, [r3, #16]
 80038ae:	4a91      	ldr	r2, [pc, #580]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80038b0:	6992      	ldr	r2, [r2, #24]
 80038b2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80038b6:	4290      	cmp	r0, r2
 80038b8:	d905      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038ba:	4c8e      	ldr	r4, [pc, #568]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80038bc:	69a2      	ldr	r2, [r4, #24]
 80038be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038c2:	4310      	orrs	r0, r2
 80038c4:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	f012 0f08 	tst.w	r2, #8
 80038cc:	d00c      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038ce:	6958      	ldr	r0, [r3, #20]
 80038d0:	4a88      	ldr	r2, [pc, #544]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80038d2:	69d2      	ldr	r2, [r2, #28]
 80038d4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80038d8:	4290      	cmp	r0, r2
 80038da:	d905      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038dc:	4c85      	ldr	r4, [pc, #532]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80038de:	69e2      	ldr	r2, [r4, #28]
 80038e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038e4:	4310      	orrs	r0, r2
 80038e6:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f012 0f10 	tst.w	r2, #16
 80038ee:	d00c      	beq.n	800390a <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038f0:	6998      	ldr	r0, [r3, #24]
 80038f2:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80038f4:	69d2      	ldr	r2, [r2, #28]
 80038f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80038fa:	4290      	cmp	r0, r2
 80038fc:	d905      	bls.n	800390a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038fe:	4c7d      	ldr	r4, [pc, #500]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003900:	69e2      	ldr	r2, [r4, #28]
 8003902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003906:	4310      	orrs	r0, r2
 8003908:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	f012 0f20 	tst.w	r2, #32
 8003910:	d00c      	beq.n	800392c <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003912:	69d8      	ldr	r0, [r3, #28]
 8003914:	4a77      	ldr	r2, [pc, #476]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003916:	6a12      	ldr	r2, [r2, #32]
 8003918:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800391c:	4290      	cmp	r0, r2
 800391e:	d905      	bls.n	800392c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003920:	4c74      	ldr	r4, [pc, #464]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003922:	6a22      	ldr	r2, [r4, #32]
 8003924:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003928:	4310      	orrs	r0, r2
 800392a:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f012 0f02 	tst.w	r2, #2
 8003932:	d00c      	beq.n	800394e <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003934:	68d8      	ldr	r0, [r3, #12]
 8003936:	4a6f      	ldr	r2, [pc, #444]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003938:	6992      	ldr	r2, [r2, #24]
 800393a:	f002 020f 	and.w	r2, r2, #15
 800393e:	4290      	cmp	r0, r2
 8003940:	d905      	bls.n	800394e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003942:	4c6c      	ldr	r4, [pc, #432]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003944:	69a2      	ldr	r2, [r4, #24]
 8003946:	f022 020f 	bic.w	r2, r2, #15
 800394a:	4310      	orrs	r0, r2
 800394c:	61a0      	str	r0, [r4, #24]
 800394e:	461c      	mov	r4, r3
 8003950:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f013 0f01 	tst.w	r3, #1
 8003958:	d041      	beq.n	80039de <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800395a:	4a66      	ldr	r2, [pc, #408]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 800395c:	6993      	ldr	r3, [r2, #24]
 800395e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003962:	68a1      	ldr	r1, [r4, #8]
 8003964:	430b      	orrs	r3, r1
 8003966:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d00a      	beq.n	8003984 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396e:	2b03      	cmp	r3, #3
 8003970:	d027      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003972:	2b01      	cmp	r3, #1
 8003974:	d02c      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003976:	4a5f      	ldr	r2, [pc, #380]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	f012 0f04 	tst.w	r2, #4
 800397e:	d106      	bne.n	800398e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8003980:	2001      	movs	r0, #1
 8003982:	e0af      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800398a:	f000 80ae 	beq.w	8003aea <HAL_RCC_ClockConfig+0x276>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800398e:	4959      	ldr	r1, [pc, #356]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003990:	690a      	ldr	r2, [r1, #16]
 8003992:	f022 0207 	bic.w	r2, r2, #7
 8003996:	4313      	orrs	r3, r2
 8003998:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800399a:	f7fc fe7d 	bl	8000698 <HAL_GetTick>
 800399e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a0:	4b54      	ldr	r3, [pc, #336]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a8:	6862      	ldr	r2, [r4, #4]
 80039aa:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80039ae:	d016      	beq.n	80039de <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f7fc fe72 	bl	8000698 <HAL_GetTick>
 80039b4:	1b80      	subs	r0, r0, r6
 80039b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80039ba:	4298      	cmp	r0, r3
 80039bc:	d9f0      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 80039be:	2003      	movs	r0, #3
 80039c0:	e090      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039c2:	4a4c      	ldr	r2, [pc, #304]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80039ca:	d1e0      	bne.n	800398e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 80039cc:	2001      	movs	r0, #1
 80039ce:	e089      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039d0:	4a48      	ldr	r2, [pc, #288]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80039d8:	d1d9      	bne.n	800398e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 80039da:	2001      	movs	r0, #1
 80039dc:	e082      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x270>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	f013 0f02 	tst.w	r3, #2
 80039e4:	d00c      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039e6:	68e2      	ldr	r2, [r4, #12]
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d205      	bcs.n	8003a00 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f4:	493f      	ldr	r1, [pc, #252]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 80039f6:	698b      	ldr	r3, [r1, #24]
 80039f8:	f023 030f 	bic.w	r3, r3, #15
 80039fc:	431a      	orrs	r2, r3
 80039fe:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a00:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <HAL_RCC_ClockConfig+0x27c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	42ab      	cmp	r3, r5
 8003a0a:	d90c      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0c:	4a38      	ldr	r2, [pc, #224]	; (8003af0 <HAL_RCC_ClockConfig+0x27c>)
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	f023 030f 	bic.w	r3, r3, #15
 8003a14:	432b      	orrs	r3, r5
 8003a16:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	42ab      	cmp	r3, r5
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 8003a22:	2001      	movs	r0, #1
 8003a24:	e05e      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x270>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	f013 0f04 	tst.w	r3, #4
 8003a2c:	d00c      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a2e:	6922      	ldr	r2, [r4, #16]
 8003a30:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d205      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a3c:	492d      	ldr	r1, [pc, #180]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003a3e:	698b      	ldr	r3, [r1, #24]
 8003a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a44:	431a      	orrs	r2, r3
 8003a46:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	f013 0f08 	tst.w	r3, #8
 8003a4e:	d00c      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a50:	6962      	ldr	r2, [r4, #20]
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d205      	bcs.n	8003a6a <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a5e:	4925      	ldr	r1, [pc, #148]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003a60:	69cb      	ldr	r3, [r1, #28]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	431a      	orrs	r2, r3
 8003a68:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	f013 0f10 	tst.w	r3, #16
 8003a70:	d00c      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a72:	69a2      	ldr	r2, [r4, #24]
 8003a74:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d205      	bcs.n	8003a8c <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a80:	491c      	ldr	r1, [pc, #112]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003a82:	69cb      	ldr	r3, [r1, #28]
 8003a84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f013 0f20 	tst.w	r3, #32
 8003a92:	d00c      	beq.n	8003aae <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a94:	69e2      	ldr	r2, [r4, #28]
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d205      	bcs.n	8003aae <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003aa2:	4914      	ldr	r1, [pc, #80]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003aa4:	6a0b      	ldr	r3, [r1, #32]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003aae:	f7ff fdeb 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4910      	ldr	r1, [pc, #64]	; (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003ab4:	698b      	ldr	r3, [r1, #24]
 8003ab6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003aba:	4a0f      	ldr	r2, [pc, #60]	; (8003af8 <HAL_RCC_ClockConfig+0x284>)
 8003abc:	5cd3      	ldrb	r3, [r2, r3]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ac4:	698b      	ldr	r3, [r1, #24]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	5cd3      	ldrb	r3, [r2, r3]
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8003ad4:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x288>)
 8003ad6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_ClockConfig+0x28c>)
 8003ada:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_RCC_ClockConfig+0x290>)
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	f7fc fd7a 	bl	80005d8 <HAL_InitTick>
}
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	4770      	bx	lr
          return HAL_ERROR;
 8003aea:	2001      	movs	r0, #1
 8003aec:	e7fa      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x270>
 8003aee:	bf00      	nop
 8003af0:	52002000 	.word	0x52002000
 8003af4:	58024400 	.word	0x58024400
 8003af8:	0800d0d4 	.word	0x0800d0d4
 8003afc:	20000018 	.word	0x20000018
 8003b00:	20000014 	.word	0x20000014
 8003b04:	20000004 	.word	0x20000004

08003b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b08:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b0a:	f7ff fdbd 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4a0b      	ldr	r2, [pc, #44]	; (8003b3c <HAL_RCC_GetHCLKFreq+0x34>)
 8003b10:	6993      	ldr	r3, [r2, #24]
 8003b12:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003b16:	490a      	ldr	r1, [pc, #40]	; (8003b40 <HAL_RCC_GetHCLKFreq+0x38>)
 8003b18:	5ccb      	ldrb	r3, [r1, r3]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b22:	6992      	ldr	r2, [r2, #24]
 8003b24:	f002 020f 	and.w	r2, r2, #15
 8003b28:	5c88      	ldrb	r0, [r1, r2]
 8003b2a:	f000 001f 	and.w	r0, r0, #31
 8003b2e:	fa23 f000 	lsr.w	r0, r3, r0
 8003b32:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003b34:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x40>)
 8003b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003b3a:	bd08      	pop	{r3, pc}
 8003b3c:	58024400 	.word	0x58024400
 8003b40:	0800d0d4 	.word	0x0800d0d4
 8003b44:	20000018 	.word	0x20000018
 8003b48:	20000014 	.word	0x20000014

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b4e:	f7ff ffdb 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003b5a:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b5c:	5cd3      	ldrb	r3, [r2, r3]
 8003b5e:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b62:	40d8      	lsrs	r0, r3
 8003b64:	bd08      	pop	{r3, pc}
 8003b66:	bf00      	nop
 8003b68:	58024400 	.word	0x58024400
 8003b6c:	0800d0d4 	.word	0x0800d0d4

08003b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b70:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b72:	f7ff ffc9 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b7e:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b80:	5cd3      	ldrb	r3, [r2, r3]
 8003b82:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b86:	40d8      	lsrs	r0, r3
 8003b88:	bd08      	pop	{r3, pc}
 8003b8a:	bf00      	nop
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	0800d0d4 	.word	0x0800d0d4

08003b94 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b94:	4b40      	ldr	r3, [pc, #256]	; (8003c98 <RCCEx_PLL2_Config+0x104>)
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d079      	beq.n	8003c94 <RCCEx_PLL2_Config+0x100>
{
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	460e      	mov	r6, r1
 8003ba4:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003ba6:	4a3c      	ldr	r2, [pc, #240]	; (8003c98 <RCCEx_PLL2_Config+0x104>)
 8003ba8:	6813      	ldr	r3, [r2, #0]
 8003baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb0:	f7fc fd72 	bl	8000698 <HAL_GetTick>
 8003bb4:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bb6:	4b38      	ldr	r3, [pc, #224]	; (8003c98 <RCCEx_PLL2_Config+0x104>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003bbe:	d006      	beq.n	8003bce <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003bc0:	f7fc fd6a 	bl	8000698 <HAL_GetTick>
 8003bc4:	1b40      	subs	r0, r0, r5
 8003bc6:	2802      	cmp	r0, #2
 8003bc8:	d9f5      	bls.n	8003bb6 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003bca:	2003      	movs	r0, #3

  }


  return status;
}
 8003bcc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003bce:	4b32      	ldr	r3, [pc, #200]	; (8003c98 <RCCEx_PLL2_Config+0x104>)
 8003bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd2:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8003bd6:	6821      	ldr	r1, [r4, #0]
 8003bd8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28
 8003bde:	6862      	ldr	r2, [r4, #4]
 8003be0:	3a01      	subs	r2, #1
 8003be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be6:	68a1      	ldr	r1, [r4, #8]
 8003be8:	3901      	subs	r1, #1
 8003bea:	0249      	lsls	r1, r1, #9
 8003bec:	b289      	uxth	r1, r1
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	68e1      	ldr	r1, [r4, #12]
 8003bf2:	3901      	subs	r1, #1
 8003bf4:	0409      	lsls	r1, r1, #16
 8003bf6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	6921      	ldr	r1, [r4, #16]
 8003bfe:	3901      	subs	r1, #1
 8003c00:	0609      	lsls	r1, r1, #24
 8003c02:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003c06:	430a      	orrs	r2, r1
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c10:	6961      	ldr	r1, [r4, #20]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	f022 0220 	bic.w	r2, r2, #32
 8003c1c:	69a1      	ldr	r1, [r4, #24]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	f022 0210 	bic.w	r2, r2, #16
 8003c28:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c2a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003c2c:	4a1b      	ldr	r2, [pc, #108]	; (8003c9c <RCCEx_PLL2_Config+0x108>)
 8003c2e:	400a      	ands	r2, r1
 8003c30:	69e1      	ldr	r1, [r4, #28]
 8003c32:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003c36:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	f042 0210 	orr.w	r2, r2, #16
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003c40:	b9c6      	cbnz	r6, 8003c74 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c42:	461a      	mov	r2, r3
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8003c4c:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <RCCEx_PLL2_Config+0x104>)
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c54:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c56:	f7fc fd1f 	bl	8000698 <HAL_GetTick>
 8003c5a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <RCCEx_PLL2_Config+0x104>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003c64:	d114      	bne.n	8003c90 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c66:	f7fc fd17 	bl	8000698 <HAL_GetTick>
 8003c6a:	1b00      	subs	r0, r0, r4
 8003c6c:	2802      	cmp	r0, #2
 8003c6e:	d9f5      	bls.n	8003c5c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8003c70:	2003      	movs	r0, #3
 8003c72:	e7ab      	b.n	8003bcc <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c74:	2e01      	cmp	r6, #1
 8003c76:	d005      	beq.n	8003c84 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <RCCEx_PLL2_Config+0x104>)
 8003c7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c82:	e7e3      	b.n	8003c4c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <RCCEx_PLL2_Config+0x104>)
 8003c86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c8e:	e7dd      	b.n	8003c4c <RCCEx_PLL2_Config+0xb8>
  return status;
 8003c90:	2000      	movs	r0, #0
 8003c92:	e79b      	b.n	8003bcc <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8003c94:	2001      	movs	r0, #1
}
 8003c96:	4770      	bx	lr
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	ffff0007 	.word	0xffff0007

08003ca0 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ca0:	4b40      	ldr	r3, [pc, #256]	; (8003da4 <RCCEx_PLL3_Config+0x104>)
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d079      	beq.n	8003da0 <RCCEx_PLL3_Config+0x100>
{
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	460e      	mov	r6, r1
 8003cb0:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cb2:	4a3c      	ldr	r2, [pc, #240]	; (8003da4 <RCCEx_PLL3_Config+0x104>)
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fc fcec 	bl	8000698 <HAL_GetTick>
 8003cc0:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003cc2:	4b38      	ldr	r3, [pc, #224]	; (8003da4 <RCCEx_PLL3_Config+0x104>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003cca:	d006      	beq.n	8003cda <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ccc:	f7fc fce4 	bl	8000698 <HAL_GetTick>
 8003cd0:	1b40      	subs	r0, r0, r5
 8003cd2:	2802      	cmp	r0, #2
 8003cd4:	d9f5      	bls.n	8003cc2 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003cd6:	2003      	movs	r0, #3

  }


  return status;
}
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003cda:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <RCCEx_PLL3_Config+0x104>)
 8003cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cde:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003ce2:	6821      	ldr	r1, [r4, #0]
 8003ce4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
 8003cea:	6862      	ldr	r2, [r4, #4]
 8003cec:	3a01      	subs	r2, #1
 8003cee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf2:	68a1      	ldr	r1, [r4, #8]
 8003cf4:	3901      	subs	r1, #1
 8003cf6:	0249      	lsls	r1, r1, #9
 8003cf8:	b289      	uxth	r1, r1
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	68e1      	ldr	r1, [r4, #12]
 8003cfe:	3901      	subs	r1, #1
 8003d00:	0409      	lsls	r1, r1, #16
 8003d02:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003d06:	430a      	orrs	r2, r1
 8003d08:	6921      	ldr	r1, [r4, #16]
 8003d0a:	3901      	subs	r1, #1
 8003d0c:	0609      	lsls	r1, r1, #24
 8003d0e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003d12:	430a      	orrs	r2, r1
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d1c:	6961      	ldr	r1, [r4, #20]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d28:	69a1      	ldr	r1, [r4, #24]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d36:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003d38:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <RCCEx_PLL3_Config+0x108>)
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	69e1      	ldr	r1, [r4, #28]
 8003d3e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003d42:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003d4c:	b9c6      	cbnz	r6, 8003d80 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d56:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8003d58:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <RCCEx_PLL3_Config+0x104>)
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003d62:	f7fc fc99 	bl	8000698 <HAL_GetTick>
 8003d66:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <RCCEx_PLL3_Config+0x104>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003d70:	d114      	bne.n	8003d9c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d72:	f7fc fc91 	bl	8000698 <HAL_GetTick>
 8003d76:	1b00      	subs	r0, r0, r4
 8003d78:	2802      	cmp	r0, #2
 8003d7a:	d9f5      	bls.n	8003d68 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8003d7c:	2003      	movs	r0, #3
 8003d7e:	e7ab      	b.n	8003cd8 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d80:	2e01      	cmp	r6, #1
 8003d82:	d005      	beq.n	8003d90 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d84:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <RCCEx_PLL3_Config+0x104>)
 8003d86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d8e:	e7e3      	b.n	8003d58 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <RCCEx_PLL3_Config+0x104>)
 8003d92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d98:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d9a:	e7dd      	b.n	8003d58 <RCCEx_PLL3_Config+0xb8>
  return status;
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	e79b      	b.n	8003cd8 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003da0:	2001      	movs	r0, #1
}
 8003da2:	4770      	bx	lr
 8003da4:	58024400 	.word	0x58024400
 8003da8:	ffff0007 	.word	0xffff0007

08003dac <HAL_RCCEx_PeriphCLKConfig>:
{
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003db0:	6803      	ldr	r3, [r0, #0]
 8003db2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003db6:	d02b      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003db8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dbe:	d018      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8003dc0:	d907      	bls.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dc6:	d01d      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003dc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dcc:	d12e      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dce:	2500      	movs	r5, #0
 8003dd0:	e006      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003dd2:	bb5b      	cbnz	r3, 8003e2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd4:	4a93      	ldr	r2, [pc, #588]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003dd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dde:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003de0:	4a90      	ldr	r2, [pc, #576]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003de2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003de4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003de8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003dea:	430b      	orrs	r3, r1
 8003dec:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dee:	2600      	movs	r6, #0
 8003df0:	e010      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003df2:	2102      	movs	r1, #2
 8003df4:	3004      	adds	r0, #4
 8003df6:	f7ff fecd 	bl	8003b94 <RCCEx_PLL2_Config>
 8003dfa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	d0ef      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003e00:	462e      	mov	r6, r5
 8003e02:	e007      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e04:	2102      	movs	r1, #2
 8003e06:	3024      	adds	r0, #36	; 0x24
 8003e08:	f7ff ff4a 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003e0c:	4605      	mov	r5, r0
      break;
 8003e0e:	e7f5      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e10:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e12:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e1a:	d017      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d832      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003e22:	e8df f003 	tbb	[pc, r3]
 8003e26:	2406      	.short	0x2406
 8003e28:	0b2a      	.short	0x0b2a
 8003e2a:	0b          	.byte	0x0b
 8003e2b:	00          	.byte	0x00
      ret = HAL_ERROR;
 8003e2c:	2601      	movs	r6, #1
 8003e2e:	4635      	mov	r5, r6
 8003e30:	e7f0      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e32:	4a7c      	ldr	r2, [pc, #496]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003e34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e3c:	bb3d      	cbnz	r5, 8003e8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e3e:	4a79      	ldr	r2, [pc, #484]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003e40:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003e42:	f023 0307 	bic.w	r3, r3, #7
 8003e46:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e52:	d033      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003e54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d044      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003e5a:	d81a      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003e5c:	b30b      	cbz	r3, 8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d11c      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e62:	2100      	movs	r1, #0
 8003e64:	1d20      	adds	r0, r4, #4
 8003e66:	f7ff fe95 	bl	8003b94 <RCCEx_PLL2_Config>
 8003e6a:	4605      	mov	r5, r0
      break;
 8003e6c:	e01e      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e6e:	2100      	movs	r1, #0
 8003e70:	1d20      	adds	r0, r4, #4
 8003e72:	f7ff fe8f 	bl	8003b94 <RCCEx_PLL2_Config>
 8003e76:	4605      	mov	r5, r0
      break;
 8003e78:	e7e0      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e80:	f7ff ff0e 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003e84:	4605      	mov	r5, r0
      break;
 8003e86:	e7d9      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 8003e88:	2601      	movs	r6, #1
 8003e8a:	4635      	mov	r5, r6
 8003e8c:	e7de      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003e8e:	462e      	mov	r6, r5
 8003e90:	e7dc      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003e92:	2bc0      	cmp	r3, #192	; 0xc0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9a:	d007      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 8003e9c:	2601      	movs	r6, #1
 8003e9e:	4635      	mov	r5, r6
 8003ea0:	e00c      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea2:	4a60      	ldr	r2, [pc, #384]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003ea4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003eac:	bb0d      	cbnz	r5, 8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003eae:	4a5d      	ldr	r2, [pc, #372]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003eb0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003eb2:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003eb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003ec2:	d02f      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ec4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ecc:	d03e      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8003ece:	d812      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003ed0:	b1d3      	cbz	r3, 8003f08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed6:	d114      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ed8:	2100      	movs	r1, #0
 8003eda:	1d20      	adds	r0, r4, #4
 8003edc:	f7ff fe5a 	bl	8003b94 <RCCEx_PLL2_Config>
 8003ee0:	4605      	mov	r5, r0
      break;
 8003ee2:	e016      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003eea:	f7ff fed9 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003eee:	4605      	mov	r5, r0
      break;
 8003ef0:	e7dc      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003ef2:	462e      	mov	r6, r5
 8003ef4:	e7e2      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ef6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003efc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f00:	d007      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8003f02:	2601      	movs	r6, #1
 8003f04:	4635      	mov	r5, r6
 8003f06:	e00d      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4a46      	ldr	r2, [pc, #280]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f10:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f12:	bb15      	cbnz	r5, 8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f14:	4a43      	ldr	r2, [pc, #268]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f16:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f18:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8003f1c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003f2a:	d02f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f2c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8003f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f34:	d037      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f36:	d812      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003f38:	b1d3      	cbz	r3, 8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8003f3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f3e:	d114      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f40:	2100      	movs	r1, #0
 8003f42:	1d20      	adds	r0, r4, #4
 8003f44:	f7ff fe26 	bl	8003b94 <RCCEx_PLL2_Config>
 8003f48:	4605      	mov	r5, r0
      break;
 8003f4a:	e016      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f52:	f7ff fea5 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003f56:	4605      	mov	r5, r0
      break;
 8003f58:	e7db      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003f5a:	462e      	mov	r6, r5
 8003f5c:	e7e2      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f68:	d007      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 8003f6a:	2601      	movs	r6, #1
 8003f6c:	4635      	mov	r5, r6
 8003f6e:	e00d      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f70:	4a2c      	ldr	r2, [pc, #176]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f78:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f7a:	b9dd      	cbnz	r5, 8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f7c:	4a29      	ldr	r2, [pc, #164]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f80:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f84:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f92:	d02a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 8003f94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d012      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003f9a:	d90d      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d01d      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003fa0:	2b30      	cmp	r3, #48	; 0x30
 8003fa2:	d012      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003fa4:	e009      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fac:	f7ff fe78 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003fb0:	4605      	mov	r5, r0
      break;
 8003fb2:	e7e2      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003fb4:	462e      	mov	r6, r5
 8003fb6:	e7e9      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 8003fb8:	b13b      	cbz	r3, 8003fca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 8003fba:	2601      	movs	r6, #1
 8003fbc:	4635      	mov	r5, r6
 8003fbe:	e014      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc0:	4a18      	ldr	r2, [pc, #96]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003fc2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003fca:	b96d      	cbnz	r5, 8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fcc:	4a15      	ldr	r2, [pc, #84]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003fce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003fd0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fd4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fda:	e006      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fdc:	2102      	movs	r1, #2
 8003fde:	1d20      	adds	r0, r4, #4
 8003fe0:	f7ff fdd8 	bl	8003b94 <RCCEx_PLL2_Config>
 8003fe4:	4605      	mov	r5, r0
      break;
 8003fe6:	e7f0      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003fe8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003ff0:	d027      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ff2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	d03e      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003ffa:	d809      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003ffc:	b1a3      	cbz	r3, 8004028 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004002:	d10b      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004004:	2100      	movs	r1, #0
 8004006:	1d20      	adds	r0, r4, #4
 8004008:	f7ff fdc4 	bl	8003b94 <RCCEx_PLL2_Config>
 800400c:	4605      	mov	r5, r0
      break;
 800400e:	e010      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004010:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004014:	d00d      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 800401c:	2601      	movs	r6, #1
 800401e:	4635      	mov	r5, r6
 8004020:	e00f      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004028:	4a93      	ldr	r2, [pc, #588]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800402a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004032:	bb45      	cbnz	r5, 8004086 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004034:	4a90      	ldr	r2, [pc, #576]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004036:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800403e:	430b      	orrs	r3, r1
 8004040:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004048:	d033      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 800404a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800404c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004050:	d027      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8004052:	d81a      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004054:	b13b      	cbz	r3, 8004066 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405a:	d11f      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800405c:	2101      	movs	r1, #1
 800405e:	1d20      	adds	r0, r4, #4
 8004060:	f7ff fd98 	bl	8003b94 <RCCEx_PLL2_Config>
 8004064:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004066:	bb1d      	cbnz	r5, 80040b0 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004068:	4a83      	ldr	r2, [pc, #524]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800406a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800406c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004070:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004072:	430b      	orrs	r3, r1
 8004074:	6513      	str	r3, [r2, #80]	; 0x50
 8004076:	e01c      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004078:	2100      	movs	r1, #0
 800407a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800407e:	f7ff fe0f 	bl	8003ca0 <RCCEx_PLL3_Config>
 8004082:	4605      	mov	r5, r0
      break;
 8004084:	e7d5      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004086:	462e      	mov	r6, r5
 8004088:	e7db      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 800408a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800408e:	d0ea      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004094:	d0e7      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004096:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800409a:	d0e4      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 800409c:	2601      	movs	r6, #1
 800409e:	4635      	mov	r5, r6
 80040a0:	e007      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040a2:	2101      	movs	r1, #1
 80040a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040a8:	f7ff fdfa 	bl	8003ca0 <RCCEx_PLL3_Config>
 80040ac:	4605      	mov	r5, r0
      break;
 80040ae:	e7da      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80040b0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80040b8:	d02c      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 80040ba:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80040be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c2:	d01f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80040c4:	d812      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x340>
 80040c6:	b13b      	cbz	r3, 80040d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80040c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040cc:	d117      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040ce:	2101      	movs	r1, #1
 80040d0:	1d20      	adds	r0, r4, #4
 80040d2:	f7ff fd5f 	bl	8003b94 <RCCEx_PLL2_Config>
 80040d6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040d8:	b9dd      	cbnz	r5, 8004112 <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040da:	4a67      	ldr	r2, [pc, #412]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80040dc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040de:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80040e2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80040e6:	430b      	orrs	r3, r1
 80040e8:	6593      	str	r3, [r2, #88]	; 0x58
 80040ea:	e013      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d0f2      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80040f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f6:	d0ef      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80040f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040fc:	d0ec      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 80040fe:	2601      	movs	r6, #1
 8004100:	4635      	mov	r5, r6
 8004102:	e007      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004104:	2101      	movs	r1, #1
 8004106:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800410a:	f7ff fdc9 	bl	8003ca0 <RCCEx_PLL3_Config>
 800410e:	4605      	mov	r5, r0
      break;
 8004110:	e7e2      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004112:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800411a:	d01f      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 800411c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800411e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004122:	d006      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004128:	d011      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800412a:	b13b      	cbz	r3, 800413c <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 800412c:	2601      	movs	r6, #1
 800412e:	4635      	mov	r5, r6
 8004130:	e014      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004132:	4a51      	ldr	r2, [pc, #324]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004134:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800413c:	b96d      	cbnz	r5, 800415a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800413e:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004140:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004142:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004146:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004148:	430b      	orrs	r3, r1
 800414a:	6513      	str	r3, [r2, #80]	; 0x50
 800414c:	e006      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800414e:	2101      	movs	r1, #1
 8004150:	1d20      	adds	r0, r4, #4
 8004152:	f7ff fd1f 	bl	8003b94 <RCCEx_PLL2_Config>
 8004156:	4605      	mov	r5, r0
      break;
 8004158:	e7f0      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x390>
 800415a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004162:	d01e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->FmcClockSelection)
 8004164:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004166:	2b03      	cmp	r3, #3
 8004168:	d817      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800416a:	e8df f003 	tbb	[pc, r3]
 800416e:	0207      	.short	0x0207
 8004170:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004172:	4a41      	ldr	r2, [pc, #260]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004174:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800417c:	b985      	cbnz	r5, 80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800417e:	4a3e      	ldr	r2, [pc, #248]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004180:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004188:	430b      	orrs	r3, r1
 800418a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800418c:	e009      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800418e:	2102      	movs	r1, #2
 8004190:	1d20      	adds	r0, r4, #4
 8004192:	f7ff fcff 	bl	8003b94 <RCCEx_PLL2_Config>
 8004196:	4605      	mov	r5, r0
      break;
 8004198:	e7f0      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = HAL_ERROR;
 800419a:	2601      	movs	r6, #1
 800419c:	4635      	mov	r5, r6
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80041a0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80041a8:	d11f      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	f013 0f01 	tst.w	r3, #1
 80041b0:	f000 809e 	beq.w	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch(PeriphClkInit->Usart16ClockSelection)
 80041b4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80041b6:	2b28      	cmp	r3, #40	; 0x28
 80041b8:	f200 8096 	bhi.w	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 80041bc:	e8df f003 	tbb	[pc, r3]
 80041c0:	94949484 	.word	0x94949484
 80041c4:	94949494 	.word	0x94949494
 80041c8:	9494947f 	.word	0x9494947f
 80041cc:	94949494 	.word	0x94949494
 80041d0:	9494948d 	.word	0x9494948d
 80041d4:	94949494 	.word	0x94949494
 80041d8:	94949484 	.word	0x94949484
 80041dc:	94949494 	.word	0x94949494
 80041e0:	94949484 	.word	0x94949484
 80041e4:	94949494 	.word	0x94949494
 80041e8:	84          	.byte	0x84
 80041e9:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ea:	4a24      	ldr	r2, [pc, #144]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80041ec:	6813      	ldr	r3, [r2, #0]
 80041ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80041f4:	f7fc fa50 	bl	8000698 <HAL_GetTick>
 80041f8:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004202:	d105      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004204:	f7fc fa48 	bl	8000698 <HAL_GetTick>
 8004208:	1bc0      	subs	r0, r0, r7
 800420a:	2864      	cmp	r0, #100	; 0x64
 800420c:	d9f5      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x44e>
        ret = HAL_TIMEOUT;
 800420e:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8004210:	2d00      	cmp	r5, #0
 8004212:	d150      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800421c:	4053      	eors	r3, r2
 800421e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004222:	d00c      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x492>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004226:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004228:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800422c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800422e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004232:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004234:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004236:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800423a:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800423c:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800423e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d01b      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if(ret == HAL_OK)
 8004248:	2d00      	cmp	r5, #0
 800424a:	d136      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004250:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004254:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004258:	d023      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800425a:	4a07      	ldr	r2, [pc, #28]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800425c:	6913      	ldr	r3, [r2, #16]
 800425e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004262:	6113      	str	r3, [r2, #16]
 8004264:	4904      	ldr	r1, [pc, #16]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004266:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004268:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800426c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004270:	4313      	orrs	r3, r2
 8004272:	670b      	str	r3, [r1, #112]	; 0x70
 8004274:	e799      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
 800427c:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8004280:	f7fc fa0a 	bl	8000698 <HAL_GetTick>
 8004284:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004286:	4bac      	ldr	r3, [pc, #688]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	f013 0f02 	tst.w	r3, #2
 800428e:	d1db      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x49c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fc fa02 	bl	8000698 <HAL_GetTick>
 8004294:	1bc0      	subs	r0, r0, r7
 8004296:	f241 3388 	movw	r3, #5000	; 0x1388
 800429a:	4298      	cmp	r0, r3
 800429c:	d9f3      	bls.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4da>
            ret = HAL_TIMEOUT;
 800429e:	2503      	movs	r5, #3
 80042a0:	e7d2      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x49c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a2:	48a5      	ldr	r0, [pc, #660]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80042a4:	6902      	ldr	r2, [r0, #16]
 80042a6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80042aa:	49a4      	ldr	r1, [pc, #656]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x790>)
 80042ac:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 80042b0:	4313      	orrs	r3, r2
 80042b2:	6103      	str	r3, [r0, #16]
 80042b4:	e7d6      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      status = ret;
 80042b6:	462e      	mov	r6, r5
 80042b8:	e777      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        status = ret;
 80042ba:	462e      	mov	r6, r5
 80042bc:	e775      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042be:	2101      	movs	r1, #1
 80042c0:	1d20      	adds	r0, r4, #4
 80042c2:	f7ff fc67 	bl	8003b94 <RCCEx_PLL2_Config>
 80042c6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80042c8:	b98d      	cbnz	r5, 80042ee <HAL_RCCEx_PeriphCLKConfig+0x542>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042ca:	4a9b      	ldr	r2, [pc, #620]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80042cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042ce:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80042d2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6553      	str	r3, [r2, #84]	; 0x54
 80042d8:	e00a      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042da:	2101      	movs	r1, #1
 80042dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042e0:	f7ff fcde 	bl	8003ca0 <RCCEx_PLL3_Config>
 80042e4:	4605      	mov	r5, r0
      break;
 80042e6:	e7ef      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      ret = HAL_ERROR;
 80042e8:	2601      	movs	r6, #1
 80042ea:	4635      	mov	r5, r6
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80042ee:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f013 0f02 	tst.w	r3, #2
 80042f6:	d020      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80042f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	d819      	bhi.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80042fe:	e8df f003 	tbb	[pc, r3]
 8004302:	0308      	.short	0x0308
 8004304:	08080811 	.word	0x08080811
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004308:	2101      	movs	r1, #1
 800430a:	1d20      	adds	r0, r4, #4
 800430c:	f7ff fc42 	bl	8003b94 <RCCEx_PLL2_Config>
 8004310:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004312:	b98d      	cbnz	r5, 8004338 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004314:	4a88      	ldr	r2, [pc, #544]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004316:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004318:	f023 0307 	bic.w	r3, r3, #7
 800431c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800431e:	430b      	orrs	r3, r1
 8004320:	6553      	str	r3, [r2, #84]	; 0x54
 8004322:	e00a      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004324:	2101      	movs	r1, #1
 8004326:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800432a:	f7ff fcb9 	bl	8003ca0 <RCCEx_PLL3_Config>
 800432e:	4605      	mov	r5, r0
      break;
 8004330:	e7ef      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x566>
      ret = HAL_ERROR;
 8004332:	2601      	movs	r6, #1
 8004334:	4635      	mov	r5, r6
 8004336:	e000      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8004338:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	f013 0f04 	tst.w	r3, #4
 8004340:	d022      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004342:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004346:	2b05      	cmp	r3, #5
 8004348:	d81a      	bhi.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800434a:	e8df f003 	tbb	[pc, r3]
 800434e:	0308      	.short	0x0308
 8004350:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004354:	2101      	movs	r1, #1
 8004356:	1d20      	adds	r0, r4, #4
 8004358:	f7ff fc1c 	bl	8003b94 <RCCEx_PLL2_Config>
 800435c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800435e:	b995      	cbnz	r5, 8004386 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004360:	4a75      	ldr	r2, [pc, #468]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004362:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004364:	f023 0307 	bic.w	r3, r3, #7
 8004368:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800436c:	430b      	orrs	r3, r1
 800436e:	6593      	str	r3, [r2, #88]	; 0x58
 8004370:	e00a      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004372:	2101      	movs	r1, #1
 8004374:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004378:	f7ff fc92 	bl	8003ca0 <RCCEx_PLL3_Config>
 800437c:	4605      	mov	r5, r0
      break;
 800437e:	e7ee      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      ret = HAL_ERROR;
 8004380:	2601      	movs	r6, #1
 8004382:	4635      	mov	r5, r6
 8004384:	e000      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8004386:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f013 0f20 	tst.w	r3, #32
 800438e:	d02c      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004390:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004398:	d01f      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800439a:	d812      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x616>
 800439c:	b13b      	cbz	r3, 80043ae <HAL_RCCEx_PeriphCLKConfig+0x602>
 800439e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a2:	d117      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x628>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043a4:	2100      	movs	r1, #0
 80043a6:	1d20      	adds	r0, r4, #4
 80043a8:	f7ff fbf4 	bl	8003b94 <RCCEx_PLL2_Config>
 80043ac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80043ae:	b9dd      	cbnz	r5, 80043e8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043b0:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80043b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80043b4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80043b8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80043bc:	430b      	orrs	r3, r1
 80043be:	6553      	str	r3, [r2, #84]	; 0x54
 80043c0:	e013      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d0f2      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x602>
 80043c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043cc:	d0ef      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x602>
 80043ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043d2:	d0ec      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = HAL_ERROR;
 80043d4:	2601      	movs	r6, #1
 80043d6:	4635      	mov	r5, r6
 80043d8:	e007      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x63e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043da:	2102      	movs	r1, #2
 80043dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043e0:	f7ff fc5e 	bl	8003ca0 <RCCEx_PLL3_Config>
 80043e4:	4605      	mov	r5, r0
      break;
 80043e6:	e7e2      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x602>
 80043e8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043f0:	d02c      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80043f2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80043f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fa:	d01f      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x690>
 80043fc:	d812      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80043fe:	b13b      	cbz	r3, 8004410 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004404:	d117      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004406:	2100      	movs	r1, #0
 8004408:	1d20      	adds	r0, r4, #4
 800440a:	f7ff fbc3 	bl	8003b94 <RCCEx_PLL2_Config>
 800440e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004410:	b9dd      	cbnz	r5, 800444a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004412:	4a49      	ldr	r2, [pc, #292]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004414:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004416:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800441a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800441e:	430b      	orrs	r3, r1
 8004420:	6593      	str	r3, [r2, #88]	; 0x58
 8004422:	e013      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d0f2      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800442a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800442e:	d0ef      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004434:	d0ec      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x664>
      ret = HAL_ERROR;
 8004436:	2601      	movs	r6, #1
 8004438:	4635      	mov	r5, r6
 800443a:	e007      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800443c:	2102      	movs	r1, #2
 800443e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004442:	f7ff fc2d 	bl	8003ca0 <RCCEx_PLL3_Config>
 8004446:	4605      	mov	r5, r0
      break;
 8004448:	e7e2      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800444a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004452:	d02c      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004454:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8004458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800445c:	d01f      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800445e:	d812      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8004460:	b13b      	cbz	r3, 8004472 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004466:	d117      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004468:	2100      	movs	r1, #0
 800446a:	1d20      	adds	r0, r4, #4
 800446c:	f7ff fb92 	bl	8003b94 <RCCEx_PLL2_Config>
 8004470:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004472:	b9dd      	cbnz	r5, 80044ac <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004474:	4a30      	ldr	r2, [pc, #192]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004476:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004478:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800447c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004480:	430b      	orrs	r3, r1
 8004482:	6593      	str	r3, [r2, #88]	; 0x58
 8004484:	e013      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448a:	d0f2      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800448c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004490:	d0ef      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004492:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004496:	d0ec      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = HAL_ERROR;
 8004498:	2601      	movs	r6, #1
 800449a:	4635      	mov	r5, r6
 800449c:	e007      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800449e:	2102      	movs	r1, #2
 80044a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80044a4:	f7ff fbfc 	bl	8003ca0 <RCCEx_PLL3_Config>
 80044a8:	4605      	mov	r5, r0
      break;
 80044aa:	e7e2      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80044ac:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	f013 0f08 	tst.w	r3, #8
 80044b4:	d00c      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x724>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80044b6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044be:	d028      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x766>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044c0:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80044c2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80044c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044c8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	f013 0f10 	tst.w	r3, #16
 80044d6:	d00c      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80044d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80044dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e0:	d020      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x778>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80044e4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80044e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ea:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80044ee:	430b      	orrs	r3, r1
 80044f0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80044f8:	d039      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 80044fa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d02c      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 8004504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004508:	d01f      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800450a:	b1cb      	cbz	r3, 8004540 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = HAL_ERROR;
 800450c:	2601      	movs	r6, #1
 800450e:	4635      	mov	r5, r6
 8004510:	e02d      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004512:	2102      	movs	r1, #2
 8004514:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004518:	f7ff fbc2 	bl	8003ca0 <RCCEx_PLL3_Config>
 800451c:	2800      	cmp	r0, #0
 800451e:	d0cf      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x714>
          status = HAL_ERROR;
 8004520:	2601      	movs	r6, #1
 8004522:	e7cd      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x714>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004524:	2102      	movs	r1, #2
 8004526:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800452a:	f7ff fbb9 	bl	8003ca0 <RCCEx_PLL3_Config>
 800452e:	2800      	cmp	r0, #0
 8004530:	d0d7      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 8004532:	2601      	movs	r6, #1
 8004534:	e7d5      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x736>
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400
 800453c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004540:	2100      	movs	r1, #0
 8004542:	1d20      	adds	r0, r4, #4
 8004544:	f7ff fb26 	bl	8003b94 <RCCEx_PLL2_Config>
 8004548:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800454a:	b97d      	cbnz	r5, 800456c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800454c:	4a5e      	ldr	r2, [pc, #376]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800454e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004550:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004554:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004558:	430b      	orrs	r3, r1
 800455a:	6593      	str	r3, [r2, #88]	; 0x58
 800455c:	e007      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800455e:	2102      	movs	r1, #2
 8004560:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004564:	f7ff fb9c 	bl	8003ca0 <RCCEx_PLL3_Config>
 8004568:	4605      	mov	r5, r0
      break;
 800456a:	e7ee      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800456c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004574:	d024      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    switch(PeriphClkInit->UsbClockSelection)
 8004576:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800457a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800457e:	d017      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8004580:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8004586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458a:	d002      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = HAL_ERROR;
 800458c:	2601      	movs	r6, #1
 800458e:	4635      	mov	r5, r6
 8004590:	e016      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004592:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004594:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800459c:	b97d      	cbnz	r5, 80045be <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800459e:	4a4a      	ldr	r2, [pc, #296]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80045a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80045a2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045a6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80045aa:	430b      	orrs	r3, r1
 80045ac:	6553      	str	r3, [r2, #84]	; 0x54
 80045ae:	e007      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045b0:	2101      	movs	r1, #1
 80045b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045b6:	f7ff fb73 	bl	8003ca0 <RCCEx_PLL3_Config>
 80045ba:	4605      	mov	r5, r0
      break;
 80045bc:	e7ee      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 80045be:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80045c6:	d014      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    switch(PeriphClkInit->SdmmcClockSelection)
 80045c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80045ca:	b12b      	cbz	r3, 80045d8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d023      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x86e>
      ret = HAL_ERROR;
 80045d2:	2601      	movs	r6, #1
 80045d4:	4635      	mov	r5, r6
 80045d6:	e00c      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4a3b      	ldr	r2, [pc, #236]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80045da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80045dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80045e2:	bb05      	cbnz	r5, 8004626 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045e4:	4a38      	ldr	r2, [pc, #224]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80045e6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80045ee:	430b      	orrs	r3, r1
 80045f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80045f8:	d117      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x87e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004600:	d02d      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    switch(PeriphClkInit->RngClockSelection)
 8004602:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004608:	d01b      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x896>
 800460a:	d917      	bls.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x890>
 800460c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004610:	d01c      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8004612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004616:	d112      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x892>
 8004618:	e018      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800461a:	2102      	movs	r1, #2
 800461c:	1d20      	adds	r0, r4, #4
 800461e:	f7ff fab9 	bl	8003b94 <RCCEx_PLL2_Config>
 8004622:	4605      	mov	r5, r0
      break;
 8004624:	e7dd      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 8004626:	462e      	mov	r6, r5
 8004628:	e7e3      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800462a:	2102      	movs	r1, #2
 800462c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004630:	f7ff fb36 	bl	8003ca0 <RCCEx_PLL3_Config>
 8004634:	2800      	cmp	r0, #0
 8004636:	d0e0      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      status=HAL_ERROR;
 8004638:	2601      	movs	r6, #1
 800463a:	e7de      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch(PeriphClkInit->RngClockSelection)
 800463c:	b133      	cbz	r3, 800464c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = HAL_ERROR;
 800463e:	2601      	movs	r6, #1
 8004640:	e00d      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004644:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800464c:	2d00      	cmp	r5, #0
 800464e:	d131      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x908>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004652:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004658:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800465a:	430b      	orrs	r3, r1
 800465c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004664:	d006      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004666:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004668:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800466a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800466e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004670:	430b      	orrs	r3, r1
 8004672:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800467a:	d006      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800467c:	4a12      	ldr	r2, [pc, #72]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800467e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004684:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004686:	430b      	orrs	r3, r1
 8004688:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004690:	d009      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004692:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800469a:	611a      	str	r2, [r3, #16]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80046a2:	430a      	orrs	r2, r1
 80046a4:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	db05      	blt.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
  if (status == HAL_OK)
 80046ac:	b106      	cbz	r6, 80046b0 <HAL_RCCEx_PeriphCLKConfig+0x904>
  return HAL_ERROR;
 80046ae:	2601      	movs	r6, #1
}
 80046b0:	4630      	mov	r0, r6
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b4:	462e      	mov	r6, r5
 80046b6:	e7d2      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046b8:	4a03      	ldr	r2, [pc, #12]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80046ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046bc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80046c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80046c2:	430b      	orrs	r3, r1
 80046c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046c6:	e7f1      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x900>
 80046c8:	58024400 	.word	0x58024400

080046cc <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80046cc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046ce:	f7ff fa1b 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80046da:	4a04      	ldr	r2, [pc, #16]	; (80046ec <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80046dc:	5cd3      	ldrb	r3, [r2, r3]
 80046de:	f003 031f 	and.w	r3, r3, #31
}
 80046e2:	40d8      	lsrs	r0, r3
 80046e4:	bd08      	pop	{r3, pc}
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400
 80046ec:	0800d0d4 	.word	0x0800d0d4

080046f0 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80046f0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046f2:	4978      	ldr	r1, [pc, #480]	; (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80046f4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80046f6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80046f8:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046fc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80046fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004702:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8004704:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004708:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 800470c:	2a00      	cmp	r2, #0
 800470e:	f000 80db 	beq.w	80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 8004712:	f004 0403 	and.w	r4, r4, #3
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800471e:	2c01      	cmp	r4, #1
 8004720:	d066      	beq.n	80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8004722:	b1fc      	cbz	r4, 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 8004724:	2c02      	cmp	r4, #2
 8004726:	f000 80b2 	beq.w	800488e <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800472a:	ee07 2a10 	vmov	s14, r2
 800472e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004732:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004736:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800473a:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	ee07 3a10 	vmov	s14, r3
 8004746:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800474a:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800474e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800475a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800475e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004762:	e061      	b.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004764:	4b5b      	ldr	r3, [pc, #364]	; (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f013 0f20 	tst.w	r3, #32
 800476c:	d023      	beq.n	80047b6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800476e:	4c59      	ldr	r4, [pc, #356]	; (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004770:	6821      	ldr	r1, [r4, #0]
 8004772:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004776:	4b5a      	ldr	r3, [pc, #360]	; (80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8004778:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800477a:	ee07 3a10 	vmov	s14, r3
 800477e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004782:	ee06 2a90 	vmov	s13, r2
 8004786:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800478a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800478e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004794:	ee07 3a10 	vmov	s14, r3
 8004798:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800479c:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80047a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80047a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80047b4:	e038      	b.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047b6:	ee07 2a10 	vmov	s14, r2
 80047ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047be:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80047c2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80047c6:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	ee07 3a10 	vmov	s14, r3
 80047d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047d6:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80047da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80047de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80047ee:	e01b      	b.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047f0:	ee07 2a10 	vmov	s14, r2
 80047f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047f8:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80047fc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004800:	4b34      	ldr	r3, [pc, #208]	; (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004808:	ee07 3a10 	vmov	s14, r3
 800480c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004810:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004814:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800481c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004824:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004828:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800482a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800482c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004830:	ee07 3a10 	vmov	s14, r3
 8004834:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004838:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800483c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800484c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800484e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004852:	ee07 3a10 	vmov	s14, r3
 8004856:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800485a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800485e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004866:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800486a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800486c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	ee77 7a86 	vadd.f32	s15, s15, s12
 800487c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004880:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004884:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800488c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800488e:	ee07 2a10 	vmov	s14, r2
 8004892:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004896:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 800489a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	ee07 3a10 	vmov	s14, r3
 80048aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048ae:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80048b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80048b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80048c6:	e7af      	b.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048cc:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048ce:	6083      	str	r3, [r0, #8]
}
 80048d0:	e7da      	b.n	8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 80048d2:	bf00      	nop
 80048d4:	58024400 	.word	0x58024400
 80048d8:	4a742400 	.word	0x4a742400
 80048dc:	39000000 	.word	0x39000000
 80048e0:	03d09000 	.word	0x03d09000
 80048e4:	4c742400 	.word	0x4c742400
 80048e8:	4bbebc20 	.word	0x4bbebc20

080048ec <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80048ec:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048ee:	4978      	ldr	r1, [pc, #480]	; (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80048f0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80048f2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80048f4:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048f8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80048fa:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048fe:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004900:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004904:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 8004908:	2a00      	cmp	r2, #0
 800490a:	f000 80db 	beq.w	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 800490e:	f004 0403 	and.w	r4, r4, #3
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800491a:	2c01      	cmp	r4, #1
 800491c:	d066      	beq.n	80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800491e:	b1fc      	cbz	r4, 8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 8004920:	2c02      	cmp	r4, #2
 8004922:	f000 80b2 	beq.w	8004a8a <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004926:	ee07 2a10 	vmov	s14, r2
 800492a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800492e:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004932:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004936:	4b66      	ldr	r3, [pc, #408]	; (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a10 	vmov	s14, r3
 8004942:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004946:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800494a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800494e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004956:	ee77 7a87 	vadd.f32	s15, s15, s14
 800495a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800495e:	e061      	b.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004960:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f013 0f20 	tst.w	r3, #32
 8004968:	d023      	beq.n	80049b2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800496a:	4c59      	ldr	r4, [pc, #356]	; (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800496c:	6821      	ldr	r1, [r4, #0]
 800496e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004972:	4b5a      	ldr	r3, [pc, #360]	; (8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8004974:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004976:	ee07 3a10 	vmov	s14, r3
 800497a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800497e:	ee06 2a90 	vmov	s13, r2
 8004982:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004986:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800498a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800498c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004990:	ee07 3a10 	vmov	s14, r3
 8004994:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004998:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800499c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80049a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80049b0:	e038      	b.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049b2:	ee07 2a10 	vmov	s14, r2
 80049b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049ba:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80049be:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80049c2:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a10 	vmov	s14, r3
 80049ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049d2:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80049d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80049da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80049ea:	e01b      	b.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049ec:	ee07 2a10 	vmov	s14, r2
 80049f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049f4:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80049f8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80049fc:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a04:	ee07 3a10 	vmov	s14, r3
 8004a08:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a0c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004a10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a20:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a24:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004a26:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a28:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004a2c:	ee07 3a10 	vmov	s14, r3
 8004a30:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a34:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004a38:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a44:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a48:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a4a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004a4e:	ee07 3a10 	vmov	s14, r3
 8004a52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a56:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a62:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a68:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a74:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004a80:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a88:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a8a:	ee07 2a10 	vmov	s14, r2
 8004a8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a92:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8004a96:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	ee07 3a10 	vmov	s14, r3
 8004aa6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004aaa:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004aae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004abe:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004ac2:	e7af      	b.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ac8:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004aca:	6083      	str	r3, [r0, #8]
}
 8004acc:	e7da      	b.n	8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8004ace:	bf00      	nop
 8004ad0:	58024400 	.word	0x58024400
 8004ad4:	4a742400 	.word	0x4a742400
 8004ad8:	39000000 	.word	0x39000000
 8004adc:	03d09000 	.word	0x03d09000
 8004ae0:	4c742400 	.word	0x4c742400
 8004ae4:	4bbebc20 	.word	0x4bbebc20

08004ae8 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8004ae8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004aea:	4978      	ldr	r1, [pc, #480]	; (8004ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004aec:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004aee:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004af0:	f3c2 1205 	ubfx	r2, r2, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004af4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004af6:	f003 0301 	and.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004afa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004afc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004b00:	fb03 f301 	mul.w	r3, r3, r1
  if (pll1m != 0U)
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	f000 80db 	beq.w	8004cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
 8004b0a:	f004 0403 	and.w	r4, r4, #3
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004b16:	2c01      	cmp	r4, #1
 8004b18:	d066      	beq.n	8004be8 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8004b1a:	b1fc      	cbz	r4, 8004b5c <HAL_RCCEx_GetPLL1ClockFreq+0x74>
 8004b1c:	2c02      	cmp	r4, #2
 8004b1e:	f000 80b2 	beq.w	8004c86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b22:	ee07 2a10 	vmov	s14, r2
 8004b26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b2a:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004b2e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004b32:	4b66      	ldr	r3, [pc, #408]	; (8004ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3a:	ee07 3a10 	vmov	s14, r3
 8004b3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b42:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004b46:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b56:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004b5a:	e061      	b.n	8004c20 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b5c:	4b5b      	ldr	r3, [pc, #364]	; (8004ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f013 0f20 	tst.w	r3, #32
 8004b64:	d023      	beq.n	8004bae <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b66:	4c59      	ldr	r4, [pc, #356]	; (8004ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004b68:	6821      	ldr	r1, [r4, #0]
 8004b6a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004b6e:	4b5a      	ldr	r3, [pc, #360]	; (8004cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8004b70:	40cb      	lsrs	r3, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b72:	ee07 3a10 	vmov	s14, r3
 8004b76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b7a:	ee06 2a90 	vmov	s13, r2
 8004b7e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004b82:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004b86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8c:	ee07 3a10 	vmov	s14, r3
 8004b90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b94:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004b98:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ba8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004bac:	e038      	b.n	8004c20 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bae:	ee07 2a10 	vmov	s14, r2
 8004bb2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004bb6:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004cdc <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8004bba:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004bbe:	4b43      	ldr	r3, [pc, #268]	; (8004ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc6:	ee07 3a10 	vmov	s14, r3
 8004bca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004bce:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004bd2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004be2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004be6:	e01b      	b.n	8004c20 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004be8:	ee07 2a10 	vmov	s14, r2
 8004bec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004bf0:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004bf4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004bf8:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c00:	ee07 3a10 	vmov	s14, r3
 8004c04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c08:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004c0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004c20:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004c22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c24:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004c28:	ee07 3a10 	vmov	s14, r3
 8004c2c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c30:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004c34:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c40:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004c44:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c46:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004c4a:	ee07 3a10 	vmov	s14, r3
 8004c4e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c52:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5e:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004c62:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c64:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004c68:	ee07 3a90 	vmov	s15, r3
 8004c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c70:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c78:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004c7c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c84:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c86:	ee07 2a10 	vmov	s14, r2
 8004c8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c8e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8004c92:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	ee07 3a10 	vmov	s14, r3
 8004ca2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ca6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004caa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cba:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004cbe:	e7af      	b.n	8004c20 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004cc4:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004cc6:	6083      	str	r3, [r0, #8]
}
 8004cc8:	e7da      	b.n	8004c80 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8004cca:	bf00      	nop
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	4a742400 	.word	0x4a742400
 8004cd4:	39000000 	.word	0x39000000
 8004cd8:	03d09000 	.word	0x03d09000
 8004cdc:	4c742400 	.word	0x4c742400
 8004ce0:	4bbebc20 	.word	0x4bbebc20

08004ce4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8004ce4:	b500      	push	{lr}
 8004ce6:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004ce8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004cec:	d01b      	beq.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004cee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004cf2:	d048      	beq.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004cf4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004cf8:	d078      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004cfa:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004cfe:	f000 80ab 	beq.w	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004d02:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004d06:	f000 80dd 	beq.w	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004d0a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004d0e:	f000 810f 	beq.w	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004d12:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004d16:	f000 8131 	beq.w	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004d1a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004d1e:	f000 8145 	beq.w	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
      frequency = 0;
 8004d22:	2000      	movs	r0, #0
 8004d24:	e00c      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004d26:	4b9e      	ldr	r3, [pc, #632]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2a:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	f200 8164 	bhi.w	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8004d34:	e8df f003 	tbb	[pc, r3]
 8004d38:	03110c07 	.word	0x03110c07
 8004d3c:	16          	.byte	0x16
 8004d3d:	00          	.byte	0x00
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d3e:	4899      	ldr	r0, [pc, #612]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8004d40:	b00b      	add	sp, #44	; 0x2c
 8004d42:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d46:	a807      	add	r0, sp, #28
 8004d48:	f7ff fece 	bl	8004ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d4c:	9808      	ldr	r0, [sp, #32]
          break;
 8004d4e:	e7f7      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d50:	a804      	add	r0, sp, #16
 8004d52:	f7ff fccd 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d56:	9804      	ldr	r0, [sp, #16]
          break;
 8004d58:	e7f2      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5a:	a801      	add	r0, sp, #4
 8004d5c:	f7ff fdc6 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d60:	9801      	ldr	r0, [sp, #4]
          break;
 8004d62:	e7ed      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d64:	4b8e      	ldr	r3, [pc, #568]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004d68:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004d6c:	f000 8148 	beq.w	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d74:	f000 8146 	beq.w	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d7c:	d001      	beq.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = 0;
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e7de      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004d82:	4889      	ldr	r0, [pc, #548]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004d84:	e7dc      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004d86:	4b86      	ldr	r3, [pc, #536]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8004d8e:	2b80      	cmp	r3, #128	; 0x80
 8004d90:	d025      	beq.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004d92:	d808      	bhi.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8004d94:	b1f3      	cbz	r3, 8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	f040 8136 	bne.w	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d9c:	a804      	add	r0, sp, #16
 8004d9e:	f7ff fca7 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004da2:	9804      	ldr	r0, [sp, #16]
          break;
 8004da4:	e7cc      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004da6:	2bc0      	cmp	r3, #192	; 0xc0
 8004da8:	d012      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dae:	f040 812b 	bne.w	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004db2:	4b7b      	ldr	r3, [pc, #492]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004db6:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004dba:	f000 8127 	beq.w	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc2:	f000 8125 	beq.w	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            frequency = 0;
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e7b7      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dd0:	4874      	ldr	r0, [pc, #464]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004dd2:	e7b5      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dd4:	a807      	add	r0, sp, #28
 8004dd6:	f7ff fe87 	bl	8004ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dda:	9808      	ldr	r0, [sp, #32]
          break;
 8004ddc:	e7b0      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dde:	a801      	add	r0, sp, #4
 8004de0:	f7ff fd84 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004de4:	9801      	ldr	r0, [sp, #4]
          break;
 8004de6:	e7ab      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004de8:	486f      	ldr	r0, [pc, #444]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004dea:	e7a9      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004dec:	4b6c      	ldr	r3, [pc, #432]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8004df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df8:	d027      	beq.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004dfa:	d809      	bhi.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004dfc:	b303      	cbz	r3, 8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e02:	f040 8107 	bne.w	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e06:	a804      	add	r0, sp, #16
 8004e08:	f7ff fc72 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e0c:	9804      	ldr	r0, [sp, #16]
          break;
 8004e0e:	e797      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004e10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e14:	d012      	beq.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e1a:	f040 80fb 	bne.w	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e1e:	4b60      	ldr	r3, [pc, #384]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004e22:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004e26:	f000 80f7 	beq.w	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e2e:	f000 80f5 	beq.w	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e36:	d00d      	beq.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
            frequency = 0;
 8004e38:	2000      	movs	r0, #0
 8004e3a:	e781      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e3c:	4859      	ldr	r0, [pc, #356]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e3e:	e77f      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e40:	a807      	add	r0, sp, #28
 8004e42:	f7ff fe51 	bl	8004ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e46:	9808      	ldr	r0, [sp, #32]
          break;
 8004e48:	e77a      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e4a:	a801      	add	r0, sp, #4
 8004e4c:	f7ff fd4e 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e50:	9801      	ldr	r0, [sp, #4]
          break;
 8004e52:	e775      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004e54:	4854      	ldr	r0, [pc, #336]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e56:	e773      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004e58:	4b51      	ldr	r3, [pc, #324]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e64:	d027      	beq.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8004e66:	d809      	bhi.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8004e68:	b303      	cbz	r3, 8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8004e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e6e:	f040 80d7 	bne.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e72:	a804      	add	r0, sp, #16
 8004e74:	f7ff fc3c 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e78:	9804      	ldr	r0, [sp, #16]
          break;
 8004e7a:	e761      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004e7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e80:	d012      	beq.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8004e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e86:	f040 80cb 	bne.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e8a:	4b45      	ldr	r3, [pc, #276]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004e8e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004e92:	f000 80c7 	beq.w	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e9a:	f000 80c5 	beq.w	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
            frequency = 0;
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	e74b      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ea8:	483e      	ldr	r0, [pc, #248]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004eaa:	e749      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eac:	a807      	add	r0, sp, #28
 8004eae:	f7ff fe1b 	bl	8004ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eb2:	9808      	ldr	r0, [sp, #32]
          break;
 8004eb4:	e744      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eb6:	a801      	add	r0, sp, #4
 8004eb8:	f7ff fd18 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ebc:	9801      	ldr	r0, [sp, #4]
          break;
 8004ebe:	e73f      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004ec0:	4839      	ldr	r0, [pc, #228]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004ec2:	e73d      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004ec4:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed0:	d027      	beq.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004ed2:	d809      	bhi.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8004ed4:	b303      	cbz	r3, 8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eda:	f040 80a7 	bne.w	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ede:	a804      	add	r0, sp, #16
 8004ee0:	f7ff fc06 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ee4:	9804      	ldr	r0, [sp, #16]
          break;
 8004ee6:	e72b      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8004ee8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eec:	d012      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8004eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef2:	f040 809b 	bne.w	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ef6:	4b2a      	ldr	r3, [pc, #168]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004efa:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004efe:	f000 8097 	beq.w	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f06:	f000 8095 	beq.w	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f0e:	d00d      	beq.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
            frequency = 0;
 8004f10:	2000      	movs	r0, #0
 8004f12:	e715      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f14:	4823      	ldr	r0, [pc, #140]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f16:	e713      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f18:	a807      	add	r0, sp, #28
 8004f1a:	f7ff fde5 	bl	8004ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f1e:	9808      	ldr	r0, [sp, #32]
          break;
 8004f20:	e70e      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f22:	a801      	add	r0, sp, #4
 8004f24:	f7ff fce2 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f28:	9801      	ldr	r0, [sp, #4]
          break;
 8004f2a:	e709      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004f2c:	481e      	ldr	r0, [pc, #120]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f2e:	e707      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004f30:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8004f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f42:	d00c      	beq.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004f44:	b10b      	cbz	r3, 8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
          frequency = 0;
 8004f46:	2000      	movs	r0, #0
 8004f48:	e6fa      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f4a:	a804      	add	r0, sp, #16
 8004f4c:	f7ff fbd0 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f50:	9804      	ldr	r0, [sp, #16]
          break;
 8004f52:	e6f5      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f54:	a801      	add	r0, sp, #4
 8004f56:	f7ff fcc9 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f5a:	9803      	ldr	r0, [sp, #12]
          break;
 8004f5c:	e6f0      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004f62:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004f66:	d067      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f6c:	d066      	beq.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f72:	d001      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
            frequency = 0;
 8004f74:	2000      	movs	r0, #0
 8004f76:	e6e3      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004f78:	480b      	ldr	r0, [pc, #44]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f7a:	e6e1      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004f7c:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004f80:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004f84:	d002      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8004f86:	b933      	cbnz	r3, 8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          frequency = 0;
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e6d9      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f8c:	a807      	add	r0, sp, #28
 8004f8e:	f7ff fdab 	bl	8004ae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f92:	9808      	ldr	r0, [sp, #32]
          break;
 8004f94:	e6d4      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f96:	a804      	add	r0, sp, #16
 8004f98:	f7ff fbaa 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f9c:	9806      	ldr	r0, [sp, #24]
          break;
 8004f9e:	e6cf      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	00bb8000 	.word	0x00bb8000
 8004fa8:	017d7840 	.word	0x017d7840
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004fac:	4b25      	ldr	r3, [pc, #148]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb8:	d019      	beq.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 8004fba:	d90a      	bls.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d03e      	beq.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8004fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fc6:	d017      	beq.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004fc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
          frequency = 0;
 8004fce:	2000      	movs	r0, #0
          break;
 8004fd0:	e6b6      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8004fd2:	b14b      	cbz	r3, 8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fd8:	d1f9      	bne.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fda:	a804      	add	r0, sp, #16
 8004fdc:	f7ff fb88 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fe0:	9805      	ldr	r0, [sp, #20]
          break;
 8004fe2:	e6ad      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSI_VALUE;
 8004fe4:	4818      	ldr	r0, [pc, #96]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004fe6:	e6ab      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004fe8:	f7ff fb70 	bl	80046cc <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8004fec:	e6a8      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fee:	a801      	add	r0, sp, #4
 8004ff0:	f7ff fc7c 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ff4:	9802      	ldr	r0, [sp, #8]
          break;
 8004ff6:	e6a3      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSE_VALUE;
 8004ff8:	4814      	ldr	r0, [pc, #80]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
          break;
 8004ffa:	e6a1      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e69f      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005000:	4811      	ldr	r0, [pc, #68]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005002:	e69d      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005004:	4812      	ldr	r0, [pc, #72]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005006:	e69b      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8005008:	2000      	movs	r0, #0
 800500a:	e699      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 800500c:	480e      	ldr	r0, [pc, #56]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800500e:	e697      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005010:	480f      	ldr	r0, [pc, #60]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005012:	e695      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8005014:	2000      	movs	r0, #0
 8005016:	e693      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005018:	480b      	ldr	r0, [pc, #44]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800501a:	e691      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 800501c:	480c      	ldr	r0, [pc, #48]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800501e:	e68f      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8005020:	2000      	movs	r0, #0
 8005022:	e68d      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005024:	4808      	ldr	r0, [pc, #32]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005026:	e68b      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005028:	4809      	ldr	r0, [pc, #36]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800502a:	e689      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 800502c:	2000      	movs	r0, #0
 800502e:	e687      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005030:	4805      	ldr	r0, [pc, #20]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005032:	e685      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005034:	4806      	ldr	r0, [pc, #24]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005036:	e683      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005038:	4803      	ldr	r0, [pc, #12]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800503a:	e681      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 800503c:	4804      	ldr	r0, [pc, #16]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800503e:	e67f      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = CSI_VALUE;
 8005040:	4803      	ldr	r0, [pc, #12]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
  return frequency;
 8005042:	e67d      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8005044:	58024400 	.word	0x58024400
 8005048:	03d09000 	.word	0x03d09000
 800504c:	017d7840 	.word	0x017d7840
 8005050:	003d0900 	.word	0x003d0900

08005054 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005054:	2800      	cmp	r0, #0
 8005056:	d036      	beq.n	80050c6 <HAL_RNG_Init+0x72>
{
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800505c:	7a43      	ldrb	r3, [r0, #9]
 800505e:	b1b3      	cbz	r3, 800508e <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005060:	2302      	movs	r3, #2
 8005062:	7263      	strb	r3, [r4, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	6813      	ldr	r3, [r2, #0]
 8005068:	f023 0320 	bic.w	r3, r3, #32
 800506c:	6861      	ldr	r1, [r4, #4]
 800506e:	430b      	orrs	r3, r1
 8005070:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	6813      	ldr	r3, [r2, #0]
 8005076:	f043 0304 	orr.w	r3, r3, #4
 800507a:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005084:	d007      	beq.n	8005096 <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005086:	2304      	movs	r3, #4
 8005088:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 800508a:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800508c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800508e:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8005090:	f005 fce2 	bl	800aa58 <HAL_RNG_MspInit>
 8005094:	e7e4      	b.n	8005060 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 8005096:	f7fb faff 	bl	8000698 <HAL_GetTick>
 800509a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f013 0f04 	tst.w	r3, #4
 80050a4:	d00a      	beq.n	80050bc <HAL_RNG_Init+0x68>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80050a6:	f7fb faf7 	bl	8000698 <HAL_GetTick>
 80050aa:	1b40      	subs	r0, r0, r5
 80050ac:	2802      	cmp	r0, #2
 80050ae:	d9f5      	bls.n	800509c <HAL_RNG_Init+0x48>
      hrng->State = HAL_RNG_STATE_ERROR;
 80050b0:	2304      	movs	r3, #4
 80050b2:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80050b4:	2302      	movs	r3, #2
 80050b6:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 80050b8:	2001      	movs	r0, #1
 80050ba:	e7e7      	b.n	800508c <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 80050bc:	2301      	movs	r3, #1
 80050be:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80050c0:	2000      	movs	r0, #0
 80050c2:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 80050c4:	e7e2      	b.n	800508c <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 80050c6:	2001      	movs	r0, #1
}
 80050c8:	4770      	bx	lr

080050ca <HAL_RNG_GenerateRandomNumber>:
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80050ca:	7a03      	ldrb	r3, [r0, #8]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d02b      	beq.n	8005128 <HAL_RNG_GenerateRandomNumber+0x5e>
{
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	460d      	mov	r5, r1
 80050d4:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 80050d6:	2301      	movs	r3, #1
 80050d8:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80050da:	7a43      	ldrb	r3, [r0, #9]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d005      	beq.n	80050ee <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80050e2:	2304      	movs	r3, #4
 80050e4:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 80050e6:	2001      	movs	r0, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80050e8:	2300      	movs	r3, #0
 80050ea:	7223      	strb	r3, [r4, #8]

  return status;
}
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80050ee:	2302      	movs	r3, #2
 80050f0:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 80050f2:	f7fb fad1 	bl	8000698 <HAL_GetTick>
 80050f6:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	f012 0f01 	tst.w	r2, #1
 8005100:	d10b      	bne.n	800511a <HAL_RNG_GenerateRandomNumber+0x50>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005102:	f7fb fac9 	bl	8000698 <HAL_GetTick>
 8005106:	1b80      	subs	r0, r0, r6
 8005108:	2802      	cmp	r0, #2
 800510a:	d9f5      	bls.n	80050f8 <HAL_RNG_GenerateRandomNumber+0x2e>
        hrng->State = HAL_RNG_STATE_READY;
 800510c:	2001      	movs	r0, #1
 800510e:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005110:	2302      	movs	r3, #2
 8005112:	60e3      	str	r3, [r4, #12]
        __HAL_UNLOCK(hrng);
 8005114:	2300      	movs	r3, #0
 8005116:	7223      	strb	r3, [r4, #8]
        return HAL_ERROR;
 8005118:	e7e8      	b.n	80050ec <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800511e:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8005120:	2301      	movs	r3, #1
 8005122:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8005124:	2000      	movs	r0, #0
 8005126:	e7df      	b.n	80050e8 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 8005128:	2002      	movs	r0, #2
}
 800512a:	4770      	bx	lr

0800512c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800512c:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800512e:	2400      	movs	r4, #0
 8005130:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005132:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005134:	6845      	ldr	r5, [r0, #4]
 8005136:	2d02      	cmp	r5, #2
 8005138:	bf14      	ite	ne
 800513a:	2400      	movne	r4, #0
 800513c:	2401      	moveq	r4, #1
 800513e:	2d00      	cmp	r5, #0
 8005140:	bf08      	it	eq
 8005142:	2401      	moveq	r4, #1
 8005144:	b1c4      	cbz	r4, 8005178 <SAI_InitI2S+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005146:	2400      	movs	r4, #0
 8005148:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800514a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800514e:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005150:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005154:	6744      	str	r4, [r0, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8005156:	2400      	movs	r4, #0
 8005158:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800515a:	6703      	str	r3, [r0, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800515c:	f013 0f01 	tst.w	r3, #1
 8005160:	d14b      	bne.n	80051fa <SAI_InitI2S+0xce>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 8005162:	b961      	cbnz	r1, 800517e <SAI_InitI2S+0x52>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005164:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005166:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800516a:	6644      	str	r4, [r0, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 800516c:	2a03      	cmp	r2, #3
 800516e:	d83f      	bhi.n	80051f0 <SAI_InitI2S+0xc4>
 8005170:	e8df f002 	tbb	[pc, r2]
 8005174:	33281e0b 	.word	0x33281e0b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005178:	2401      	movs	r4, #1
 800517a:	6504      	str	r4, [r0, #80]	; 0x50
 800517c:	e7e5      	b.n	800514a <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800517e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8005182:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005184:	2400      	movs	r4, #0
 8005186:	6644      	str	r4, [r0, #100]	; 0x64
 8005188:	e7f0      	b.n	800516c <SAI_InitI2S+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800518a:	2480      	movs	r4, #128	; 0x80
 800518c:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	015c      	lsls	r4, r3, #5
 8005192:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800519c:	2300      	movs	r3, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800519e:	2902      	cmp	r1, #2
 80051a0:	d12c      	bne.n	80051fc <SAI_InitI2S+0xd0>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80051a2:	2a01      	cmp	r2, #1
 80051a4:	d026      	beq.n	80051f4 <SAI_InitI2S+0xc8>
    {
      hsai->SlotInit.FirstBitOffset = 16;
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80051a6:	2a02      	cmp	r2, #2
 80051a8:	d128      	bne.n	80051fc <SAI_InitI2S+0xd0>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80051aa:	2208      	movs	r2, #8
 80051ac:	6682      	str	r2, [r0, #104]	; 0x68
 80051ae:	e025      	b.n	80051fc <SAI_InitI2S+0xd0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80051b0:	2480      	movs	r4, #128	; 0x80
 80051b2:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	019d      	lsls	r5, r3, #6
 80051b8:	6545      	str	r5, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80051ba:	015b      	lsls	r3, r3, #5
 80051bc:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051be:	66c4      	str	r4, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	2300      	movs	r3, #0
      break;
 80051c2:	e7ec      	b.n	800519e <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80051c4:	24c0      	movs	r4, #192	; 0xc0
 80051c6:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	019c      	lsls	r4, r3, #6
 80051cc:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80051ce:	015b      	lsls	r3, r3, #5
 80051d0:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80051d6:	2300      	movs	r3, #0
      break;
 80051d8:	e7e1      	b.n	800519e <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80051da:	24e0      	movs	r4, #224	; 0xe0
 80051dc:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	019c      	lsls	r4, r3, #6
 80051e2:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80051e4:	015b      	lsls	r3, r3, #5
 80051e6:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2300      	movs	r3, #0
      break;
 80051ee:	e7d6      	b.n	800519e <SAI_InitI2S+0x72>
      status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e7d4      	b.n	800519e <SAI_InitI2S+0x72>
      hsai->SlotInit.FirstBitOffset = 16;
 80051f4:	2110      	movs	r1, #16
 80051f6:	6681      	str	r1, [r0, #104]	; 0x68
 80051f8:	e7d5      	b.n	80051a6 <SAI_InitI2S+0x7a>
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
    }
  }
  return status;
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	bc30      	pop	{r4, r5}
 8005200:	4770      	bx	lr

08005202 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005202:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005204:	2400      	movs	r4, #0
 8005206:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005208:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800520a:	6845      	ldr	r5, [r0, #4]
 800520c:	2d02      	cmp	r5, #2
 800520e:	bf14      	ite	ne
 8005210:	2400      	movne	r4, #0
 8005212:	2401      	moveq	r4, #1
 8005214:	2d00      	cmp	r5, #0
 8005216:	bf08      	it	eq
 8005218:	2401      	moveq	r4, #1
 800521a:	b1c4      	cbz	r4, 800524e <SAI_InitPCM+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800521c:	2401      	movs	r4, #1
 800521e:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005220:	2400      	movs	r4, #0
 8005222:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005224:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8005228:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800522a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800522e:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8005230:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8005232:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005234:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005238:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800523a:	2904      	cmp	r1, #4
 800523c:	d00a      	beq.n	8005254 <SAI_InitPCM+0x52>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800523e:	210d      	movs	r1, #13
 8005240:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 8005242:	2a03      	cmp	r2, #3
 8005244:	d829      	bhi.n	800529a <SAI_InitPCM+0x98>
 8005246:	e8df f002 	tbb	[pc, r2]
 800524a:	1108      	.short	0x1108
 800524c:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800524e:	2400      	movs	r4, #0
 8005250:	6504      	str	r4, [r0, #80]	; 0x50
 8005252:	e7e5      	b.n	8005220 <SAI_InitPCM+0x1e>
      hsai->FrameInit.ActiveFrameLength = 1;
 8005254:	2101      	movs	r1, #1
 8005256:	6581      	str	r1, [r0, #88]	; 0x58
 8005258:	e7f3      	b.n	8005242 <SAI_InitPCM+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800525a:	2280      	movs	r2, #128	; 0x80
 800525c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005262:	2340      	movs	r3, #64	; 0x40
 8005264:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8005268:	bc30      	pop	{r4, r5}
 800526a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005270:	015b      	lsls	r3, r3, #5
 8005272:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005274:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2000      	movs	r0, #0
      break;
 8005278:	e7f6      	b.n	8005268 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800527a:	22c0      	movs	r2, #192	; 0xc0
 800527c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800527e:	015b      	lsls	r3, r3, #5
 8005280:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005286:	2000      	movs	r0, #0
      break;
 8005288:	e7ee      	b.n	8005268 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800528a:	22e0      	movs	r2, #224	; 0xe0
 800528c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800528e:	015b      	lsls	r3, r3, #5
 8005290:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2000      	movs	r0, #0
      break;
 8005298:	e7e6      	b.n	8005268 <SAI_InitPCM+0x66>
      status = HAL_ERROR;
 800529a:	2001      	movs	r0, #1
 800529c:	e7e4      	b.n	8005268 <SAI_InitPCM+0x66>

0800529e <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 800529e:	2901      	cmp	r1, #1
 80052a0:	d00a      	beq.n	80052b8 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80052a2:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80052a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052a6:	2a08      	cmp	r2, #8
 80052a8:	d008      	beq.n	80052bc <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80052aa:	6842      	ldr	r2, [r0, #4]
 80052ac:	3a02      	subs	r2, #2
 80052ae:	2a01      	cmp	r2, #1
 80052b0:	d90c      	bls.n	80052cc <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80052b2:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 80052b6:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 80052b8:	2309      	movs	r3, #9
 80052ba:	e7f3      	b.n	80052a4 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80052bc:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80052be:	2a01      	cmp	r2, #1
 80052c0:	bf18      	it	ne
 80052c2:	2a03      	cmpne	r2, #3
 80052c4:	d1f1      	bne.n	80052aa <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 80052c6:	f043 0310 	orr.w	r3, r3, #16
 80052ca:	e7ee      	b.n	80052aa <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80052cc:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 80052d0:	4770      	bx	lr
	...

080052d4 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80052d4:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <SAI_Disable+0x3c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a0e      	ldr	r2, [pc, #56]	; (8005314 <SAI_Disable+0x40>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0b1b      	lsrs	r3, r3, #12
 80052e0:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80052e2:	6801      	ldr	r1, [r0, #0]
 80052e4:	680a      	ldr	r2, [r1, #0]
 80052e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052ea:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80052ec:	b13b      	cbz	r3, 80052fe <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 80052ee:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80052f0:	6802      	ldr	r2, [r0, #0]
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80052f8:	d1f8      	bne.n	80052ec <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2000      	movs	r0, #0

  return status;
}
 80052fc:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80052fe:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8005302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005306:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 800530a:	2003      	movs	r0, #3
      break;
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000014 	.word	0x20000014
 8005314:	95cbec1b 	.word	0x95cbec1b

08005318 <HAL_SAI_Init>:
{
 8005318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 800531c:	2800      	cmp	r0, #0
 800531e:	f000 81cd 	beq.w	80056bc <HAL_SAI_Init+0x3a4>
 8005322:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005324:	f7fb f9d2 	bl	80006cc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005328:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800532c:	2b01      	cmp	r3, #1
 800532e:	d025      	beq.n	800537c <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	49b1      	ldr	r1, [pc, #708]	; (80055f8 <HAL_SAI_Init+0x2e0>)
 8005334:	4ab1      	ldr	r2, [pc, #708]	; (80055fc <HAL_SAI_Init+0x2e4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	bf18      	it	ne
 800533a:	428b      	cmpne	r3, r1
 800533c:	d030      	beq.n	80053a0 <HAL_SAI_Init+0x88>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800533e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005342:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005346:	4293      	cmp	r3, r2
 8005348:	bf18      	it	ne
 800534a:	428b      	cmpne	r3, r1
 800534c:	d045      	beq.n	80053da <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800534e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005356:	4293      	cmp	r3, r2
 8005358:	bf18      	it	ne
 800535a:	428b      	cmpne	r3, r1
 800535c:	d03f      	beq.n	80053de <HAL_SAI_Init+0xc6>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800535e:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8005362:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 8005366:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800536a:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 800536e:	4293      	cmp	r3, r2
 8005370:	bf18      	it	ne
 8005372:	428b      	cmpne	r3, r1
 8005374:	f040 81a8 	bne.w	80056c8 <HAL_SAI_Init+0x3b0>
    SaiBaseAddress = SAI4;
 8005378:	4ea1      	ldr	r6, [pc, #644]	; (8005600 <HAL_SAI_Init+0x2e8>)
 800537a:	e012      	b.n	80053a2 <HAL_SAI_Init+0x8a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	499e      	ldr	r1, [pc, #632]	; (80055f8 <HAL_SAI_Init+0x2e0>)
 8005380:	4aa0      	ldr	r2, [pc, #640]	; (8005604 <HAL_SAI_Init+0x2ec>)
 8005382:	428b      	cmp	r3, r1
 8005384:	bf18      	it	ne
 8005386:	4293      	cmpne	r3, r2
 8005388:	f040 819c 	bne.w	80056c4 <HAL_SAI_Init+0x3ac>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800538c:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800538e:	2b01      	cmp	r3, #1
 8005390:	d001      	beq.n	8005396 <HAL_SAI_Init+0x7e>
      return HAL_ERROR;
 8005392:	2501      	movs	r5, #1
 8005394:	e193      	b.n	80056be <HAL_SAI_Init+0x3a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005396:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0c9      	beq.n	8005330 <HAL_SAI_Init+0x18>
      return HAL_ERROR;
 800539c:	2501      	movs	r5, #1
 800539e:	e18e      	b.n	80056be <HAL_SAI_Init+0x3a6>
    SaiBaseAddress = SAI1;
 80053a0:	4e99      	ldr	r6, [pc, #612]	; (8005608 <HAL_SAI_Init+0x2f0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 80053a2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80053a6:	b1e3      	cbz	r3, 80053e2 <HAL_SAI_Init+0xca>
  if(SAI_Disable(hsai) != HAL_OK)
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7ff ff93 	bl	80052d4 <SAI_Disable>
 80053ae:	4605      	mov	r5, r0
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f040 818b 	bne.w	80056cc <HAL_SAI_Init+0x3b4>
  hsai->State = HAL_SAI_STATE_BUSY;
 80053b6:	2302      	movs	r3, #2
 80053b8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 80053bc:	68e3      	ldr	r3, [r4, #12]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d017      	beq.n	80053f2 <HAL_SAI_Init+0xda>
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d013      	beq.n	80053ee <HAL_SAI_Init+0xd6>
      tmpregisterGCR = 0;
 80053c6:	2200      	movs	r2, #0
  switch (hsai->Init.Synchro)
 80053c8:	68a3      	ldr	r3, [r4, #8]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d812      	bhi.n	80053f6 <HAL_SAI_Init+0xde>
 80053d0:	e8df f003 	tbb	[pc, r3]
 80053d4:	1b161325 	.word	0x1b161325
 80053d8:	20          	.byte	0x20
 80053d9:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 80053da:	4e8c      	ldr	r6, [pc, #560]	; (800560c <HAL_SAI_Init+0x2f4>)
 80053dc:	e7e1      	b.n	80053a2 <HAL_SAI_Init+0x8a>
    SaiBaseAddress = SAI3;
 80053de:	4e8c      	ldr	r6, [pc, #560]	; (8005610 <HAL_SAI_Init+0x2f8>)
 80053e0:	e7df      	b.n	80053a2 <HAL_SAI_Init+0x8a>
    hsai->Lock = HAL_UNLOCKED;
 80053e2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 80053e6:	4620      	mov	r0, r4
 80053e8:	f005 fb8a 	bl	800ab00 <HAL_SAI_MspInit>
 80053ec:	e7dc      	b.n	80053a8 <HAL_SAI_Init+0x90>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80053ee:	2220      	movs	r2, #32
      break;
 80053f0:	e7ea      	b.n	80053c8 <HAL_SAI_Init+0xb0>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80053f2:	2210      	movs	r2, #16
 80053f4:	e7e8      	b.n	80053c8 <HAL_SAI_Init+0xb0>
      syncen_bits = 0;
 80053f6:	2700      	movs	r7, #0
 80053f8:	e013      	b.n	8005422 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80053fa:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80053fe:	e010      	b.n	8005422 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005400:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005404:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005408:	e00b      	b.n	8005422 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800540a:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800540e:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005412:	e006      	b.n	8005422 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8005414:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005418:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800541c:	e001      	b.n	8005422 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800541e:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 8005422:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005424:	6a23      	ldr	r3, [r4, #32]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d043      	beq.n	80054b2 <HAL_SAI_Init+0x19a>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	4972      	ldr	r1, [pc, #456]	; (80055f8 <HAL_SAI_Init+0x2e0>)
 800542e:	4a73      	ldr	r2, [pc, #460]	; (80055fc <HAL_SAI_Init+0x2e4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	bf18      	it	ne
 8005434:	428b      	cmpne	r3, r1
 8005436:	f000 80c5 	beq.w	80055c4 <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
 800543a:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	4975      	ldr	r1, [pc, #468]	; (8005614 <HAL_SAI_Init+0x2fc>)
 8005440:	4a75      	ldr	r2, [pc, #468]	; (8005618 <HAL_SAI_Init+0x300>)
 8005442:	4293      	cmp	r3, r2
 8005444:	bf18      	it	ne
 8005446:	428b      	cmpne	r3, r1
 8005448:	f000 80c1 	beq.w	80055ce <HAL_SAI_Init+0x2b6>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	4973      	ldr	r1, [pc, #460]	; (800561c <HAL_SAI_Init+0x304>)
 8005450:	4a73      	ldr	r2, [pc, #460]	; (8005620 <HAL_SAI_Init+0x308>)
 8005452:	4293      	cmp	r3, r2
 8005454:	bf18      	it	ne
 8005456:	428b      	cmpne	r3, r1
 8005458:	f000 80be 	beq.w	80055d8 <HAL_SAI_Init+0x2c0>
    if (hsai->Instance == SAI4_Block_A)
 800545c:	6822      	ldr	r2, [r4, #0]
 800545e:	4b69      	ldr	r3, [pc, #420]	; (8005604 <HAL_SAI_Init+0x2ec>)
 8005460:	429a      	cmp	r2, r3
 8005462:	f000 80be 	beq.w	80055e2 <HAL_SAI_Init+0x2ca>
    if (hsai->Instance == SAI4_Block_B)
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	4b6e      	ldr	r3, [pc, #440]	; (8005624 <HAL_SAI_Init+0x30c>)
 800546a:	429a      	cmp	r2, r3
 800546c:	f000 80be 	beq.w	80055ec <HAL_SAI_Init+0x2d4>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005470:	69a3      	ldr	r3, [r4, #24]
 8005472:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005476:	f000 80df 	beq.w	8005638 <HAL_SAI_Init+0x320>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800547a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800547c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005480:	f000 80e4 	beq.w	800564c <HAL_SAI_Init+0x334>
 8005484:	2301      	movs	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005486:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800548a:	0041      	lsls	r1, r0, #1
 800548c:	6a22      	ldr	r2, [r4, #32]
 800548e:	fb03 f302 	mul.w	r3, r3, r2
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8005498:	4b63      	ldr	r3, [pc, #396]	; (8005628 <HAL_SAI_Init+0x310>)
 800549a:	fba3 2301 	umull	r2, r3, r3, r1
 800549e:	08db      	lsrs	r3, r3, #3
 80054a0:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 80054a2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80054a6:	0042      	lsls	r2, r0, #1
 80054a8:	1a8a      	subs	r2, r1, r2
 80054aa:	2a08      	cmp	r2, #8
 80054ac:	d901      	bls.n	80054b2 <HAL_SAI_Init+0x19a>
      hsai->Init.Mckdiv += 1U;
 80054ae:	3301      	adds	r3, #1
 80054b0:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80054b2:	6862      	ldr	r2, [r4, #4]
 80054b4:	2a02      	cmp	r2, #2
 80054b6:	bf14      	ite	ne
 80054b8:	2300      	movne	r3, #0
 80054ba:	2301      	moveq	r3, #1
 80054bc:	2a00      	cmp	r2, #0
 80054be:	bf08      	it	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80c7 	beq.w	8005656 <HAL_SAI_Init+0x33e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80054c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	f000 80c0 	beq.w	8005650 <HAL_SAI_Init+0x338>
 80054d0:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80054d4:	f7fb f8fa 	bl	80006cc <HAL_GetREVID>
 80054d8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80054dc:	f0c0 80c4 	bcc.w	8005668 <HAL_SAI_Init+0x350>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	6811      	ldr	r1, [r2, #0]
 80054e4:	4b51      	ldr	r3, [pc, #324]	; (800562c <HAL_SAI_Init+0x314>)
 80054e6:	400b      	ands	r3, r1
 80054e8:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054ea:	6821      	ldr	r1, [r4, #0]
 80054ec:	680a      	ldr	r2, [r1, #0]
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80054f2:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054f6:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054f8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80054fa:	4303      	orrs	r3, r0
 80054fc:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005500:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005502:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8005504:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005506:	6960      	ldr	r0, [r4, #20]
 8005508:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800550a:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800550c:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800550e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005510:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005514:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005516:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005518:	6920      	ldr	r0, [r4, #16]
 800551a:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	6851      	ldr	r1, [r2, #4]
 8005524:	4b42      	ldr	r3, [pc, #264]	; (8005630 <HAL_SAI_Init+0x318>)
 8005526:	400b      	ands	r3, r1
 8005528:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800552a:	6821      	ldr	r1, [r4, #0]
 800552c:	684a      	ldr	r2, [r1, #4]
 800552e:	69e3      	ldr	r3, [r4, #28]
 8005530:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005532:	4303      	orrs	r3, r0
 8005534:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005536:	4303      	orrs	r3, r0
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800553c:	6822      	ldr	r2, [r4, #0]
 800553e:	6891      	ldr	r1, [r2, #8]
 8005540:	4b3c      	ldr	r3, [pc, #240]	; (8005634 <HAL_SAI_Init+0x31c>)
 8005542:	400b      	ands	r3, r1
 8005544:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005546:	6820      	ldr	r0, [r4, #0]
 8005548:	6882      	ldr	r2, [r0, #8]
 800554a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800554c:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 800554e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005550:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 8005552:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8005554:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 8005556:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8005558:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800555a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800555c:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 800555e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005562:	4313      	orrs	r3, r2
 8005564:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	68d3      	ldr	r3, [r2, #12]
 800556a:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 800556e:	f023 030f 	bic.w	r3, r3, #15
 8005572:	041b      	lsls	r3, r3, #16
 8005574:	0c1b      	lsrs	r3, r3, #16
 8005576:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005578:	6820      	ldr	r0, [r4, #0]
 800557a:	68c2      	ldr	r2, [r0, #12]
 800557c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800557e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005580:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005582:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005584:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005588:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800558a:	3901      	subs	r1, #1
 800558c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005590:	4313      	orrs	r3, r2
 8005592:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	4918      	ldr	r1, [pc, #96]	; (80055f8 <HAL_SAI_Init+0x2e0>)
 8005598:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <HAL_SAI_Init+0x2ec>)
 800559a:	4293      	cmp	r3, r2
 800559c:	bf18      	it	ne
 800559e:	428b      	cmpne	r3, r1
 80055a0:	d107      	bne.n	80055b2 <HAL_SAI_Init+0x29a>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80055a2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80055aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d079      	beq.n	80056a6 <HAL_SAI_Init+0x38e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 80055b8:	2201      	movs	r2, #1
 80055ba:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 80055be:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  return HAL_OK;
 80055c2:	e07c      	b.n	80056be <HAL_SAI_Init+0x3a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80055c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80055c8:	f7ff fb8c 	bl	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 80055cc:	e736      	b.n	800543c <HAL_SAI_Init+0x124>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80055ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80055d2:	f7ff fb87 	bl	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 80055d6:	e739      	b.n	800544c <HAL_SAI_Init+0x134>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80055d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80055dc:	f7ff fb82 	bl	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 80055e0:	e73c      	b.n	800545c <HAL_SAI_Init+0x144>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80055e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80055e6:	f7ff fb7d 	bl	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 80055ea:	e73c      	b.n	8005466 <HAL_SAI_Init+0x14e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80055ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80055f0:	f7ff fb78 	bl	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 80055f4:	e73c      	b.n	8005470 <HAL_SAI_Init+0x158>
 80055f6:	bf00      	nop
 80055f8:	40015804 	.word	0x40015804
 80055fc:	40015824 	.word	0x40015824
 8005600:	58005400 	.word	0x58005400
 8005604:	58005404 	.word	0x58005404
 8005608:	40015800 	.word	0x40015800
 800560c:	40015c00 	.word	0x40015c00
 8005610:	40016000 	.word	0x40016000
 8005614:	40015c04 	.word	0x40015c04
 8005618:	40015c24 	.word	0x40015c24
 800561c:	40016004 	.word	0x40016004
 8005620:	40016024 	.word	0x40016024
 8005624:	58005424 	.word	0x58005424
 8005628:	cccccccd 	.word	0xcccccccd
 800562c:	f005c010 	.word	0xf005c010
 8005630:	ffff1ff0 	.word	0xffff1ff0
 8005634:	fff88000 	.word	0xfff88000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8005638:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800563c:	0041      	lsls	r1, r0, #1
 800563e:	6a22      	ldr	r2, [r4, #32]
 8005640:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005642:	fb03 f302 	mul.w	r3, r3, r2
 8005646:	fbb1 f1f3 	udiv	r1, r1, r3
 800564a:	e725      	b.n	8005498 <HAL_SAI_Init+0x180>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800564c:	2302      	movs	r3, #2
 800564e:	e71a      	b.n	8005486 <HAL_SAI_Init+0x16e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005650:	f04f 0800 	mov.w	r8, #0
 8005654:	e73e      	b.n	80054d4 <HAL_SAI_Init+0x1bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005656:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005658:	2b01      	cmp	r3, #1
 800565a:	d002      	beq.n	8005662 <HAL_SAI_Init+0x34a>
 800565c:	f04f 0800 	mov.w	r8, #0
 8005660:	e738      	b.n	80054d4 <HAL_SAI_Init+0x1bc>
 8005662:	f44f 7800 	mov.w	r8, #512	; 0x200
 8005666:	e735      	b.n	80054d4 <HAL_SAI_Init+0x1bc>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005668:	6822      	ldr	r2, [r4, #0]
 800566a:	6811      	ldr	r1, [r2, #0]
 800566c:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <HAL_SAI_Init+0x3b8>)
 800566e:	400b      	ands	r3, r1
 8005670:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005672:	6821      	ldr	r1, [r4, #0]
 8005674:	680a      	ldr	r2, [r1, #0]
 8005676:	6863      	ldr	r3, [r4, #4]
 8005678:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800567a:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800567c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800567e:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005680:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005682:	4303      	orrs	r3, r0
 8005684:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005688:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800568a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800568c:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800568e:	6967      	ldr	r7, [r4, #20]
 8005690:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005692:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005694:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005696:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005698:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 800569c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800569e:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80056a0:	4313      	orrs	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
 80056a4:	e73c      	b.n	8005520 <HAL_SAI_Init+0x208>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80056a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80056a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80056aa:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80056ac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80056b0:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80056b2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	6473      	str	r3, [r6, #68]	; 0x44
 80056ba:	e77a      	b.n	80055b2 <HAL_SAI_Init+0x29a>
    return HAL_ERROR;
 80056bc:	2501      	movs	r5, #1
}
 80056be:	4628      	mov	r0, r5
 80056c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80056c4:	2501      	movs	r5, #1
 80056c6:	e7fa      	b.n	80056be <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 80056c8:	2501      	movs	r5, #1
 80056ca:	e7f8      	b.n	80056be <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 80056cc:	2501      	movs	r5, #1
 80056ce:	e7f6      	b.n	80056be <HAL_SAI_Init+0x3a6>
 80056d0:	f805c010 	.word	0xf805c010

080056d4 <HAL_SAI_InitProtocol>:
{
 80056d4:	b510      	push	{r4, lr}
 80056d6:	4604      	mov	r4, r0
  switch (protocol)
 80056d8:	2904      	cmp	r1, #4
 80056da:	d811      	bhi.n	8005700 <HAL_SAI_InitProtocol+0x2c>
 80056dc:	e8df f001 	tbb	[pc, r1]
 80056e0:	08030303 	.word	0x08030303
 80056e4:	08          	.byte	0x08
 80056e5:	00          	.byte	0x00
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff fd20 	bl	800512c <SAI_InitI2S>
  if (status == HAL_OK)
 80056ec:	b120      	cbz	r0, 80056f8 <HAL_SAI_InitProtocol+0x24>
}
 80056ee:	bd10      	pop	{r4, pc}
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7ff fd86 	bl	8005202 <SAI_InitPCM>
      break;
 80056f6:	e7f9      	b.n	80056ec <HAL_SAI_InitProtocol+0x18>
    status = HAL_SAI_Init(hsai);
 80056f8:	4620      	mov	r0, r4
 80056fa:	f7ff fe0d 	bl	8005318 <HAL_SAI_Init>
 80056fe:	e7f6      	b.n	80056ee <HAL_SAI_InitProtocol+0x1a>
      status = HAL_ERROR;
 8005700:	2001      	movs	r0, #1
 8005702:	e7f4      	b.n	80056ee <HAL_SAI_InitProtocol+0x1a>

08005704 <HAL_SAI_Transmit_DMA>:
{
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	4604      	mov	r4, r0
 8005708:	460e      	mov	r6, r1
 800570a:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800570c:	f7fa ffc4 	bl	8000698 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8005710:	fab5 f385 	clz	r3, r5
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2e00      	cmp	r6, #0
 8005718:	bf08      	it	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d165      	bne.n	80057ec <HAL_SAI_Transmit_DMA+0xe8>
 8005720:	4607      	mov	r7, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 8005722:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	d162      	bne.n	80057f2 <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 800572c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8005730:	2b01      	cmp	r3, #1
 8005732:	d060      	beq.n	80057f6 <HAL_SAI_Transmit_DMA+0xf2>
 8005734:	2301      	movs	r3, #1
 8005736:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 800573a:	67a6      	str	r6, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 800573c:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8005740:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005744:	2300      	movs	r3, #0
 8005746:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800574a:	2212      	movs	r2, #18
 800574c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005750:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005754:	4929      	ldr	r1, [pc, #164]	; (80057fc <HAL_SAI_Transmit_DMA+0xf8>)
 8005756:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005758:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800575c:	4928      	ldr	r1, [pc, #160]	; (8005800 <HAL_SAI_Transmit_DMA+0xfc>)
 800575e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005760:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005764:	4927      	ldr	r1, [pc, #156]	; (8005804 <HAL_SAI_Transmit_DMA+0x100>)
 8005766:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8005768:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800576c:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8005774:	321c      	adds	r2, #28
 8005776:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005778:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800577c:	f7fc fc14 	bl	8001fa8 <HAL_DMA_Start_IT>
 8005780:	4605      	mov	r5, r0
 8005782:	bb10      	cbnz	r0, 80057ca <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005784:	2100      	movs	r1, #0
 8005786:	4620      	mov	r0, r4
 8005788:	f7ff fd89 	bl	800529e <SAI_InterruptFlag>
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	6913      	ldr	r3, [r2, #16]
 8005790:	4318      	orrs	r0, r3
 8005792:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579c:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 80057a6:	d115      	bne.n	80057d4 <HAL_SAI_Transmit_DMA+0xd0>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80057a8:	f7fa ff76 	bl	8000698 <HAL_GetTick>
 80057ac:	1bc0      	subs	r0, r0, r7
 80057ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80057b2:	d9f4      	bls.n	800579e <HAL_SAI_Transmit_DMA+0x9a>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80057b4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 80057c0:	2300      	movs	r3, #0
 80057c2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 80057c6:	2503      	movs	r5, #3
 80057c8:	e011      	b.n	80057ee <HAL_SAI_Transmit_DMA+0xea>
      __HAL_UNLOCK(hsai);
 80057ca:	2300      	movs	r3, #0
 80057cc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 80057d0:	2501      	movs	r5, #1
 80057d2:	e00c      	b.n	80057ee <HAL_SAI_Transmit_DMA+0xea>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80057da:	d103      	bne.n	80057e4 <HAL_SAI_Transmit_DMA+0xe0>
      __HAL_SAI_ENABLE(hsai);
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80057e2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80057e4:	2300      	movs	r3, #0
 80057e6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 80057ea:	e000      	b.n	80057ee <HAL_SAI_Transmit_DMA+0xea>
    return  HAL_ERROR;
 80057ec:	2501      	movs	r5, #1
}
 80057ee:	4628      	mov	r0, r5
 80057f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80057f2:	2502      	movs	r5, #2
 80057f4:	e7fb      	b.n	80057ee <HAL_SAI_Transmit_DMA+0xea>
    __HAL_LOCK(hsai);
 80057f6:	2502      	movs	r5, #2
 80057f8:	e7f9      	b.n	80057ee <HAL_SAI_Transmit_DMA+0xea>
 80057fa:	bf00      	nop
 80057fc:	08005917 	.word	0x08005917
 8005800:	080058dd 	.word	0x080058dd
 8005804:	08005965 	.word	0x08005965

08005808 <HAL_SAI_Receive_DMA>:
{
 8005808:	b538      	push	{r3, r4, r5, lr}
  if ((pData == NULL) || (Size == 0U))
 800580a:	4614      	mov	r4, r2
 800580c:	fab2 f282 	clz	r2, r2
 8005810:	0952      	lsrs	r2, r2, #5
 8005812:	2900      	cmp	r1, #0
 8005814:	bf08      	it	eq
 8005816:	2201      	moveq	r2, #1
 8005818:	2a00      	cmp	r2, #0
 800581a:	d151      	bne.n	80058c0 <HAL_SAI_Receive_DMA+0xb8>
  if (hsai->State == HAL_SAI_STATE_READY)
 800581c:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	d14f      	bne.n	80058c6 <HAL_SAI_Receive_DMA+0xbe>
    __HAL_LOCK(hsai);
 8005826:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800582a:	2b01      	cmp	r3, #1
 800582c:	d04d      	beq.n	80058ca <HAL_SAI_Receive_DMA+0xc2>
 800582e:	4623      	mov	r3, r4
 8005830:	4604      	mov	r4, r0
 8005832:	2201      	movs	r2, #1
 8005834:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 8005838:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 800583a:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 800583e:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005842:	2300      	movs	r3, #0
 8005844:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005848:	2222      	movs	r2, #34	; 0x22
 800584a:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800584e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005852:	491f      	ldr	r1, [pc, #124]	; (80058d0 <HAL_SAI_Receive_DMA+0xc8>)
 8005854:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005856:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800585a:	491e      	ldr	r1, [pc, #120]	; (80058d4 <HAL_SAI_Receive_DMA+0xcc>)
 800585c:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800585e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005862:	491d      	ldr	r1, [pc, #116]	; (80058d8 <HAL_SAI_Receive_DMA+0xd0>)
 8005864:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8005866:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800586a:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800586c:	6801      	ldr	r1, [r0, #0]
 800586e:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8005872:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005874:	311c      	adds	r1, #28
 8005876:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800587a:	f7fc fb95 	bl	8001fa8 <HAL_DMA_Start_IT>
 800587e:	4605      	mov	r5, r0
 8005880:	b9c8      	cbnz	r0, 80058b6 <HAL_SAI_Receive_DMA+0xae>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005882:	2100      	movs	r1, #0
 8005884:	4620      	mov	r0, r4
 8005886:	f7ff fd0a 	bl	800529e <SAI_InterruptFlag>
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	6913      	ldr	r3, [r2, #16]
 800588e:	4318      	orrs	r0, r3
 8005890:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	6813      	ldr	r3, [r2, #0]
 8005896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800589a:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80058a4:	d103      	bne.n	80058ae <HAL_SAI_Receive_DMA+0xa6>
      __HAL_SAI_ENABLE(hsai);
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80058ac:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80058ae:	2300      	movs	r3, #0
 80058b0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 80058b4:	e005      	b.n	80058c2 <HAL_SAI_Receive_DMA+0xba>
      __HAL_UNLOCK(hsai);
 80058b6:	2300      	movs	r3, #0
 80058b8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 80058bc:	2501      	movs	r5, #1
 80058be:	e000      	b.n	80058c2 <HAL_SAI_Receive_DMA+0xba>
    return  HAL_ERROR;
 80058c0:	2501      	movs	r5, #1
}
 80058c2:	4628      	mov	r0, r5
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80058c6:	2502      	movs	r5, #2
 80058c8:	e7fb      	b.n	80058c2 <HAL_SAI_Receive_DMA+0xba>
    __HAL_LOCK(hsai);
 80058ca:	2502      	movs	r5, #2
 80058cc:	e7f9      	b.n	80058c2 <HAL_SAI_Receive_DMA+0xba>
 80058ce:	bf00      	nop
 80058d0:	0800595b 	.word	0x0800595b
 80058d4:	08005921 	.word	0x08005921
 80058d8:	08005965 	.word	0x08005965

080058dc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80058dc:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058de:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80058e0:	69c3      	ldr	r3, [r0, #28]
 80058e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e6:	d012      	beq.n	800590e <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 80058e8:	2100      	movs	r1, #0
 80058ea:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	6813      	ldr	r3, [r2, #0]
 80058f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058f6:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7ff fcd0 	bl	800529e <SAI_InterruptFlag>
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	6913      	ldr	r3, [r2, #16]
 8005902:	ea23 0000 	bic.w	r0, r3, r0
 8005906:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005908:	2301      	movs	r3, #1
 800590a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800590e:	4620      	mov	r0, r4
 8005910:	f004 faaf 	bl	8009e72 <HAL_SAI_TxCpltCallback>
#endif
}
 8005914:	bd10      	pop	{r4, pc}

08005916 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005916:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005918:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800591a:	f004 faab 	bl	8009e74 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800591e:	bd08      	pop	{r3, pc}

08005920 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005920:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005922:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005924:	69c3      	ldr	r3, [r0, #28]
 8005926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592a:	d012      	beq.n	8005952 <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	6813      	ldr	r3, [r2, #0]
 8005930:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005934:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 8005936:	2100      	movs	r1, #0
 8005938:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800593c:	4620      	mov	r0, r4
 800593e:	f7ff fcae 	bl	800529e <SAI_InterruptFlag>
 8005942:	6822      	ldr	r2, [r4, #0]
 8005944:	6913      	ldr	r3, [r2, #16]
 8005946:	ea23 0000 	bic.w	r0, r3, r0
 800594a:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800594c:	2301      	movs	r3, #1
 800594e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005952:	4620      	mov	r0, r4
 8005954:	f004 fa8f 	bl	8009e76 <HAL_SAI_RxCpltCallback>
#endif
}
 8005958:	bd10      	pop	{r4, pc}

0800595a <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800595a:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800595c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800595e:	f004 fa8f 	bl	8009e80 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005962:	bd08      	pop	{r3, pc}

08005964 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005964:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005966:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005968:	f7fd f806 	bl	8002978 <HAL_DMA_GetError>
 800596c:	2802      	cmp	r0, #2
 800596e:	d016      	beq.n	800599e <SAI_DMAError+0x3a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005970:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005978:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	6813      	ldr	r3, [r2, #0]
 8005980:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005984:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005986:	4620      	mov	r0, r4
 8005988:	f7ff fca4 	bl	80052d4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800598c:	2301      	movs	r3, #1
 800598e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8005998:	4620      	mov	r0, r4
 800599a:	f004 fa69 	bl	8009e70 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800599e:	bd10      	pop	{r4, pc}

080059a0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80059a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	4604      	mov	r4, r0
 80059a8:	460d      	mov	r5, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80059aa:	f7fa fe75 	bl	8000698 <HAL_GetTick>
 80059ae:	4680      	mov	r8, r0
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80059b0:	2100      	movs	r1, #0
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	f003 fb45 	bl	8009042 <SDMMC_GetResponse>
 80059b8:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80059bc:	d167      	bne.n	8005a8e <SD_SendSDStatus+0xee>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80059be:	2140      	movs	r1, #64	; 0x40
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	f003 fc59 	bl	8009278 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80059c6:	4606      	mov	r6, r0
 80059c8:	b110      	cbz	r0, 80059d0 <SD_SendSDStatus+0x30>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80059ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059cc:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80059ce:	e060      	b.n	8005a92 <SD_SendSDStatus+0xf2>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80059d2:	0409      	lsls	r1, r1, #16
 80059d4:	6820      	ldr	r0, [r4, #0]
 80059d6:	f003 fd3d 	bl	8009454 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80059da:	4606      	mov	r6, r0
 80059dc:	b110      	cbz	r0, 80059e4 <SD_SendSDStatus+0x44>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80059de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059e0:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80059e2:	e056      	b.n	8005a92 <SD_SendSDStatus+0xf2>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059e8:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 80059ea:	2340      	movs	r3, #64	; 0x40
 80059ec:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80059ee:	2360      	movs	r3, #96	; 0x60
 80059f0:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80059f2:	2302      	movs	r3, #2
 80059f4:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80059fe:	4669      	mov	r1, sp
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	f003 fc27 	bl	8009254 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005a06:	6820      	ldr	r0, [r4, #0]
 8005a08:	f003 fde3 	bl	80095d2 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	b188      	cbz	r0, 8005a34 <SD_SendSDStatus+0x94>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a12:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 8005a14:	e03d      	b.n	8005a92 <SD_SendSDStatus+0xf2>
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
    {
      for(count = 0U; count < 8U; count++)
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005a16:	6820      	ldr	r0, [r4, #0]
 8005a18:	f003 faec 	bl	8008ff4 <SDMMC_ReadFIFO>
 8005a1c:	f845 0b04 	str.w	r0, [r5], #4
      for(count = 0U; count < 8U; count++)
 8005a20:	3701      	adds	r7, #1
 8005a22:	2f07      	cmp	r7, #7
 8005a24:	d9f7      	bls.n	8005a16 <SD_SendSDStatus+0x76>
        pData++;
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a26:	f7fa fe37 	bl	8000698 <HAL_GetTick>
 8005a2a:	eba0 0008 	sub.w	r0, r0, r8
 8005a2e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005a32:	d032      	beq.n	8005a9a <SD_SendSDStatus+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a38:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8005a3c:	d105      	bne.n	8005a4a <SD_SendSDStatus+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a40:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005a44:	d0ef      	beq.n	8005a26 <SD_SendSDStatus+0x86>
      for(count = 0U; count < 8U; count++)
 8005a46:	4637      	mov	r7, r6
 8005a48:	e7eb      	b.n	8005a22 <SD_SendSDStatus+0x82>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a4c:	f012 0f08 	tst.w	r2, #8
 8005a50:	d126      	bne.n	8005aa0 <SD_SendSDStatus+0x100>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a54:	f012 0f02 	tst.w	r2, #2
 8005a58:	d124      	bne.n	8005aa4 <SD_SendSDStatus+0x104>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	f013 0f20 	tst.w	r3, #32
 8005a60:	d122      	bne.n	8005aa8 <SD_SendSDStatus+0x108>
  else
  {
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a66:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005a6a:	d00d      	beq.n	8005a88 <SD_SendSDStatus+0xe8>
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005a6c:	f003 fac2 	bl	8008ff4 <SDMMC_ReadFIFO>
 8005a70:	f845 0b04 	str.w	r0, [r5], #4
    pData++;

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a74:	f7fa fe10 	bl	8000698 <HAL_GetTick>
 8005a78:	eba0 0008 	sub.w	r0, r0, r8
 8005a7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005a80:	d1ef      	bne.n	8005a62 <SD_SendSDStatus+0xc2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005a82:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005a86:	e004      	b.n	8005a92 <SD_SendSDStatus+0xf2>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005a88:	4b08      	ldr	r3, [pc, #32]	; (8005aac <SD_SendSDStatus+0x10c>)
 8005a8a:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005a8c:	e001      	b.n	8005a92 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a8e:	f44f 6600 	mov.w	r6, #2048	; 0x800
}
 8005a92:	4630      	mov	r0, r6
 8005a94:	b006      	add	sp, #24
 8005a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8005a9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005a9e:	e7f8      	b.n	8005a92 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005aa0:	2608      	movs	r6, #8
 8005aa2:	e7f6      	b.n	8005a92 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005aa4:	2602      	movs	r6, #2
 8005aa6:	e7f4      	b.n	8005a92 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005aa8:	2620      	movs	r6, #32
 8005aaa:	e7f2      	b.n	8005a92 <SD_SendSDStatus+0xf2>
 8005aac:	18000f3a 	.word	0x18000f3a

08005ab0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab4:	b088      	sub	sp, #32
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005aba:	f7fa fded 	bl	8000698 <HAL_GetTick>
 8005abe:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005ac6:	2108      	movs	r1, #8
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	f003 fbd5 	bl	8009278 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ace:	4605      	mov	r5, r0
 8005ad0:	b118      	cbz	r0, 8005ada <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	b008      	add	sp, #32
 8005ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005ada:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005adc:	0409      	lsls	r1, r1, #16
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	f003 fcb8 	bl	8009454 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d1f3      	bne.n	8005ad2 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aee:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8005af0:	2308      	movs	r3, #8
 8005af2:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005af4:	2330      	movs	r3, #48	; 0x30
 8005af6:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005af8:	2302      	movs	r3, #2
 8005afa:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b04:	a902      	add	r1, sp, #8
 8005b06:	6820      	ldr	r0, [r4, #0]
 8005b08:	f003 fba4 	bl	8009254 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	f003 fce9 	bl	80094e4 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b12:	4605      	mov	r5, r0
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d1dc      	bne.n	8005ad2 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8005b18:	4680      	mov	r8, r0
 8005b1a:	e005      	b.n	8005b28 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b1c:	f7fa fdbc 	bl	8000698 <HAL_GetTick>
 8005b20:	1b80      	subs	r0, r0, r6
 8005b22:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b26:	d048      	beq.n	8005bba <SD_FindSCR+0x10a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005b2c:	f240 532a 	movw	r3, #1322	; 0x52a
 8005b30:	421a      	tst	r2, r3
 8005b32:	d110      	bne.n	8005b56 <SD_FindSCR+0xa6>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005b34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b36:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005b3a:	d1ef      	bne.n	8005b1c <SD_FindSCR+0x6c>
 8005b3c:	f1b8 0f00 	cmp.w	r8, #0
 8005b40:	d1ec      	bne.n	8005b1c <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005b42:	f003 fa57 	bl	8008ff4 <SDMMC_ReadFIFO>
 8005b46:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	f003 fa53 	bl	8008ff4 <SDMMC_ReadFIFO>
 8005b4e:	9001      	str	r0, [sp, #4]
      index++;
 8005b50:	f108 0801 	add.w	r8, r8, #1
 8005b54:	e7e2      	b.n	8005b1c <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005b56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b58:	f013 0f08 	tst.w	r3, #8
 8005b5c:	d124      	bne.n	8005ba8 <SD_FindSCR+0xf8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005b5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b60:	f013 0f02 	tst.w	r3, #2
 8005b64:	d123      	bne.n	8005bae <SD_FindSCR+0xfe>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005b66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b68:	f013 0f20 	tst.w	r3, #32
 8005b6c:	d122      	bne.n	8005bb4 <SD_FindSCR+0x104>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b6e:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <SD_FindSCR+0x110>)
 8005b70:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b72:	9a01      	ldr	r2, [sp, #4]
 8005b74:	0213      	lsls	r3, r2, #8
 8005b76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b7e:	0a11      	lsrs	r1, r2, #8
 8005b80:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b84:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b86:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b8a:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005b8c:	9a00      	ldr	r2, [sp, #0]
 8005b8e:	0213      	lsls	r3, r2, #8
 8005b90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005b98:	0a11      	lsrs	r1, r2, #8
 8005b9a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005b9e:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ba0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ba4:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8005ba6:	e794      	b.n	8005ad2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005ba8:	2508      	movs	r5, #8
 8005baa:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005bac:	e791      	b.n	8005ad2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005bae:	2502      	movs	r5, #2
 8005bb0:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005bb2:	e78e      	b.n	8005ad2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005bb4:	2520      	movs	r5, #32
 8005bb6:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005bb8:	e78b      	b.n	8005ad2 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8005bba:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005bbe:	e788      	b.n	8005ad2 <SD_FindSCR+0x22>
 8005bc0:	18000f3a 	.word	0x18000f3a

08005bc4 <SD_WideBus_Enable>:
{
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005bca:	2100      	movs	r1, #0
 8005bcc:	9100      	str	r1, [sp, #0]
 8005bce:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bd0:	6800      	ldr	r0, [r0, #0]
 8005bd2:	f003 fa36 	bl	8009042 <SDMMC_GetResponse>
 8005bd6:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005bda:	d116      	bne.n	8005c0a <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8005bdc:	4669      	mov	r1, sp
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff ff66 	bl	8005ab0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005be4:	4603      	mov	r3, r0
 8005be6:	b990      	cbnz	r0, 8005c0e <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005be8:	9b01      	ldr	r3, [sp, #4]
 8005bea:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005bee:	d011      	beq.n	8005c14 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bf0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005bf2:	0409      	lsls	r1, r1, #16
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	f003 fc2d 	bl	8009454 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	b938      	cbnz	r0, 8005c0e <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005bfe:	2102      	movs	r1, #2
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	f003 fc56 	bl	80094b2 <SDMMC_CmdBusWidth>
 8005c06:	4603      	mov	r3, r0
 8005c08:	e001      	b.n	8005c0e <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	b002      	add	sp, #8
 8005c12:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005c18:	e7f9      	b.n	8005c0e <SD_WideBus_Enable+0x4a>

08005c1a <SD_WideBus_Disable>:
{
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005c20:	2100      	movs	r1, #0
 8005c22:	9100      	str	r1, [sp, #0]
 8005c24:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	f003 fa0b 	bl	8009042 <SDMMC_GetResponse>
 8005c2c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005c30:	d116      	bne.n	8005c60 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8005c32:	4669      	mov	r1, sp
 8005c34:	4620      	mov	r0, r4
 8005c36:	f7ff ff3b 	bl	8005ab0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	b990      	cbnz	r0, 8005c64 <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c3e:	9b01      	ldr	r3, [sp, #4]
 8005c40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005c44:	d011      	beq.n	8005c6a <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c46:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c48:	0409      	lsls	r1, r1, #16
 8005c4a:	6820      	ldr	r0, [r4, #0]
 8005c4c:	f003 fc02 	bl	8009454 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c50:	4603      	mov	r3, r0
 8005c52:	b938      	cbnz	r0, 8005c64 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005c54:	2100      	movs	r1, #0
 8005c56:	6820      	ldr	r0, [r4, #0]
 8005c58:	f003 fc2b 	bl	80094b2 <SDMMC_CmdBusWidth>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	e001      	b.n	8005c64 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	b002      	add	sp, #8
 8005c68:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005c6e:	e7f9      	b.n	8005c64 <SD_WideBus_Disable+0x4a>

08005c70 <SD_SendStatus>:
{
 8005c70:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8005c72:	b181      	cbz	r1, 8005c96 <SD_SendStatus+0x26>
 8005c74:	460d      	mov	r5, r1
 8005c76:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c78:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005c7a:	0409      	lsls	r1, r1, #16
 8005c7c:	6800      	ldr	r0, [r0, #0]
 8005c7e:	f003 fc8f 	bl	80095a0 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c82:	4606      	mov	r6, r0
 8005c84:	b108      	cbz	r0, 8005c8a <SD_SendStatus+0x1a>
}
 8005c86:	4630      	mov	r0, r6
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	f003 f9d8 	bl	8009042 <SDMMC_GetResponse>
 8005c92:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 8005c94:	e7f7      	b.n	8005c86 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8005c96:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8005c9a:	e7f4      	b.n	8005c86 <SD_SendStatus+0x16>

08005c9c <HAL_SD_ReadBlocks>:
{
 8005c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	460d      	mov	r5, r1
 8005ca6:	4616      	mov	r6, r2
 8005ca8:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005caa:	f7fa fcf5 	bl	8000698 <HAL_GetTick>
  if(NULL == pData)
 8005cae:	b16d      	cbz	r5, 8005ccc <HAL_SD_ReadBlocks+0x30>
 8005cb0:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005cb2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d00d      	beq.n	8005cd8 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cc2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005cc4:	2001      	movs	r0, #1
}
 8005cc6:	b006      	add	sp, #24
 8005cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ccc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cd2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	e7f6      	b.n	8005cc6 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005cdc:	19f3      	adds	r3, r6, r7
 8005cde:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d82d      	bhi.n	8005d40 <HAL_SD_ReadBlocks+0xa4>
    hsd->State = HAL_SD_STATE_BUSY;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	2200      	movs	r2, #0
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005cf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d000      	beq.n	8005cf8 <HAL_SD_ReadBlocks+0x5c>
      add *= 512U;
 8005cf6:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cfc:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005cfe:	027b      	lsls	r3, r7, #9
 8005d00:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d02:	2390      	movs	r3, #144	; 0x90
 8005d04:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d06:	2302      	movs	r3, #2
 8005d08:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005d0e:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d10:	4669      	mov	r1, sp
 8005d12:	6820      	ldr	r0, [r4, #0]
 8005d14:	f003 fa9e 	bl	8009254 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005d18:	6822      	ldr	r2, [r4, #0]
 8005d1a:	68d3      	ldr	r3, [r2, #12]
 8005d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d20:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005d22:	2f01      	cmp	r7, #1
 8005d24:	d912      	bls.n	8005d4c <HAL_SD_ReadBlocks+0xb0>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005d26:	2302      	movs	r3, #2
 8005d28:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	6820      	ldr	r0, [r4, #0]
 8005d2e:	f003 fad5 	bl	80092dc <SDMMC_CmdReadMultiBlock>
 8005d32:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d34:	f1ba 0f00 	cmp.w	sl, #0
 8005d38:	d110      	bne.n	8005d5c <HAL_SD_ReadBlocks+0xc0>
    dataremaining = config.DataLength;
 8005d3a:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d3e:	e024      	b.n	8005d8a <HAL_SD_ReadBlocks+0xee>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d46:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005d48:	2001      	movs	r0, #1
 8005d4a:	e7bc      	b.n	8005cc6 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005d50:	4631      	mov	r1, r6
 8005d52:	6820      	ldr	r0, [r4, #0]
 8005d54:	f003 faa9 	bl	80092aa <SDMMC_CmdReadSingleBlock>
 8005d58:	4682      	mov	sl, r0
 8005d5a:	e7eb      	b.n	8005d34 <HAL_SD_ReadBlocks+0x98>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	4a4c      	ldr	r2, [pc, #304]	; (8005e90 <HAL_SD_ReadBlocks+0x1f4>)
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d64:	ea43 030a 	orr.w	r3, r3, sl
 8005d68:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005d74:	e7a7      	b.n	8005cc6 <HAL_SD_ReadBlocks+0x2a>
        dataremaining -= 32U;
 8005d76:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005d7a:	f7fa fc8d 	bl	8000698 <HAL_GetTick>
 8005d7e:	eba0 0008 	sub.w	r0, r0, r8
 8005d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d84:	4298      	cmp	r0, r3
 8005d86:	d21e      	bcs.n	8005dc6 <HAL_SD_ReadBlocks+0x12a>
 8005d88:	b1eb      	cbz	r3, 8005dc6 <HAL_SD_ReadBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8e:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8005d92:	d126      	bne.n	8005de2 <HAL_SD_ReadBlocks+0x146>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d96:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005d9a:	d0ee      	beq.n	8005d7a <HAL_SD_ReadBlocks+0xde>
 8005d9c:	f1b9 0f1f 	cmp.w	r9, #31
 8005da0:	d9eb      	bls.n	8005d7a <HAL_SD_ReadBlocks+0xde>
        for(count = 0U; count < 8U; count++)
 8005da2:	4656      	mov	r6, sl
 8005da4:	2e07      	cmp	r6, #7
 8005da6:	d8e6      	bhi.n	8005d76 <HAL_SD_ReadBlocks+0xda>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	f003 f923 	bl	8008ff4 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005dae:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005db0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005db4:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005db6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005dba:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005dbc:	0e00      	lsrs	r0, r0, #24
 8005dbe:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 8005dc0:	3504      	adds	r5, #4
        for(count = 0U; count < 8U; count++)
 8005dc2:	3601      	adds	r6, #1
 8005dc4:	e7ee      	b.n	8005da4 <HAL_SD_ReadBlocks+0x108>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	4a31      	ldr	r2, [pc, #196]	; (8005e90 <HAL_SD_ReadBlocks+0x1f4>)
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005dcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dd2:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8005dde:	2003      	movs	r0, #3
 8005de0:	e771      	b.n	8005cc6 <HAL_SD_ReadBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de8:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005dee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005df2:	d004      	beq.n	8005dfe <HAL_SD_ReadBlocks+0x162>
 8005df4:	2f01      	cmp	r7, #1
 8005df6:	d902      	bls.n	8005dfe <HAL_SD_ReadBlocks+0x162>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005df8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d118      	bne.n	8005e30 <HAL_SD_ReadBlocks+0x194>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e02:	f012 0f08 	tst.w	r2, #8
 8005e06:	d124      	bne.n	8005e52 <HAL_SD_ReadBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0a:	f012 0f02 	tst.w	r2, #2
 8005e0e:	d12c      	bne.n	8005e6a <HAL_SD_ReadBlocks+0x1ce>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e12:	f012 0f20 	tst.w	r2, #32
 8005e16:	d034      	beq.n	8005e82 <HAL_SD_ReadBlocks+0x1e6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e18:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <HAL_SD_ReadBlocks+0x1f4>)
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005e1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e1e:	f043 0320 	orr.w	r3, r3, #32
 8005e22:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e24:	2001      	movs	r0, #1
 8005e26:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005e2e:	e74a      	b.n	8005cc6 <HAL_SD_ReadBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e30:	f003 faa0 	bl	8009374 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005e34:	4603      	mov	r3, r0
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d0e1      	beq.n	8005dfe <HAL_SD_ReadBlocks+0x162>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	4914      	ldr	r1, [pc, #80]	; (8005e90 <HAL_SD_ReadBlocks+0x1f4>)
 8005e3e:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005e40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e42:	4313      	orrs	r3, r2
 8005e44:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005e46:	2001      	movs	r0, #1
 8005e48:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005e50:	e739      	b.n	8005cc6 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e52:	4a0f      	ldr	r2, [pc, #60]	; (8005e90 <HAL_SD_ReadBlocks+0x1f4>)
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e58:	f043 0308 	orr.w	r3, r3, #8
 8005e5c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e5e:	2001      	movs	r0, #1
 8005e60:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e64:	2300      	movs	r3, #0
 8005e66:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005e68:	e72d      	b.n	8005cc6 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e6a:	4a09      	ldr	r2, [pc, #36]	; (8005e90 <HAL_SD_ReadBlocks+0x1f4>)
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e76:	2001      	movs	r0, #1
 8005e78:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005e80:	e721      	b.n	8005cc6 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e82:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <HAL_SD_ReadBlocks+0x1f8>)
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	e71a      	b.n	8005cc6 <HAL_SD_ReadBlocks+0x2a>
 8005e90:	1fe00fff 	.word	0x1fe00fff
 8005e94:	18000f3a 	.word	0x18000f3a

08005e98 <HAL_SD_WriteBlocks>:
{
 8005e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	b088      	sub	sp, #32
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	460d      	mov	r5, r1
 8005ea2:	4616      	mov	r6, r2
 8005ea4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005ea6:	f7fa fbf7 	bl	8000698 <HAL_GetTick>
  if(NULL == pData)
 8005eaa:	b16d      	cbz	r5, 8005ec8 <HAL_SD_WriteBlocks+0x30>
 8005eac:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005eae:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d00d      	beq.n	8005ed4 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005eb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ebe:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005ec0:	2001      	movs	r0, #1
}
 8005ec2:	b008      	add	sp, #32
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ece:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	e7f6      	b.n	8005ec2 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ed8:	19f3      	adds	r3, r6, r7
 8005eda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d82c      	bhi.n	8005f3a <HAL_SD_WriteBlocks+0xa2>
    hsd->State = HAL_SD_STATE_BUSY;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d000      	beq.n	8005ef4 <HAL_SD_WriteBlocks+0x5c>
      add *= 512U;
 8005ef2:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ef8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005efa:	027b      	lsls	r3, r7, #9
 8005efc:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005efe:	2390      	movs	r3, #144	; 0x90
 8005f00:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005f02:	2300      	movs	r3, #0
 8005f04:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005f06:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005f08:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005f0a:	a902      	add	r1, sp, #8
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	f003 f9a1 	bl	8009254 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005f12:	6822      	ldr	r2, [r4, #0]
 8005f14:	68d3      	ldr	r3, [r2, #12]
 8005f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1a:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005f1c:	2f01      	cmp	r7, #1
 8005f1e:	d912      	bls.n	8005f46 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005f20:	2320      	movs	r3, #32
 8005f22:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005f24:	4631      	mov	r1, r6
 8005f26:	6820      	ldr	r0, [r4, #0]
 8005f28:	f003 fa0a 	bl	8009340 <SDMMC_CmdWriteMultiBlock>
 8005f2c:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f2e:	f1ba 0f00 	cmp.w	sl, #0
 8005f32:	d110      	bne.n	8005f56 <HAL_SD_WriteBlocks+0xbe>
    dataremaining = config.DataLength;
 8005f34:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f38:	e024      	b.n	8005f84 <HAL_SD_WriteBlocks+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f40:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005f42:	2001      	movs	r0, #1
 8005f44:	e7bd      	b.n	8005ec2 <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005f46:	2310      	movs	r3, #16
 8005f48:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	f003 f9de 	bl	800930e <SDMMC_CmdWriteSingleBlock>
 8005f52:	4682      	mov	sl, r0
 8005f54:	e7eb      	b.n	8005f2e <HAL_SD_WriteBlocks+0x96>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	4a4e      	ldr	r2, [pc, #312]	; (8006094 <HAL_SD_WriteBlocks+0x1fc>)
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f5e:	ea43 030a 	orr.w	r3, r3, sl
 8005f62:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f64:	2001      	movs	r0, #1
 8005f66:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005f6e:	e7a8      	b.n	8005ec2 <HAL_SD_WriteBlocks+0x2a>
        dataremaining -= 32U;
 8005f70:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005f74:	f7fa fb90 	bl	8000698 <HAL_GetTick>
 8005f78:	eba0 0008 	sub.w	r0, r0, r8
 8005f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f7e:	4298      	cmp	r0, r3
 8005f80:	d222      	bcs.n	8005fc8 <HAL_SD_WriteBlocks+0x130>
 8005f82:	b30b      	cbz	r3, 8005fc8 <HAL_SD_WriteBlocks+0x130>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f88:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 8005f8c:	d12a      	bne.n	8005fe4 <HAL_SD_WriteBlocks+0x14c>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f90:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005f94:	d0ee      	beq.n	8005f74 <HAL_SD_WriteBlocks+0xdc>
 8005f96:	f1b9 0f1f 	cmp.w	r9, #31
 8005f9a:	d9eb      	bls.n	8005f74 <HAL_SD_WriteBlocks+0xdc>
        for(count = 0U; count < 8U; count++)
 8005f9c:	4656      	mov	r6, sl
 8005f9e:	2e07      	cmp	r6, #7
 8005fa0:	d8e6      	bhi.n	8005f70 <HAL_SD_WriteBlocks+0xd8>
          data = (uint32_t)(*tempbuff);
 8005fa2:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005fa4:	786a      	ldrb	r2, [r5, #1]
 8005fa6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005faa:	78aa      	ldrb	r2, [r5, #2]
 8005fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005fb0:	78ea      	ldrb	r2, [r5, #3]
 8005fb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fb6:	a908      	add	r1, sp, #32
 8005fb8:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 8005fbc:	3504      	adds	r5, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005fbe:	6820      	ldr	r0, [r4, #0]
 8005fc0:	f003 f81b 	bl	8008ffa <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005fc4:	3601      	adds	r6, #1
 8005fc6:	e7ea      	b.n	8005f9e <HAL_SD_WriteBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	4a32      	ldr	r2, [pc, #200]	; (8006094 <HAL_SD_WriteBlocks+0x1fc>)
 8005fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fd0:	ea43 030a 	orr.w	r3, r3, sl
 8005fd4:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8005fe0:	2003      	movs	r0, #3
 8005fe2:	e76e      	b.n	8005ec2 <HAL_SD_WriteBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fea:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ff0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005ff4:	d004      	beq.n	8006000 <HAL_SD_WriteBlocks+0x168>
 8005ff6:	2f01      	cmp	r7, #1
 8005ff8:	d902      	bls.n	8006000 <HAL_SD_WriteBlocks+0x168>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005ffa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d118      	bne.n	8006032 <HAL_SD_WriteBlocks+0x19a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006004:	f012 0f08 	tst.w	r2, #8
 8006008:	d124      	bne.n	8006054 <HAL_SD_WriteBlocks+0x1bc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800600a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800600c:	f012 0f02 	tst.w	r2, #2
 8006010:	d12c      	bne.n	800606c <HAL_SD_WriteBlocks+0x1d4>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006014:	f012 0f10 	tst.w	r2, #16
 8006018:	d034      	beq.n	8006084 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <HAL_SD_WriteBlocks+0x1fc>)
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800601e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006020:	f043 0310 	orr.w	r3, r3, #16
 8006024:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006026:	2001      	movs	r0, #1
 8006028:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800602c:	2300      	movs	r3, #0
 800602e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006030:	e747      	b.n	8005ec2 <HAL_SD_WriteBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006032:	f003 f99f 	bl	8009374 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006036:	4603      	mov	r3, r0
 8006038:	2800      	cmp	r0, #0
 800603a:	d0e1      	beq.n	8006000 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800603c:	6822      	ldr	r2, [r4, #0]
 800603e:	4915      	ldr	r1, [pc, #84]	; (8006094 <HAL_SD_WriteBlocks+0x1fc>)
 8006040:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006042:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006044:	4313      	orrs	r3, r2
 8006046:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006048:	2001      	movs	r0, #1
 800604a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800604e:	2300      	movs	r3, #0
 8006050:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8006052:	e736      	b.n	8005ec2 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006054:	4a0f      	ldr	r2, [pc, #60]	; (8006094 <HAL_SD_WriteBlocks+0x1fc>)
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800605a:	f043 0308 	orr.w	r3, r3, #8
 800605e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006060:	2001      	movs	r0, #1
 8006062:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006066:	2300      	movs	r3, #0
 8006068:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800606a:	e72a      	b.n	8005ec2 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800606c:	4a09      	ldr	r2, [pc, #36]	; (8006094 <HAL_SD_WriteBlocks+0x1fc>)
 800606e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006070:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006072:	f043 0302 	orr.w	r3, r3, #2
 8006076:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006078:	2001      	movs	r0, #1
 800607a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800607e:	2300      	movs	r3, #0
 8006080:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006082:	e71e      	b.n	8005ec2 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006084:	4a04      	ldr	r2, [pc, #16]	; (8006098 <HAL_SD_WriteBlocks+0x200>)
 8006086:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006088:	2301      	movs	r3, #1
 800608a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800608e:	2000      	movs	r0, #0
 8006090:	e717      	b.n	8005ec2 <HAL_SD_WriteBlocks+0x2a>
 8006092:	bf00      	nop
 8006094:	1fe00fff 	.word	0x1fe00fff
 8006098:	18000f3a 	.word	0x18000f3a

0800609c <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800609c:	4770      	bx	lr
	...

080060a0 <SD_PowerON>:
{
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	b083      	sub	sp, #12
 80060a4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80060aa:	f7fa faf5 	bl	8000698 <HAL_GetTick>
 80060ae:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	f003 f9a4 	bl	80093fe <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80060b6:	4606      	mov	r6, r0
 80060b8:	b110      	cbz	r0, 80060c0 <SD_PowerON+0x20>
}
 80060ba:	4630      	mov	r0, r6
 80060bc:	b003      	add	sp, #12
 80060be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	f003 f9af 	bl	8009424 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80060c6:	b938      	cbnz	r0, 80060d8 <SD_PowerON+0x38>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80060c8:	2301      	movs	r3, #1
 80060ca:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80060cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d00b      	beq.n	80060ea <SD_PowerON+0x4a>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80060d2:	4635      	mov	r5, r6
 80060d4:	4630      	mov	r0, r6
 80060d6:	e014      	b.n	8006102 <SD_PowerON+0x62>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80060d8:	2300      	movs	r3, #0
 80060da:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	f003 f98e 	bl	80093fe <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d0f2      	beq.n	80060cc <SD_PowerON+0x2c>
      return errorstate;
 80060e6:	4606      	mov	r6, r0
 80060e8:	e7e7      	b.n	80060ba <SD_PowerON+0x1a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060ea:	2100      	movs	r1, #0
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	f003 f9b1 	bl	8009454 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d0ed      	beq.n	80060d2 <SD_PowerON+0x32>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060f6:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80060fa:	e7de      	b.n	80060ba <SD_PowerON+0x1a>
    count++;
 80060fc:	9b01      	ldr	r3, [sp, #4]
 80060fe:	3301      	adds	r3, #1
 8006100:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006102:	9a01      	ldr	r2, [sp, #4]
 8006104:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006108:	429a      	cmp	r2, r3
 800610a:	d815      	bhi.n	8006138 <SD_PowerON+0x98>
 800610c:	b9a5      	cbnz	r5, 8006138 <SD_PowerON+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800610e:	2100      	movs	r1, #0
 8006110:	6820      	ldr	r0, [r4, #0]
 8006112:	f003 f99f 	bl	8009454 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006116:	2800      	cmp	r0, #0
 8006118:	d167      	bne.n	80061ea <SD_PowerON+0x14a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800611a:	493b      	ldr	r1, [pc, #236]	; (8006208 <SD_PowerON+0x168>)
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	f003 f9b2 	bl	8009486 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006122:	4605      	mov	r5, r0
 8006124:	2800      	cmp	r0, #0
 8006126:	d162      	bne.n	80061ee <SD_PowerON+0x14e>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006128:	2100      	movs	r1, #0
 800612a:	6820      	ldr	r0, [r4, #0]
 800612c:	f002 ff89 	bl	8009042 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006130:	0fc3      	lsrs	r3, r0, #31
 8006132:	d0e3      	beq.n	80060fc <SD_PowerON+0x5c>
 8006134:	461d      	mov	r5, r3
 8006136:	e7e1      	b.n	80060fc <SD_PowerON+0x5c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006138:	9a01      	ldr	r2, [sp, #4]
 800613a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800613e:	429a      	cmp	r2, r3
 8006140:	d858      	bhi.n	80061f4 <SD_PowerON+0x154>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006142:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006146:	d0b8      	beq.n	80060ba <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006148:	2301      	movs	r3, #1
 800614a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800614c:	69a3      	ldr	r3, [r4, #24]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d1b3      	bne.n	80060ba <SD_PowerON+0x1a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006152:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8006156:	d0b0      	beq.n	80060ba <SD_PowerON+0x1a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800615c:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	6813      	ldr	r3, [r2, #0]
 8006162:	f043 0308 	orr.w	r3, r3, #8
 8006166:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	f003 fa4b 	bl	8009604 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800616e:	4606      	mov	r6, r0
 8006170:	2800      	cmp	r0, #0
 8006172:	d1a2      	bne.n	80060ba <SD_PowerON+0x1a>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006178:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 800617c:	d108      	bne.n	8006190 <SD_PowerON+0xf0>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800617e:	f7fa fa8b 	bl	8000698 <HAL_GetTick>
 8006182:	1bc0      	subs	r0, r0, r7
 8006184:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006188:	d1f4      	bne.n	8006174 <SD_PowerON+0xd4>
            return HAL_SD_ERROR_TIMEOUT;
 800618a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800618e:	e794      	b.n	80060ba <SD_PowerON+0x1a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006190:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006194:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800619e:	d02c      	beq.n	80061fa <SD_PowerON+0x15a>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80061a0:	2001      	movs	r0, #1
 80061a2:	f7ff ff7b 	bl	800609c <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	6813      	ldr	r3, [r2, #0]
 80061aa:	f043 0304 	orr.w	r3, r3, #4
 80061ae:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061b4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80061b8:	d108      	bne.n	80061cc <SD_PowerON+0x12c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80061ba:	f7fa fa6d 	bl	8000698 <HAL_GetTick>
 80061be:	1bc0      	subs	r0, r0, r7
 80061c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80061c4:	d1f4      	bne.n	80061b0 <SD_PowerON+0x110>
              return HAL_SD_ERROR_TIMEOUT;
 80061c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80061ca:	e776      	b.n	80060ba <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80061cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80061da:	d111      	bne.n	8006200 <SD_PowerON+0x160>
          hsd->Instance->POWER = 0x13U;
 80061dc:	2213      	movs	r2, #19
 80061de:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
 80061e8:	e767      	b.n	80060ba <SD_PowerON+0x1a>
      return errorstate;
 80061ea:	4606      	mov	r6, r0
 80061ec:	e765      	b.n	80060ba <SD_PowerON+0x1a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ee:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80061f2:	e762      	b.n	80060ba <SD_PowerON+0x1a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80061f4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80061f8:	e75f      	b.n	80060ba <SD_PowerON+0x1a>
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80061fa:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80061fe:	e75c      	b.n	80060ba <SD_PowerON+0x1a>
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006200:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8006204:	e759      	b.n	80060ba <SD_PowerON+0x1a>
 8006206:	bf00      	nop
 8006208:	c1100000 	.word	0xc1100000

0800620c <HAL_SD_GetCardCSD>:
{
 800620c:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800620e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006210:	0f9b      	lsrs	r3, r3, #30
 8006212:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006214:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006216:	f3c3 6383 	ubfx	r3, r3, #26, #4
 800621a:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800621c:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006226:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 800622a:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800622c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006230:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006232:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8006236:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006238:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800623a:	0d1b      	lsrs	r3, r3, #20
 800623c:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800623e:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006248:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800624a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800624e:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006250:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006252:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006256:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006258:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800625a:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800625e:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006260:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006262:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006266:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006268:	2300      	movs	r3, #0
 800626a:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800626c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800626e:	2b00      	cmp	r3, #0
 8006270:	f040 8088 	bne.w	8006384 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006274:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006276:	f640 73fc 	movw	r3, #4092	; 0xffc
 800627a:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800627e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006280:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006284:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006286:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006288:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 800628c:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800628e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006298:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800629a:	f3c3 5342 	ubfx	r3, r3, #21, #3
 800629e:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80062a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80062a2:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80062a6:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80062a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80062aa:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80062ae:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80062b0:	690b      	ldr	r3, [r1, #16]
 80062b2:	3301      	adds	r3, #1
 80062b4:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80062b6:	7e0a      	ldrb	r2, [r1, #24]
 80062b8:	f002 0207 	and.w	r2, r2, #7
 80062bc:	3202      	adds	r2, #2
 80062be:	fa03 f202 	lsl.w	r2, r3, r2
 80062c2:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80062c4:	7a0b      	ldrb	r3, [r1, #8]
 80062c6:	f003 040f 	and.w	r4, r3, #15
 80062ca:	2301      	movs	r3, #1
 80062cc:	40a3      	lsls	r3, r4
 80062ce:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80062d0:	0a5b      	lsrs	r3, r3, #9
 80062d2:	fb03 f302 	mul.w	r3, r3, r2
 80062d6:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80062d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062dc:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80062de:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80062e0:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80062e4:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80062e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80062e8:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80062ec:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80062ee:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80062f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f4:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80062f6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80062f8:	0fdb      	lsrs	r3, r3, #31
 80062fa:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80062fc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80062fe:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8006302:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006304:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006306:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800630a:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800630c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800630e:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8006312:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006314:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006316:	f3c3 5340 	ubfx	r3, r3, #21, #1
 800631a:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006324:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8006328:	f002 0201 	and.w	r2, r2, #1
 800632c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006330:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006332:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006336:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800633a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800633c:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006340:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006344:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006346:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800634a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800634e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006350:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8006354:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006358:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800635a:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800635e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006362:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006364:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8006368:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800636c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800636e:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8006372:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006376:	2201      	movs	r2, #1
 8006378:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 800637c:	4618      	mov	r0, r3
}
 800637e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006382:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006384:	2b01      	cmp	r3, #1
 8006386:	d00b      	beq.n	80063a0 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006388:	6803      	ldr	r3, [r0, #0]
 800638a:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <HAL_SD_GetCardCSD+0x1b8>)
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800638e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006394:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006396:	2301      	movs	r3, #1
 8006398:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800639c:	4618      	mov	r0, r3
 800639e:	e7ee      	b.n	800637e <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80063a0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80063a8:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 80063ac:	4313      	orrs	r3, r2
 80063ae:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80063b0:	690b      	ldr	r3, [r1, #16]
 80063b2:	3301      	adds	r3, #1
 80063b4:	029b      	lsls	r3, r3, #10
 80063b6:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80063b8:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80063ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063be:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80063c0:	6583      	str	r3, [r0, #88]	; 0x58
 80063c2:	e78c      	b.n	80062de <HAL_SD_GetCardCSD+0xd2>
 80063c4:	1fe00fff 	.word	0x1fe00fff

080063c8 <SD_InitCard>:
{
 80063c8:	b510      	push	{r4, lr}
 80063ca:	b08c      	sub	sp, #48	; 0x30
 80063cc:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80063d4:	6800      	ldr	r0, [r0, #0]
 80063d6:	f002 fe1b 	bl	8009010 <SDMMC_GetPowerState>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d05c      	beq.n	8006498 <SD_InitCard+0xd0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80063de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d136      	bne.n	8006452 <SD_InitCard+0x8a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80063e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d14d      	bne.n	8006486 <SD_InitCard+0xbe>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80063ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d01d      	beq.n	800642c <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80063f0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80063f4:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063f6:	0409      	lsls	r1, r1, #16
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	f003 f8a2 	bl	8009542 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80063fe:	4603      	mov	r3, r0
 8006400:	2800      	cmp	r0, #0
 8006402:	d14b      	bne.n	800649c <SD_InitCard+0xd4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006404:	2100      	movs	r1, #0
 8006406:	6820      	ldr	r0, [r4, #0]
 8006408:	f002 fe1b 	bl	8009042 <SDMMC_GetResponse>
 800640c:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800640e:	2104      	movs	r1, #4
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	f002 fe16 	bl	8009042 <SDMMC_GetResponse>
 8006416:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006418:	2108      	movs	r1, #8
 800641a:	6820      	ldr	r0, [r4, #0]
 800641c:	f002 fe11 	bl	8009042 <SDMMC_GetResponse>
 8006420:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006422:	210c      	movs	r1, #12
 8006424:	6820      	ldr	r0, [r4, #0]
 8006426:	f002 fe0c 	bl	8009042 <SDMMC_GetResponse>
 800642a:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800642c:	2104      	movs	r1, #4
 800642e:	6820      	ldr	r0, [r4, #0]
 8006430:	f002 fe07 	bl	8009042 <SDMMC_GetResponse>
 8006434:	0d00      	lsrs	r0, r0, #20
 8006436:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006438:	a901      	add	r1, sp, #4
 800643a:	4620      	mov	r0, r4
 800643c:	f7ff fee6 	bl	800620c <HAL_SD_GetCardCSD>
 8006440:	bb78      	cbnz	r0, 80064a2 <SD_InitCard+0xda>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006442:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006444:	0412      	lsls	r2, r2, #16
 8006446:	2300      	movs	r3, #0
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	f002 ffbf 	bl	80093cc <SDMMC_CmdSelDesel>
 800644e:	4603      	mov	r3, r0
 8006450:	e024      	b.n	800649c <SD_InitCard+0xd4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006452:	6820      	ldr	r0, [r4, #0]
 8006454:	f003 f85f 	bl	8009516 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006458:	4603      	mov	r3, r0
 800645a:	b9f8      	cbnz	r0, 800649c <SD_InitCard+0xd4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800645c:	2100      	movs	r1, #0
 800645e:	6820      	ldr	r0, [r4, #0]
 8006460:	f002 fdef 	bl	8009042 <SDMMC_GetResponse>
 8006464:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006466:	2104      	movs	r1, #4
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	f002 fdea 	bl	8009042 <SDMMC_GetResponse>
 800646e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006470:	2108      	movs	r1, #8
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	f002 fde5 	bl	8009042 <SDMMC_GetResponse>
 8006478:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800647a:	210c      	movs	r1, #12
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	f002 fde0 	bl	8009042 <SDMMC_GetResponse>
 8006482:	67e0      	str	r0, [r4, #124]	; 0x7c
 8006484:	e7ae      	b.n	80063e4 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006486:	f10d 0102 	add.w	r1, sp, #2
 800648a:	6820      	ldr	r0, [r4, #0]
 800648c:	f003 f86f 	bl	800956e <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006490:	4603      	mov	r3, r0
 8006492:	2800      	cmp	r0, #0
 8006494:	d0a9      	beq.n	80063ea <SD_InitCard+0x22>
 8006496:	e001      	b.n	800649c <SD_InitCard+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 800649c:	4618      	mov	r0, r3
 800649e:	b00c      	add	sp, #48	; 0x30
 80064a0:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064a6:	e7f9      	b.n	800649c <SD_InitCard+0xd4>

080064a8 <HAL_SD_InitCard>:
{
 80064a8:	b510      	push	{r4, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064ae:	2300      	movs	r3, #0
 80064b0:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064b2:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80064b4:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80064b6:	9307      	str	r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80064b8:	23fa      	movs	r3, #250	; 0xfa
 80064ba:	9308      	str	r3, [sp, #32]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80064bc:	6983      	ldr	r3, [r0, #24]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d028      	beq.n	8006514 <HAL_SD_InitCard+0x6c>
  (void)SDMMC_Init(hsd->Instance, Init);
 80064c2:	ab0a      	add	r3, sp, #40	; 0x28
 80064c4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80064c8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80064cc:	ab04      	add	r3, sp, #16
 80064ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064d0:	6820      	ldr	r0, [r4, #0]
 80064d2:	f002 fd75 	bl	8008fc0 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80064d6:	6820      	ldr	r0, [r4, #0]
 80064d8:	f002 fd94 	bl	8009004 <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 80064dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80064e0:	f7fe fc00 	bl	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 80064e4:	4b20      	ldr	r3, [pc, #128]	; (8006568 <HAL_SD_InitCard+0xc0>)
 80064e6:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 80064ea:	0940      	lsrs	r0, r0, #5
 80064ec:	d018      	beq.n	8006520 <HAL_SD_InitCard+0x78>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80064ee:	4b1f      	ldr	r3, [pc, #124]	; (800656c <HAL_SD_InitCard+0xc4>)
 80064f0:	fbb3 f0f0 	udiv	r0, r3, r0
 80064f4:	3001      	adds	r0, #1
 80064f6:	f7fa f8d5 	bl	80006a4 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80064fa:	4620      	mov	r0, r4
 80064fc:	f7ff fdd0 	bl	80060a0 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006500:	4602      	mov	r2, r0
 8006502:	b188      	cbz	r0, 8006528 <HAL_SD_InitCard+0x80>
    hsd->State = HAL_SD_STATE_READY;
 8006504:	2001      	movs	r0, #1
 8006506:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800650a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800650c:	4313      	orrs	r3, r2
 800650e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006510:	b00a      	add	sp, #40	; 0x28
 8006512:	bd10      	pop	{r4, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006514:	6802      	ldr	r2, [r0, #0]
 8006516:	6813      	ldr	r3, [r2, #0]
 8006518:	f043 0310 	orr.w	r3, r3, #16
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	e7d0      	b.n	80064c2 <HAL_SD_InitCard+0x1a>
    HAL_Delay(2U);
 8006520:	2002      	movs	r0, #2
 8006522:	f7fa f8bf 	bl	80006a4 <HAL_Delay>
 8006526:	e7e8      	b.n	80064fa <HAL_SD_InitCard+0x52>
  errorstate = SD_InitCard(hsd);
 8006528:	4620      	mov	r0, r4
 800652a:	f7ff ff4d 	bl	80063c8 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800652e:	4602      	mov	r2, r0
 8006530:	b130      	cbz	r0, 8006540 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8006532:	2001      	movs	r0, #1
 8006534:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800653a:	4313      	orrs	r3, r2
 800653c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800653e:	e7e7      	b.n	8006510 <HAL_SD_InitCard+0x68>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	f002 fe97 	bl	8009278 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800654a:	4603      	mov	r3, r0
 800654c:	b148      	cbz	r0, 8006562 <HAL_SD_InitCard+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	4907      	ldr	r1, [pc, #28]	; (8006570 <HAL_SD_InitCard+0xc8>)
 8006552:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006554:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006556:	4318      	orrs	r0, r3
 8006558:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800655a:	2001      	movs	r0, #1
 800655c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 8006560:	e7d6      	b.n	8006510 <HAL_SD_InitCard+0x68>
  return HAL_OK;
 8006562:	2000      	movs	r0, #0
 8006564:	e7d4      	b.n	8006510 <HAL_SD_InitCard+0x68>
 8006566:	bf00      	nop
 8006568:	10624dd3 	.word	0x10624dd3
 800656c:	00012110 	.word	0x00012110
 8006570:	1fe00fff 	.word	0x1fe00fff

08006574 <HAL_SD_GetCardStatus>:
{
 8006574:	b530      	push	{r4, r5, lr}
 8006576:	b091      	sub	sp, #68	; 0x44
 8006578:	4605      	mov	r5, r0
 800657a:	460c      	mov	r4, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800657c:	4669      	mov	r1, sp
 800657e:	f7ff fa0f 	bl	80059a0 <SD_SendSDStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006582:	b1c8      	cbz	r0, 80065b8 <HAL_SD_GetCardStatus+0x44>
 8006584:	4603      	mov	r3, r0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006586:	682a      	ldr	r2, [r5, #0]
 8006588:	4929      	ldr	r1, [pc, #164]	; (8006630 <HAL_SD_GetCardStatus+0xbc>)
 800658a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800658c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800658e:	4318      	orrs	r0, r3
 8006590:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006592:	2401      	movs	r4, #1
 8006594:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800659c:	6828      	ldr	r0, [r5, #0]
 800659e:	f002 fe6b 	bl	8009278 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80065a2:	b130      	cbz	r0, 80065b2 <HAL_SD_GetCardStatus+0x3e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065a4:	682a      	ldr	r2, [r5, #0]
 80065a6:	4922      	ldr	r1, [pc, #136]	; (8006630 <HAL_SD_GetCardStatus+0xbc>)
 80065a8:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80065aa:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065ac:	2401      	movs	r4, #1
 80065ae:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
}
 80065b2:	4620      	mov	r0, r4
 80065b4:	b011      	add	sp, #68	; 0x44
 80065b6:	bd30      	pop	{r4, r5, pc}
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80065b8:	9a00      	ldr	r2, [sp, #0]
 80065ba:	f3c2 1381 	ubfx	r3, r2, #6, #2
 80065be:	7023      	strb	r3, [r4, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80065c0:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80065c4:	7063      	strb	r3, [r4, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80065c6:	0a13      	lsrs	r3, r2, #8
 80065c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8063      	strh	r3, [r4, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80065d4:	9a01      	ldr	r2, [sp, #4]
 80065d6:	0213      	lsls	r3, r2, #8
 80065d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80065e0:	0a11      	lsrs	r1, r2, #8
 80065e2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80065e6:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80065e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80065ec:	6063      	str	r3, [r4, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80065ee:	9b02      	ldr	r3, [sp, #8]
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	7222      	strb	r2, [r4, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80065f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80065f8:	7262      	strb	r2, [r4, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80065fa:	f3c3 5203 	ubfx	r2, r3, #20, #4
 80065fe:	72a2      	strb	r2, [r4, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	9a03      	ldr	r2, [sp, #12]
 8006604:	b2d1      	uxtb	r1, r2
 8006606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800660a:	430b      	orrs	r3, r1
 800660c:	81a3      	strh	r3, [r4, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800660e:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8006612:	73a3      	strb	r3, [r4, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006614:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8006618:	73e3      	strb	r3, [r4, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800661a:	f3c2 1303 	ubfx	r3, r2, #4, #4
 800661e:	7423      	strb	r3, [r4, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006620:	f002 020f 	and.w	r2, r2, #15
 8006624:	7462      	strb	r2, [r4, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006626:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800662a:	74a3      	strb	r3, [r4, #18]
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2400      	movs	r4, #0
 800662e:	e7b3      	b.n	8006598 <HAL_SD_GetCardStatus+0x24>
 8006630:	1fe00fff 	.word	0x1fe00fff

08006634 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006634:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006636:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006638:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800663a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800663c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800663e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006640:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006642:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006644:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006646:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006648:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800664a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800664c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800664e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006650:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006652:	61cb      	str	r3, [r1, #28]
}
 8006654:	2000      	movs	r0, #0
 8006656:	4770      	bx	lr

08006658 <HAL_SD_ConfigWideBusOperation>:
{
 8006658:	b530      	push	{r4, r5, lr}
 800665a:	b08b      	sub	sp, #44	; 0x2c
 800665c:	4604      	mov	r4, r0
 800665e:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8006660:	2303      	movs	r3, #3
 8006662:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006666:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006668:	2b03      	cmp	r3, #3
 800666a:	d01c      	beq.n	80066a6 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800666c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006670:	d008      	beq.n	8006684 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006672:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006676:	d00a      	beq.n	800668e <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006678:	b179      	cbz	r1, 800669a <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800667a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800667c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006680:	6383      	str	r3, [r0, #56]	; 0x38
 8006682:	e014      	b.n	80066ae <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006684:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800668a:	6383      	str	r3, [r0, #56]	; 0x38
 800668c:	e00f      	b.n	80066ae <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 800668e:	f7ff fa99 	bl	8005bc4 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8006692:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006694:	4318      	orrs	r0, r3
 8006696:	63a0      	str	r0, [r4, #56]	; 0x38
 8006698:	e009      	b.n	80066ae <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800669a:	f7ff fabe 	bl	8005c1a <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 800669e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066a0:	4318      	orrs	r0, r3
 80066a2:	63a0      	str	r0, [r4, #56]	; 0x38
 80066a4:	e003      	b.n	80066ae <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80066a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ac:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066b0:	b1bb      	cbz	r3, 80066e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	4a1e      	ldr	r2, [pc, #120]	; (8006730 <HAL_SD_ConfigWideBusOperation+0xd8>)
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80066b8:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066be:	6820      	ldr	r0, [r4, #0]
 80066c0:	f002 fdda 	bl	8009278 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80066c4:	4603      	mov	r3, r0
 80066c6:	b130      	cbz	r0, 80066d6 <HAL_SD_ConfigWideBusOperation+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	4919      	ldr	r1, [pc, #100]	; (8006730 <HAL_SD_ConfigWideBusOperation+0xd8>)
 80066cc:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80066d0:	4318      	orrs	r0, r3
 80066d2:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 80066d4:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80066dc:	4628      	mov	r0, r5
 80066de:	b00b      	add	sp, #44	; 0x2c
 80066e0:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80066e2:	6863      	ldr	r3, [r4, #4]
 80066e4:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80066e6:	68a3      	ldr	r3, [r4, #8]
 80066e8:	9305      	str	r3, [sp, #20]
    Init.BusWide             = WideMode;
 80066ea:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80066ec:	6923      	ldr	r3, [r4, #16]
 80066ee:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80066f0:	6963      	ldr	r3, [r4, #20]
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d90c      	bls.n	8006710 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.ClockDiv = hsd->Init.ClockDiv;
 80066f6:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80066f8:	ab0a      	add	r3, sp, #40	; 0x28
 80066fa:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80066fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006702:	ab04      	add	r3, sp, #16
 8006704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006706:	6820      	ldr	r0, [r4, #0]
 8006708:	f002 fc5a 	bl	8008fc0 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800670c:	2500      	movs	r5, #0
 800670e:	e7d4      	b.n	80066ba <HAL_SD_ConfigWideBusOperation+0x62>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006710:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006712:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006716:	d005      	beq.n	8006724 <HAL_SD_ConfigWideBusOperation+0xcc>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006718:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800671c:	d004      	beq.n	8006728 <HAL_SD_ConfigWideBusOperation+0xd0>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800671e:	2304      	movs	r3, #4
 8006720:	9308      	str	r3, [sp, #32]
 8006722:	e7e9      	b.n	80066f8 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = hsd->Init.ClockDiv;
 8006724:	9308      	str	r3, [sp, #32]
 8006726:	e7e7      	b.n	80066f8 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8006728:	2302      	movs	r3, #2
 800672a:	9308      	str	r3, [sp, #32]
 800672c:	e7e4      	b.n	80066f8 <HAL_SD_ConfigWideBusOperation+0xa0>
 800672e:	bf00      	nop
 8006730:	1fe00fff 	.word	0x1fe00fff

08006734 <HAL_SD_GetCardState>:
{
 8006734:	b510      	push	{r4, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800673a:	a902      	add	r1, sp, #8
 800673c:	2300      	movs	r3, #0
 800673e:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8006742:	f7ff fa95 	bl	8005c70 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006746:	b118      	cbz	r0, 8006750 <HAL_SD_GetCardState+0x1c>
 8006748:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 800674a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800674c:	4318      	orrs	r0, r3
 800674e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8006750:	9801      	ldr	r0, [sp, #4]
 8006752:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8006756:	b002      	add	sp, #8
 8006758:	bd10      	pop	{r4, pc}

0800675a <HAL_SD_Init>:
{
 800675a:	b570      	push	{r4, r5, r6, lr}
 800675c:	b086      	sub	sp, #24
  if(hsd == NULL)
 800675e:	2800      	cmp	r0, #0
 8006760:	d058      	beq.n	8006814 <HAL_SD_Init+0xba>
 8006762:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8006764:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006768:	b93b      	cbnz	r3, 800677a <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 800676a:	7703      	strb	r3, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800676c:	6983      	ldr	r3, [r0, #24]
 800676e:	b90b      	cbnz	r3, 8006774 <HAL_SD_Init+0x1a>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006770:	2302      	movs	r3, #2
 8006772:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8006774:	4620      	mov	r0, r4
 8006776:	f004 fb0f 	bl	800ad98 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800677a:	2303      	movs	r3, #3
 800677c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006780:	4620      	mov	r0, r4
 8006782:	f7ff fe91 	bl	80064a8 <HAL_SD_InitCard>
 8006786:	b118      	cbz	r0, 8006790 <HAL_SD_Init+0x36>
    return HAL_ERROR;
 8006788:	2501      	movs	r5, #1
}
 800678a:	4628      	mov	r0, r5
 800678c:	b006      	add	sp, #24
 800678e:	bd70      	pop	{r4, r5, r6, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006790:	a901      	add	r1, sp, #4
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff feee 	bl	8006574 <HAL_SD_GetCardStatus>
 8006798:	2800      	cmp	r0, #0
 800679a:	d13d      	bne.n	8006818 <HAL_SD_Init+0xbe>
  speedgrade = CardStatus.UhsSpeedGrade;
 800679c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80067a0:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 80067a2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80067a6:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80067a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80067aa:	2901      	cmp	r1, #1
 80067ac:	d00b      	beq.n	80067c6 <HAL_SD_Init+0x6c>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80067ae:	2901      	cmp	r1, #1
 80067b0:	d00f      	beq.n	80067d2 <HAL_SD_Init+0x78>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80067b2:	2300      	movs	r3, #0
 80067b4:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80067b6:	68e1      	ldr	r1, [r4, #12]
 80067b8:	4620      	mov	r0, r4
 80067ba:	f7ff ff4d 	bl	8006658 <HAL_SD_ConfigWideBusOperation>
 80067be:	4605      	mov	r5, r0
 80067c0:	b158      	cbz	r0, 80067da <HAL_SD_Init+0x80>
    return HAL_ERROR;
 80067c2:	2501      	movs	r5, #1
 80067c4:	e7e1      	b.n	800678a <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80067c6:	4313      	orrs	r3, r2
 80067c8:	d0f1      	beq.n	80067ae <HAL_SD_Init+0x54>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80067ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ce:	65e3      	str	r3, [r4, #92]	; 0x5c
 80067d0:	e7f1      	b.n	80067b6 <HAL_SD_Init+0x5c>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80067d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067d6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80067d8:	e7ed      	b.n	80067b6 <HAL_SD_Init+0x5c>
  tickstart = HAL_GetTick();
 80067da:	f7f9 ff5d 	bl	8000698 <HAL_GetTick>
 80067de:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80067e0:	4620      	mov	r0, r4
 80067e2:	f7ff ffa7 	bl	8006734 <HAL_SD_GetCardState>
 80067e6:	2804      	cmp	r0, #4
 80067e8:	d00d      	beq.n	8006806 <HAL_SD_Init+0xac>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80067ea:	f7f9 ff55 	bl	8000698 <HAL_GetTick>
 80067ee:	1b80      	subs	r0, r0, r6
 80067f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80067f4:	d1f4      	bne.n	80067e0 <HAL_SD_Init+0x86>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80067f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067fa:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80067fc:	2301      	movs	r3, #1
 80067fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8006802:	2503      	movs	r5, #3
 8006804:	e7c1      	b.n	800678a <HAL_SD_Init+0x30>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006806:	2300      	movs	r3, #0
 8006808:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800680a:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800680c:	2301      	movs	r3, #1
 800680e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8006812:	e7ba      	b.n	800678a <HAL_SD_Init+0x30>
    return HAL_ERROR;
 8006814:	2501      	movs	r5, #1
 8006816:	e7b8      	b.n	800678a <HAL_SD_Init+0x30>
    return HAL_ERROR;
 8006818:	2501      	movs	r5, #1
 800681a:	e7b6      	b.n	800678a <HAL_SD_Init+0x30>

0800681c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800681c:	b308      	cbz	r0, 8006862 <HAL_SDRAM_Init+0x46>
{
 800681e:	b538      	push	{r3, r4, r5, lr}
 8006820:	4604      	mov	r4, r0
 8006822:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006824:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006828:	b1b3      	cbz	r3, 8006858 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800682a:	2302      	movs	r3, #2
 800682c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006830:	4621      	mov	r1, r4
 8006832:	f851 0b04 	ldr.w	r0, [r1], #4
 8006836:	f002 fa71 	bl	8008d1c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800683a:	6862      	ldr	r2, [r4, #4]
 800683c:	4629      	mov	r1, r5
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	f002 faa6 	bl	8008d90 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006844:	4a08      	ldr	r2, [pc, #32]	; (8006868 <HAL_SDRAM_Init+0x4c>)
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800684c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800684e:	2301      	movs	r3, #1
 8006850:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8006854:	2000      	movs	r0, #0
}
 8006856:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006858:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800685c:	f003 fd02 	bl	800a264 <HAL_SDRAM_MspInit>
 8006860:	e7e3      	b.n	800682a <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8006862:	2001      	movs	r0, #1
}
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	52004000 	.word	0x52004000

0800686c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800686c:	b538      	push	{r3, r4, r5, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800686e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006872:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006874:	2b02      	cmp	r3, #2
 8006876:	d01a      	beq.n	80068ae <HAL_SDRAM_SendCommand+0x42>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006878:	2b05      	cmp	r3, #5
 800687a:	bf18      	it	ne
 800687c:	2b01      	cmpne	r3, #1
 800687e:	d001      	beq.n	8006884 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8006880:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	460d      	mov	r5, r1
 8006886:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006888:	2302      	movs	r3, #2
 800688a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800688e:	6800      	ldr	r0, [r0, #0]
 8006890:	f002 faca 	bl	8008e28 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d004      	beq.n	80068a4 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 800689a:	2301      	movs	r3, #1
 800689c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80068a0:	2000      	movs	r0, #0
 80068a2:	e7ee      	b.n	8006882 <HAL_SDRAM_SendCommand+0x16>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80068a4:	2305      	movs	r3, #5
 80068a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80068aa:	2000      	movs	r0, #0
 80068ac:	e7e9      	b.n	8006882 <HAL_SDRAM_SendCommand+0x16>
    return HAL_BUSY;
 80068ae:	2002      	movs	r0, #2
 80068b0:	e7e7      	b.n	8006882 <HAL_SDRAM_SendCommand+0x16>

080068b2 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80068b2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d013      	beq.n	80068e4 <HAL_SDRAM_ProgramRefreshRate+0x32>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80068bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d001      	beq.n	80068ca <HAL_SDRAM_ProgramRefreshRate+0x18>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 80068c6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80068c8:	4770      	bx	lr
{
 80068ca:	b510      	push	{r4, lr}
 80068cc:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80068ce:	2302      	movs	r3, #2
 80068d0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80068d4:	6800      	ldr	r0, [r0, #0]
 80068d6:	f002 fab9 	bl	8008e4c <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 80068da:	2301      	movs	r3, #1
 80068dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80068e0:	2000      	movs	r0, #0
}
 80068e2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80068e4:	2002      	movs	r0, #2
 80068e6:	4770      	bx	lr

080068e8 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80068e8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80068ea:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80068ec:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80068ee:	3008      	adds	r0, #8
 80068f0:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 80068f2:	fb03 0000 	mla	r0, r3, r0, r0
 80068f6:	4770      	bx	lr

080068f8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80068f8:	2800      	cmp	r0, #0
 80068fa:	f000 8097 	beq.w	8006a2c <HAL_SPI_Init+0x134>
{
 80068fe:	b570      	push	{r4, r5, r6, lr}
 8006900:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006902:	2300      	movs	r3, #0
 8006904:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006906:	6805      	ldr	r5, [r0, #0]
 8006908:	4b4c      	ldr	r3, [pc, #304]	; (8006a3c <HAL_SPI_Init+0x144>)
 800690a:	4e4d      	ldr	r6, [pc, #308]	; (8006a40 <HAL_SPI_Init+0x148>)
 800690c:	429d      	cmp	r5, r3
 800690e:	bf18      	it	ne
 8006910:	42b5      	cmpne	r5, r6
 8006912:	bf14      	ite	ne
 8006914:	2601      	movne	r6, #1
 8006916:	2600      	moveq	r6, #0
 8006918:	d007      	beq.n	800692a <HAL_SPI_Init+0x32>
 800691a:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800691e:	429d      	cmp	r5, r3
 8006920:	d003      	beq.n	800692a <HAL_SPI_Init+0x32>
 8006922:	68c3      	ldr	r3, [r0, #12]
 8006924:	2b0f      	cmp	r3, #15
 8006926:	f200 8083 	bhi.w	8006a30 <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 800692a:	4620      	mov	r0, r4
 800692c:	f7ff ffdc 	bl	80068e8 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006930:	b126      	cbz	r6, 800693c <HAL_SPI_Init+0x44>
 8006932:	4b44      	ldr	r3, [pc, #272]	; (8006a44 <HAL_SPI_Init+0x14c>)
 8006934:	429d      	cmp	r5, r3
 8006936:	d001      	beq.n	800693c <HAL_SPI_Init+0x44>
 8006938:	2808      	cmp	r0, #8
 800693a:	d87b      	bhi.n	8006a34 <HAL_SPI_Init+0x13c>
 800693c:	4a3f      	ldr	r2, [pc, #252]	; (8006a3c <HAL_SPI_Init+0x144>)
 800693e:	4b40      	ldr	r3, [pc, #256]	; (8006a40 <HAL_SPI_Init+0x148>)
 8006940:	429d      	cmp	r5, r3
 8006942:	bf18      	it	ne
 8006944:	4295      	cmpne	r5, r2
 8006946:	d003      	beq.n	8006950 <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800694c:	429d      	cmp	r5, r3
 800694e:	d101      	bne.n	8006954 <HAL_SPI_Init+0x5c>
 8006950:	2810      	cmp	r0, #16
 8006952:	d871      	bhi.n	8006a38 <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006954:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006958:	2b00      	cmp	r3, #0
 800695a:	d054      	beq.n	8006a06 <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 800695c:	2302      	movs	r3, #2
 800695e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	6813      	ldr	r3, [r2, #0]
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800696c:	69a3      	ldr	r3, [r4, #24]
 800696e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006972:	d04e      	beq.n	8006a12 <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006974:	69e3      	ldr	r3, [r4, #28]
 8006976:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006978:	4313      	orrs	r3, r2
 800697a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800697c:	4313      	orrs	r3, r2
 800697e:	68e1      	ldr	r1, [r4, #12]
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	430b      	orrs	r3, r1
 8006984:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006988:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800698a:	4313      	orrs	r3, r2
 800698c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800698e:	4313      	orrs	r3, r2
 8006990:	69a2      	ldr	r2, [r4, #24]
 8006992:	4313      	orrs	r3, r2
 8006994:	6922      	ldr	r2, [r4, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	6962      	ldr	r2, [r4, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	6a22      	ldr	r2, [r4, #32]
 800699e:	4313      	orrs	r3, r2
 80069a0:	6862      	ldr	r2, [r4, #4]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069a6:	4313      	orrs	r3, r2
 80069a8:	68a2      	ldr	r2, [r4, #8]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80069ae:	4313      	orrs	r3, r2
 80069b0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	430b      	orrs	r3, r1
 80069b6:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	b96b      	cbnz	r3, 80069d8 <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80069bc:	6822      	ldr	r2, [r4, #0]
 80069be:	6893      	ldr	r3, [r2, #8]
 80069c0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80069c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069c8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80069ca:	6822      	ldr	r2, [r4, #0]
 80069cc:	6893      	ldr	r3, [r2, #8]
 80069ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069d6:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80069dc:	f023 0301 	bic.w	r3, r3, #1
 80069e0:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80069e8:	d006      	beq.n	80069f8 <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	68d3      	ldr	r3, [r2, #12]
 80069ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069f2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80069f4:	430b      	orrs	r3, r1
 80069f6:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069f8:	2000      	movs	r0, #0
 80069fa:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006a04:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006a06:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f004 fa58 	bl	800aec0 <HAL_SPI_MspInit>
 8006a10:	e7a4      	b.n	800695c <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006a12:	6863      	ldr	r3, [r4, #4]
 8006a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a18:	d1ac      	bne.n	8006974 <HAL_SPI_Init+0x7c>
 8006a1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1a9      	bne.n	8006974 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	6813      	ldr	r3, [r2, #0]
 8006a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e7a3      	b.n	8006974 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8006a2c:	2001      	movs	r0, #1
}
 8006a2e:	4770      	bx	lr
    return HAL_ERROR;
 8006a30:	2001      	movs	r0, #1
 8006a32:	e7e7      	b.n	8006a04 <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 8006a34:	2001      	movs	r0, #1
 8006a36:	e7e5      	b.n	8006a04 <HAL_SPI_Init+0x10c>
 8006a38:	2001      	movs	r0, #1
 8006a3a:	e7e3      	b.n	8006a04 <HAL_SPI_Init+0x10c>
 8006a3c:	40013000 	.word	0x40013000
 8006a40:	40003800 	.word	0x40003800
 8006a44:	40003c00 	.word	0x40003c00

08006a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a48:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a4a:	6a03      	ldr	r3, [r0, #32]
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a56:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a58:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <TIM_OC1_SetConfig+0x8c>)
 8006a5a:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a5c:	680e      	ldr	r6, [r1, #0]
 8006a5e:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a60:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a64:	688d      	ldr	r5, [r1, #8]
 8006a66:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a68:	4a1b      	ldr	r2, [pc, #108]	; (8006ad8 <TIM_OC1_SetConfig+0x90>)
 8006a6a:	4d1c      	ldr	r5, [pc, #112]	; (8006adc <TIM_OC1_SetConfig+0x94>)
 8006a6c:	42a8      	cmp	r0, r5
 8006a6e:	bf18      	it	ne
 8006a70:	4290      	cmpne	r0, r2
 8006a72:	bf0c      	ite	eq
 8006a74:	2201      	moveq	r2, #1
 8006a76:	2200      	movne	r2, #0
 8006a78:	d00c      	beq.n	8006a94 <TIM_OC1_SetConfig+0x4c>
 8006a7a:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8006a7e:	42a8      	cmp	r0, r5
 8006a80:	bf14      	ite	ne
 8006a82:	2500      	movne	r5, #0
 8006a84:	2501      	moveq	r5, #1
 8006a86:	4f16      	ldr	r7, [pc, #88]	; (8006ae0 <TIM_OC1_SetConfig+0x98>)
 8006a88:	42b8      	cmp	r0, r7
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC1_SetConfig+0x4c>
 8006a8c:	b915      	cbnz	r5, 8006a94 <TIM_OC1_SetConfig+0x4c>
 8006a8e:	4d15      	ldr	r5, [pc, #84]	; (8006ae4 <TIM_OC1_SetConfig+0x9c>)
 8006a90:	42a8      	cmp	r0, r5
 8006a92:	d105      	bne.n	8006aa0 <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a94:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a98:	68cd      	ldr	r5, [r1, #12]
 8006a9a:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a9c:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa0:	b95a      	cbnz	r2, 8006aba <TIM_OC1_SetConfig+0x72>
 8006aa2:	4a11      	ldr	r2, [pc, #68]	; (8006ae8 <TIM_OC1_SetConfig+0xa0>)
 8006aa4:	4290      	cmp	r0, r2
 8006aa6:	bf14      	ite	ne
 8006aa8:	2200      	movne	r2, #0
 8006aaa:	2201      	moveq	r2, #1
 8006aac:	4d0c      	ldr	r5, [pc, #48]	; (8006ae0 <TIM_OC1_SetConfig+0x98>)
 8006aae:	42a8      	cmp	r0, r5
 8006ab0:	d003      	beq.n	8006aba <TIM_OC1_SetConfig+0x72>
 8006ab2:	b912      	cbnz	r2, 8006aba <TIM_OC1_SetConfig+0x72>
 8006ab4:	4a0b      	ldr	r2, [pc, #44]	; (8006ae4 <TIM_OC1_SetConfig+0x9c>)
 8006ab6:	4290      	cmp	r0, r2
 8006ab8:	d105      	bne.n	8006ac6 <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aba:	f424 7240 	bic.w	r2, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006abe:	694c      	ldr	r4, [r1, #20]
 8006ac0:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ac2:	698a      	ldr	r2, [r1, #24]
 8006ac4:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac8:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aca:	684a      	ldr	r2, [r1, #4]
 8006acc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	6203      	str	r3, [r0, #32]
}
 8006ad0:	bcf0      	pop	{r4, r5, r6, r7}
 8006ad2:	4770      	bx	lr
 8006ad4:	fffeff8c 	.word	0xfffeff8c
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40010400 	.word	0x40010400
 8006ae0:	40014000 	.word	0x40014000
 8006ae4:	40014800 	.word	0x40014800
 8006ae8:	40014400 	.word	0x40014400

08006aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aee:	6a03      	ldr	r3, [r0, #32]
 8006af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006afc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b00:	680e      	ldr	r6, [r1, #0]
 8006b02:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b08:	688a      	ldr	r2, [r1, #8]
 8006b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b0e:	4a16      	ldr	r2, [pc, #88]	; (8006b68 <TIM_OC3_SetConfig+0x7c>)
 8006b10:	4d16      	ldr	r5, [pc, #88]	; (8006b6c <TIM_OC3_SetConfig+0x80>)
 8006b12:	42a8      	cmp	r0, r5
 8006b14:	bf18      	it	ne
 8006b16:	4290      	cmpne	r0, r2
 8006b18:	bf0c      	ite	eq
 8006b1a:	2201      	moveq	r2, #1
 8006b1c:	2200      	movne	r2, #0
 8006b1e:	d106      	bne.n	8006b2e <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b24:	68cd      	ldr	r5, [r1, #12]
 8006b26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2e:	b95a      	cbnz	r2, 8006b48 <TIM_OC3_SetConfig+0x5c>
 8006b30:	4a0f      	ldr	r2, [pc, #60]	; (8006b70 <TIM_OC3_SetConfig+0x84>)
 8006b32:	4290      	cmp	r0, r2
 8006b34:	bf14      	ite	ne
 8006b36:	2200      	movne	r2, #0
 8006b38:	2201      	moveq	r2, #1
 8006b3a:	4d0e      	ldr	r5, [pc, #56]	; (8006b74 <TIM_OC3_SetConfig+0x88>)
 8006b3c:	42a8      	cmp	r0, r5
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC3_SetConfig+0x5c>
 8006b40:	b912      	cbnz	r2, 8006b48 <TIM_OC3_SetConfig+0x5c>
 8006b42:	4a0d      	ldr	r2, [pc, #52]	; (8006b78 <TIM_OC3_SetConfig+0x8c>)
 8006b44:	4290      	cmp	r0, r2
 8006b46:	d107      	bne.n	8006b58 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b48:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b4c:	694a      	ldr	r2, [r1, #20]
 8006b4e:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b52:	698a      	ldr	r2, [r1, #24]
 8006b54:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5a:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b5c:	684a      	ldr	r2, [r1, #4]
 8006b5e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b60:	6203      	str	r3, [r0, #32]
}
 8006b62:	bc70      	pop	{r4, r5, r6}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014400 	.word	0x40014400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014800 	.word	0x40014800

08006b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b7c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b7e:	6a03      	ldr	r3, [r0, #32]
 8006b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b8c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b90:	680d      	ldr	r5, [r1, #0]
 8006b92:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b9a:	688d      	ldr	r5, [r1, #8]
 8006b9c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba0:	4e0f      	ldr	r6, [pc, #60]	; (8006be0 <TIM_OC4_SetConfig+0x64>)
 8006ba2:	4d10      	ldr	r5, [pc, #64]	; (8006be4 <TIM_OC4_SetConfig+0x68>)
 8006ba4:	42a8      	cmp	r0, r5
 8006ba6:	bf18      	it	ne
 8006ba8:	42b0      	cmpne	r0, r6
 8006baa:	d00d      	beq.n	8006bc8 <TIM_OC4_SetConfig+0x4c>
 8006bac:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8006bb0:	42a8      	cmp	r0, r5
 8006bb2:	bf14      	ite	ne
 8006bb4:	2500      	movne	r5, #0
 8006bb6:	2501      	moveq	r5, #1
 8006bb8:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8006bbc:	42b0      	cmp	r0, r6
 8006bbe:	d003      	beq.n	8006bc8 <TIM_OC4_SetConfig+0x4c>
 8006bc0:	b915      	cbnz	r5, 8006bc8 <TIM_OC4_SetConfig+0x4c>
 8006bc2:	4d09      	ldr	r5, [pc, #36]	; (8006be8 <TIM_OC4_SetConfig+0x6c>)
 8006bc4:	42a8      	cmp	r0, r5
 8006bc6:	d104      	bne.n	8006bd2 <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bc8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bcc:	694d      	ldr	r5, [r1, #20]
 8006bce:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bd6:	684a      	ldr	r2, [r1, #4]
 8006bd8:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bda:	6203      	str	r3, [r0, #32]
}
 8006bdc:	bc70      	pop	{r4, r5, r6}
 8006bde:	4770      	bx	lr
 8006be0:	40010000 	.word	0x40010000
 8006be4:	40010400 	.word	0x40010400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bee:	6a03      	ldr	r3, [r0, #32]
 8006bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf8:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bfa:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bfc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c00:	680d      	ldr	r5, [r1, #0]
 8006c02:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c08:	688d      	ldr	r5, [r1, #8]
 8006c0a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0e:	4e10      	ldr	r6, [pc, #64]	; (8006c50 <TIM_OC5_SetConfig+0x64>)
 8006c10:	4d10      	ldr	r5, [pc, #64]	; (8006c54 <TIM_OC5_SetConfig+0x68>)
 8006c12:	42a8      	cmp	r0, r5
 8006c14:	bf18      	it	ne
 8006c16:	42b0      	cmpne	r0, r6
 8006c18:	d00d      	beq.n	8006c36 <TIM_OC5_SetConfig+0x4a>
 8006c1a:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8006c1e:	42a8      	cmp	r0, r5
 8006c20:	bf14      	ite	ne
 8006c22:	2500      	movne	r5, #0
 8006c24:	2501      	moveq	r5, #1
 8006c26:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8006c2a:	42b0      	cmp	r0, r6
 8006c2c:	d003      	beq.n	8006c36 <TIM_OC5_SetConfig+0x4a>
 8006c2e:	b915      	cbnz	r5, 8006c36 <TIM_OC5_SetConfig+0x4a>
 8006c30:	4d09      	ldr	r5, [pc, #36]	; (8006c58 <TIM_OC5_SetConfig+0x6c>)
 8006c32:	42a8      	cmp	r0, r5
 8006c34:	d104      	bne.n	8006c40 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c3a:	694d      	ldr	r5, [r1, #20]
 8006c3c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c40:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c42:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c44:	684a      	ldr	r2, [r1, #4]
 8006c46:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c48:	6203      	str	r3, [r0, #32]
}
 8006c4a:	bc70      	pop	{r4, r5, r6}
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40010000 	.word	0x40010000
 8006c54:	40010400 	.word	0x40010400
 8006c58:	40014800 	.word	0x40014800

08006c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c5c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c5e:	6a03      	ldr	r3, [r0, #32]
 8006c60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c6a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c70:	680d      	ldr	r5, [r1, #0]
 8006c72:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c7a:	688d      	ldr	r5, [r1, #8]
 8006c7c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c80:	4e0f      	ldr	r6, [pc, #60]	; (8006cc0 <TIM_OC6_SetConfig+0x64>)
 8006c82:	4d10      	ldr	r5, [pc, #64]	; (8006cc4 <TIM_OC6_SetConfig+0x68>)
 8006c84:	42a8      	cmp	r0, r5
 8006c86:	bf18      	it	ne
 8006c88:	42b0      	cmpne	r0, r6
 8006c8a:	d00d      	beq.n	8006ca8 <TIM_OC6_SetConfig+0x4c>
 8006c8c:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8006c90:	42a8      	cmp	r0, r5
 8006c92:	bf14      	ite	ne
 8006c94:	2500      	movne	r5, #0
 8006c96:	2501      	moveq	r5, #1
 8006c98:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8006c9c:	42b0      	cmp	r0, r6
 8006c9e:	d003      	beq.n	8006ca8 <TIM_OC6_SetConfig+0x4c>
 8006ca0:	b915      	cbnz	r5, 8006ca8 <TIM_OC6_SetConfig+0x4c>
 8006ca2:	4d09      	ldr	r5, [pc, #36]	; (8006cc8 <TIM_OC6_SetConfig+0x6c>)
 8006ca4:	42a8      	cmp	r0, r5
 8006ca6:	d104      	bne.n	8006cb2 <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ca8:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cac:	694d      	ldr	r5, [r1, #20]
 8006cae:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cb4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cb6:	684a      	ldr	r2, [r1, #4]
 8006cb8:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cba:	6203      	str	r3, [r0, #32]
}
 8006cbc:	bc70      	pop	{r4, r5, r6}
 8006cbe:	4770      	bx	lr
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40010400 	.word	0x40010400
 8006cc8:	40014800 	.word	0x40014800

08006ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ccc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd0:	6a04      	ldr	r4, [r0, #32]
 8006cd2:	f024 0401 	bic.w	r4, r4, #1
 8006cd6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cd8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cda:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cde:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ce2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006ce6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ce8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006cea:	6203      	str	r3, [r0, #32]
}
 8006cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf4:	6a03      	ldr	r3, [r0, #32]
 8006cf6:	f023 0310 	bic.w	r3, r3, #16
 8006cfa:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006cfe:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d00:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d04:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d0c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d10:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006d12:	6203      	str	r3, [r0, #32]
}
 8006d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d18:	4770      	bx	lr
	...

08006d1c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d1c:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d1e:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <TIM_ITRx_SetConfig+0x10>)
 8006d20:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d22:	4319      	orrs	r1, r3
 8006d24:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d28:	6081      	str	r1, [r0, #8]
}
 8006d2a:	4770      	bx	lr
 8006d2c:	ffcfff8f 	.word	0xffcfff8f

08006d30 <TIM_Base_SetConfig>:
{
 8006d30:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8006d32:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d34:	4c37      	ldr	r4, [pc, #220]	; (8006e14 <TIM_Base_SetConfig+0xe4>)
 8006d36:	42a0      	cmp	r0, r4
 8006d38:	bf14      	ite	ne
 8006d3a:	2400      	movne	r4, #0
 8006d3c:	2401      	moveq	r4, #1
 8006d3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006d42:	bf14      	ite	ne
 8006d44:	4622      	movne	r2, r4
 8006d46:	f044 0201 	orreq.w	r2, r4, #1
 8006d4a:	b9aa      	cbnz	r2, 8006d78 <TIM_Base_SetConfig+0x48>
 8006d4c:	4d32      	ldr	r5, [pc, #200]	; (8006e18 <TIM_Base_SetConfig+0xe8>)
 8006d4e:	42a8      	cmp	r0, r5
 8006d50:	bf14      	ite	ne
 8006d52:	2500      	movne	r5, #0
 8006d54:	2501      	moveq	r5, #1
 8006d56:	4e31      	ldr	r6, [pc, #196]	; (8006e1c <TIM_Base_SetConfig+0xec>)
 8006d58:	42b0      	cmp	r0, r6
 8006d5a:	d00d      	beq.n	8006d78 <TIM_Base_SetConfig+0x48>
 8006d5c:	b965      	cbnz	r5, 8006d78 <TIM_Base_SetConfig+0x48>
 8006d5e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8006d62:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8006d66:	42a8      	cmp	r0, r5
 8006d68:	bf14      	ite	ne
 8006d6a:	2500      	movne	r5, #0
 8006d6c:	2501      	moveq	r5, #1
 8006d6e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006d72:	42b0      	cmp	r0, r6
 8006d74:	d000      	beq.n	8006d78 <TIM_Base_SetConfig+0x48>
 8006d76:	b11d      	cbz	r5, 8006d80 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006d7c:	684d      	ldr	r5, [r1, #4]
 8006d7e:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d80:	bb12      	cbnz	r2, 8006dc8 <TIM_Base_SetConfig+0x98>
 8006d82:	4a25      	ldr	r2, [pc, #148]	; (8006e18 <TIM_Base_SetConfig+0xe8>)
 8006d84:	4290      	cmp	r0, r2
 8006d86:	bf14      	ite	ne
 8006d88:	2200      	movne	r2, #0
 8006d8a:	2201      	moveq	r2, #1
 8006d8c:	4d23      	ldr	r5, [pc, #140]	; (8006e1c <TIM_Base_SetConfig+0xec>)
 8006d8e:	42a8      	cmp	r0, r5
 8006d90:	d01a      	beq.n	8006dc8 <TIM_Base_SetConfig+0x98>
 8006d92:	b9ca      	cbnz	r2, 8006dc8 <TIM_Base_SetConfig+0x98>
 8006d94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006d98:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8006d9c:	4290      	cmp	r0, r2
 8006d9e:	bf14      	ite	ne
 8006da0:	2200      	movne	r2, #0
 8006da2:	2201      	moveq	r2, #1
 8006da4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006da8:	42a8      	cmp	r0, r5
 8006daa:	d00d      	beq.n	8006dc8 <TIM_Base_SetConfig+0x98>
 8006dac:	b962      	cbnz	r2, 8006dc8 <TIM_Base_SetConfig+0x98>
 8006dae:	4a1c      	ldr	r2, [pc, #112]	; (8006e20 <TIM_Base_SetConfig+0xf0>)
 8006db0:	4290      	cmp	r0, r2
 8006db2:	bf14      	ite	ne
 8006db4:	2200      	movne	r2, #0
 8006db6:	2201      	moveq	r2, #1
 8006db8:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8006dbc:	42a8      	cmp	r0, r5
 8006dbe:	d003      	beq.n	8006dc8 <TIM_Base_SetConfig+0x98>
 8006dc0:	b912      	cbnz	r2, 8006dc8 <TIM_Base_SetConfig+0x98>
 8006dc2:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <TIM_Base_SetConfig+0xf4>)
 8006dc4:	4290      	cmp	r0, r2
 8006dc6:	d103      	bne.n	8006dd0 <TIM_Base_SetConfig+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dcc:	68ca      	ldr	r2, [r1, #12]
 8006dce:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd4:	694a      	ldr	r2, [r1, #20]
 8006dd6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006dd8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dda:	688a      	ldr	r2, [r1, #8]
 8006ddc:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006dde:	680a      	ldr	r2, [r1, #0]
 8006de0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de2:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <TIM_Base_SetConfig+0xf8>)
 8006de4:	4298      	cmp	r0, r3
 8006de6:	bf14      	ite	ne
 8006de8:	4623      	movne	r3, r4
 8006dea:	f044 0301 	orreq.w	r3, r4, #1
 8006dee:	b95b      	cbnz	r3, 8006e08 <TIM_Base_SetConfig+0xd8>
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <TIM_Base_SetConfig+0xf0>)
 8006df2:	4298      	cmp	r0, r3
 8006df4:	bf14      	ite	ne
 8006df6:	2300      	movne	r3, #0
 8006df8:	2301      	moveq	r3, #1
 8006dfa:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <TIM_Base_SetConfig+0xfc>)
 8006dfc:	4290      	cmp	r0, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_Base_SetConfig+0xd8>
 8006e00:	b913      	cbnz	r3, 8006e08 <TIM_Base_SetConfig+0xd8>
 8006e02:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <TIM_Base_SetConfig+0xf4>)
 8006e04:	4298      	cmp	r0, r3
 8006e06:	d101      	bne.n	8006e0c <TIM_Base_SetConfig+0xdc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006e08:	690b      	ldr	r3, [r1, #16]
 8006e0a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	6143      	str	r3, [r0, #20]
}
 8006e10:	bc70      	pop	{r4, r5, r6}
 8006e12:	4770      	bx	lr
 8006e14:	40010000 	.word	0x40010000
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40014400 	.word	0x40014400
 8006e24:	40014800 	.word	0x40014800
 8006e28:	40010400 	.word	0x40010400
 8006e2c:	40014000 	.word	0x40014000

08006e30 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006e30:	b1a8      	cbz	r0, 8006e5e <HAL_TIM_Base_Init+0x2e>
{
 8006e32:	b510      	push	{r4, lr}
 8006e34:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006e3a:	b15b      	cbz	r3, 8006e54 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e42:	1d21      	adds	r1, r4, #4
 8006e44:	6820      	ldr	r0, [r4, #0]
 8006e46:	f7ff ff73 	bl	8006d30 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006e50:	2000      	movs	r0, #0
}
 8006e52:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006e54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006e58:	f004 f948 	bl	800b0ec <HAL_TIM_Base_MspInit>
 8006e5c:	e7ee      	b.n	8006e3c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006e5e:	2001      	movs	r0, #1
}
 8006e60:	4770      	bx	lr

08006e62 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006e62:	b1a8      	cbz	r0, 8006e90 <HAL_TIM_PWM_Init+0x2e>
{
 8006e64:	b510      	push	{r4, lr}
 8006e66:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006e6c:	b15b      	cbz	r3, 8006e86 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6e:	2302      	movs	r3, #2
 8006e70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e74:	1d21      	adds	r1, r4, #4
 8006e76:	6820      	ldr	r0, [r4, #0]
 8006e78:	f7ff ff5a 	bl	8006d30 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006e82:	2000      	movs	r0, #0
}
 8006e84:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006e86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006e8a:	f004 f915 	bl	800b0b8 <HAL_TIM_PWM_MspInit>
 8006e8e:	e7ee      	b.n	8006e6e <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006e90:	2001      	movs	r0, #1
}
 8006e92:	4770      	bx	lr

08006e94 <TIM_OC2_SetConfig>:
{
 8006e94:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e96:	6a03      	ldr	r3, [r0, #32]
 8006e98:	f023 0310 	bic.w	r3, r3, #16
 8006e9c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006e9e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006ea0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006ea2:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ea4:	4a1a      	ldr	r2, [pc, #104]	; (8006f10 <TIM_OC2_SetConfig+0x7c>)
 8006ea6:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea8:	680e      	ldr	r6, [r1, #0]
 8006eaa:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006eae:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eb2:	688a      	ldr	r2, [r1, #8]
 8006eb4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006eb8:	4a16      	ldr	r2, [pc, #88]	; (8006f14 <TIM_OC2_SetConfig+0x80>)
 8006eba:	4d17      	ldr	r5, [pc, #92]	; (8006f18 <TIM_OC2_SetConfig+0x84>)
 8006ebc:	42a8      	cmp	r0, r5
 8006ebe:	bf18      	it	ne
 8006ec0:	4290      	cmpne	r0, r2
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2201      	moveq	r2, #1
 8006ec6:	2200      	movne	r2, #0
 8006ec8:	d106      	bne.n	8006ed8 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ece:	68cd      	ldr	r5, [r1, #12]
 8006ed0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed8:	b95a      	cbnz	r2, 8006ef2 <TIM_OC2_SetConfig+0x5e>
 8006eda:	4a10      	ldr	r2, [pc, #64]	; (8006f1c <TIM_OC2_SetConfig+0x88>)
 8006edc:	4290      	cmp	r0, r2
 8006ede:	bf14      	ite	ne
 8006ee0:	2200      	movne	r2, #0
 8006ee2:	2201      	moveq	r2, #1
 8006ee4:	4d0e      	ldr	r5, [pc, #56]	; (8006f20 <TIM_OC2_SetConfig+0x8c>)
 8006ee6:	42a8      	cmp	r0, r5
 8006ee8:	d003      	beq.n	8006ef2 <TIM_OC2_SetConfig+0x5e>
 8006eea:	b912      	cbnz	r2, 8006ef2 <TIM_OC2_SetConfig+0x5e>
 8006eec:	4a0d      	ldr	r2, [pc, #52]	; (8006f24 <TIM_OC2_SetConfig+0x90>)
 8006eee:	4290      	cmp	r0, r2
 8006ef0:	d107      	bne.n	8006f02 <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ef2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ef6:	694a      	ldr	r2, [r1, #20]
 8006ef8:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006efc:	698a      	ldr	r2, [r1, #24]
 8006efe:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 8006f02:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006f04:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006f06:	684a      	ldr	r2, [r1, #4]
 8006f08:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006f0a:	6203      	str	r3, [r0, #32]
}
 8006f0c:	bc70      	pop	{r4, r5, r6}
 8006f0e:	4770      	bx	lr
 8006f10:	feff8cff 	.word	0xfeff8cff
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40010400 	.word	0x40010400
 8006f1c:	40014400 	.word	0x40014400
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40014800 	.word	0x40014800

08006f28 <HAL_TIM_PWM_ConfigChannel>:
{
 8006f28:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006f2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	f000 8092 	beq.w	8007058 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006f34:	460d      	mov	r5, r1
 8006f36:	4604      	mov	r4, r0
 8006f38:	2301      	movs	r3, #1
 8006f3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8006f44:	2a14      	cmp	r2, #20
 8006f46:	d81e      	bhi.n	8006f86 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8006f48:	e8df f002 	tbb	[pc, r2]
 8006f4c:	1d1d1d0b 	.word	0x1d1d1d0b
 8006f50:	1d1d1d24 	.word	0x1d1d1d24
 8006f54:	1d1d1d38 	.word	0x1d1d1d38
 8006f58:	1d1d1d4b 	.word	0x1d1d1d4b
 8006f5c:	1d1d1d5f 	.word	0x1d1d1d5f
 8006f60:	72          	.byte	0x72
 8006f61:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f62:	6800      	ldr	r0, [r0, #0]
 8006f64:	f7ff fd70 	bl	8006a48 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f68:	6822      	ldr	r2, [r4, #0]
 8006f6a:	6993      	ldr	r3, [r2, #24]
 8006f6c:	f043 0308 	orr.w	r3, r3, #8
 8006f70:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	6993      	ldr	r3, [r2, #24]
 8006f76:	f023 0304 	bic.w	r3, r3, #4
 8006f7a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f7c:	6822      	ldr	r2, [r4, #0]
 8006f7e:	6993      	ldr	r3, [r2, #24]
 8006f80:	6929      	ldr	r1, [r5, #16]
 8006f82:	430b      	orrs	r3, r1
 8006f84:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8006f86:	2301      	movs	r3, #1
 8006f88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f94:	6800      	ldr	r0, [r0, #0]
 8006f96:	f7ff ff7d 	bl	8006e94 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	6993      	ldr	r3, [r2, #24]
 8006f9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fa2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fa4:	6822      	ldr	r2, [r4, #0]
 8006fa6:	6993      	ldr	r3, [r2, #24]
 8006fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	6993      	ldr	r3, [r2, #24]
 8006fb2:	6929      	ldr	r1, [r5, #16]
 8006fb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006fb8:	6193      	str	r3, [r2, #24]
      break;
 8006fba:	e7e4      	b.n	8006f86 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	f7ff fd95 	bl	8006aec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	69d3      	ldr	r3, [r2, #28]
 8006fc6:	f043 0308 	orr.w	r3, r3, #8
 8006fca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fcc:	6822      	ldr	r2, [r4, #0]
 8006fce:	69d3      	ldr	r3, [r2, #28]
 8006fd0:	f023 0304 	bic.w	r3, r3, #4
 8006fd4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fd6:	6822      	ldr	r2, [r4, #0]
 8006fd8:	69d3      	ldr	r3, [r2, #28]
 8006fda:	6929      	ldr	r1, [r5, #16]
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	61d3      	str	r3, [r2, #28]
      break;
 8006fe0:	e7d1      	b.n	8006f86 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fe2:	6800      	ldr	r0, [r0, #0]
 8006fe4:	f7ff fdca 	bl	8006b7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	69d3      	ldr	r3, [r2, #28]
 8006fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ff0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ff2:	6822      	ldr	r2, [r4, #0]
 8006ff4:	69d3      	ldr	r3, [r2, #28]
 8006ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ffa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	69d3      	ldr	r3, [r2, #28]
 8007000:	6929      	ldr	r1, [r5, #16]
 8007002:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007006:	61d3      	str	r3, [r2, #28]
      break;
 8007008:	e7bd      	b.n	8006f86 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	f7ff fdee 	bl	8006bec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007010:	6822      	ldr	r2, [r4, #0]
 8007012:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007014:	f043 0308 	orr.w	r3, r3, #8
 8007018:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800701e:	f023 0304 	bic.w	r3, r3, #4
 8007022:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007024:	6822      	ldr	r2, [r4, #0]
 8007026:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007028:	6929      	ldr	r1, [r5, #16]
 800702a:	430b      	orrs	r3, r1
 800702c:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800702e:	e7aa      	b.n	8006f86 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007030:	6800      	ldr	r0, [r0, #0]
 8007032:	f7ff fe13 	bl	8006c5c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800703a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800703e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007044:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007048:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800704e:	6929      	ldr	r1, [r5, #16]
 8007050:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007054:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8007056:	e796      	b.n	8006f86 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8007058:	2002      	movs	r0, #2
 800705a:	e79a      	b.n	8006f92 <HAL_TIM_PWM_ConfigChannel+0x6a>

0800705c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800705c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800705e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007060:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007064:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007068:	430b      	orrs	r3, r1
 800706a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800706c:	6083      	str	r3, [r0, #8]
}
 800706e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007074:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007078:	2b01      	cmp	r3, #1
 800707a:	d074      	beq.n	8007166 <HAL_TIM_ConfigClockSource+0xf2>
{
 800707c:	b510      	push	{r4, lr}
 800707e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007080:	2301      	movs	r3, #1
 8007082:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007086:	2302      	movs	r3, #2
 8007088:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800708c:	6802      	ldr	r2, [r0, #0]
 800708e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007090:	4b36      	ldr	r3, [pc, #216]	; (800716c <HAL_TIM_ConfigClockSource+0xf8>)
 8007092:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8007094:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007096:	680b      	ldr	r3, [r1, #0]
 8007098:	2b60      	cmp	r3, #96	; 0x60
 800709a:	d050      	beq.n	800713e <HAL_TIM_ConfigClockSource+0xca>
 800709c:	d91d      	bls.n	80070da <HAL_TIM_ConfigClockSource+0x66>
 800709e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80070a2:	d02e      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x8e>
 80070a4:	d835      	bhi.n	8007112 <HAL_TIM_ConfigClockSource+0x9e>
 80070a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070aa:	d03c      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0xb2>
 80070ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b0:	d027      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x8e>
 80070b2:	2b70      	cmp	r3, #112	; 0x70
 80070b4:	d10a      	bne.n	80070cc <HAL_TIM_ConfigClockSource+0x58>
      TIM_ETR_SetConfig(htim->Instance,
 80070b6:	68cb      	ldr	r3, [r1, #12]
 80070b8:	684a      	ldr	r2, [r1, #4]
 80070ba:	6889      	ldr	r1, [r1, #8]
 80070bc:	6820      	ldr	r0, [r4, #0]
 80070be:	f7ff ffcd 	bl	800705c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80070ca:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	2301      	movs	r3, #1
 80070ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80070d2:	2000      	movs	r0, #0
 80070d4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80070d8:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d011      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x8e>
 80070de:	d90d      	bls.n	80070fc <HAL_TIM_ConfigClockSource+0x88>
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d036      	beq.n	8007152 <HAL_TIM_ConfigClockSource+0xde>
 80070e4:	2b50      	cmp	r3, #80	; 0x50
 80070e6:	d111      	bne.n	800710c <HAL_TIM_ConfigClockSource+0x98>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e8:	68ca      	ldr	r2, [r1, #12]
 80070ea:	6849      	ldr	r1, [r1, #4]
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	f7ff fded 	bl	8006ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070f2:	2150      	movs	r1, #80	; 0x50
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	f7ff fe11 	bl	8006d1c <TIM_ITRx_SetConfig>
      break;
 80070fa:	e7e7      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80070fc:	b10b      	cbz	r3, 8007102 <HAL_TIM_ConfigClockSource+0x8e>
 80070fe:	2b10      	cmp	r3, #16
 8007100:	d1e4      	bne.n	80070cc <HAL_TIM_ConfigClockSource+0x58>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007102:	4619      	mov	r1, r3
 8007104:	6820      	ldr	r0, [r4, #0]
 8007106:	f7ff fe09 	bl	8006d1c <TIM_ITRx_SetConfig>
      break;
 800710a:	e7df      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 800710c:	2b30      	cmp	r3, #48	; 0x30
 800710e:	d1dd      	bne.n	80070cc <HAL_TIM_ConfigClockSource+0x58>
 8007110:	e7f7      	b.n	8007102 <HAL_TIM_ConfigClockSource+0x8e>
 8007112:	4a17      	ldr	r2, [pc, #92]	; (8007170 <HAL_TIM_ConfigClockSource+0xfc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d0f4      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x8e>
 8007118:	3210      	adds	r2, #16
 800711a:	4293      	cmp	r3, r2
 800711c:	d0f1      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x8e>
 800711e:	3a20      	subs	r2, #32
 8007120:	4293      	cmp	r3, r2
 8007122:	d1d3      	bne.n	80070cc <HAL_TIM_ConfigClockSource+0x58>
 8007124:	e7ed      	b.n	8007102 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_ETR_SetConfig(htim->Instance,
 8007126:	68cb      	ldr	r3, [r1, #12]
 8007128:	684a      	ldr	r2, [r1, #4]
 800712a:	6889      	ldr	r1, [r1, #8]
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	f7ff ff95 	bl	800705c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	6893      	ldr	r3, [r2, #8]
 8007136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800713a:	6093      	str	r3, [r2, #8]
      break;
 800713c:	e7c6      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800713e:	68ca      	ldr	r2, [r1, #12]
 8007140:	6849      	ldr	r1, [r1, #4]
 8007142:	6820      	ldr	r0, [r4, #0]
 8007144:	f7ff fdd5 	bl	8006cf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007148:	2160      	movs	r1, #96	; 0x60
 800714a:	6820      	ldr	r0, [r4, #0]
 800714c:	f7ff fde6 	bl	8006d1c <TIM_ITRx_SetConfig>
      break;
 8007150:	e7bc      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007152:	68ca      	ldr	r2, [r1, #12]
 8007154:	6849      	ldr	r1, [r1, #4]
 8007156:	6820      	ldr	r0, [r4, #0]
 8007158:	f7ff fdb8 	bl	8006ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800715c:	2140      	movs	r1, #64	; 0x40
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	f7ff fddc 	bl	8006d1c <TIM_ITRx_SetConfig>
      break;
 8007164:	e7b2      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8007166:	2002      	movs	r0, #2
}
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	ffce0088 	.word	0xffce0088
 8007170:	00100030 	.word	0x00100030

08007174 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007174:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d041      	beq.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
{
 800717c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800717e:	2301      	movs	r3, #1
 8007180:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007184:	2302      	movs	r3, #2
 8007186:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800718a:	6803      	ldr	r3, [r0, #0]
 800718c:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800718e:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007190:	4e1c      	ldr	r6, [pc, #112]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8007192:	4c1d      	ldr	r4, [pc, #116]	; (8007208 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8007194:	42a3      	cmp	r3, r4
 8007196:	bf18      	it	ne
 8007198:	42b3      	cmpne	r3, r6
 800719a:	d103      	bne.n	80071a4 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800719c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071a0:	684c      	ldr	r4, [r1, #4]
 80071a2:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071a8:	680c      	ldr	r4, [r1, #0]
 80071aa:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ae:	6803      	ldr	r3, [r0, #0]
 80071b0:	4a14      	ldr	r2, [pc, #80]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80071b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b6:	bf18      	it	ne
 80071b8:	4293      	cmpne	r3, r2
 80071ba:	d013      	beq.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80071bc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00f      	beq.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80071c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00b      	beq.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80071cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80071d4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80071dc:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d104      	bne.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071e4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071e8:	688a      	ldr	r2, [r1, #8]
 80071ea:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071ec:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071f4:	2300      	movs	r3, #0
 80071f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80071fa:	4618      	mov	r0, r3
}
 80071fc:	bc70      	pop	{r4, r5, r6}
 80071fe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007200:	2002      	movs	r0, #2
}
 8007202:	4770      	bx	lr
 8007204:	40010000 	.word	0x40010000
 8007208:	40010400 	.word	0x40010400

0800720c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800720c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d03c      	beq.n	800728e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 8007214:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8007216:	2301      	movs	r3, #1
 8007218:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800721c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800721e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007222:	688a      	ldr	r2, [r1, #8]
 8007224:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800722a:	684a      	ldr	r2, [r1, #4]
 800722c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800722e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007232:	680a      	ldr	r2, [r1, #0]
 8007234:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800723a:	690a      	ldr	r2, [r1, #16]
 800723c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800723e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007242:	694a      	ldr	r2, [r1, #20]
 8007244:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800724a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800724c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800724e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8007252:	698a      	ldr	r2, [r1, #24]
 8007254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007258:	6802      	ldr	r2, [r0, #0]
 800725a:	4d0e      	ldr	r5, [pc, #56]	; (8007294 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 800725c:	4c0e      	ldr	r4, [pc, #56]	; (8007298 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800725e:	42a2      	cmp	r2, r4
 8007260:	bf18      	it	ne
 8007262:	42aa      	cmpne	r2, r5
 8007264:	d10c      	bne.n	8007280 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007266:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800726a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800726c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007274:	69cc      	ldr	r4, [r1, #28]
 8007276:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007278:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800727c:	6a09      	ldr	r1, [r1, #32]
 800727e:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007280:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007282:	2300      	movs	r3, #0
 8007284:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007288:	4618      	mov	r0, r3
}
 800728a:	bc30      	pop	{r4, r5}
 800728c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800728e:	2002      	movs	r0, #2
}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	40010000 	.word	0x40010000
 8007298:	40010400 	.word	0x40010400
 800729c:	00000000 	.word	0x00000000

080072a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072a4:	b087      	sub	sp, #28
 80072a6:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80072a8:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072aa:	6883      	ldr	r3, [r0, #8]
 80072ac:	6902      	ldr	r2, [r0, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	6942      	ldr	r2, [r0, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	69c2      	ldr	r2, [r0, #28]
 80072b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 80072b8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80072ba:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072bc:	6808      	ldr	r0, [r1, #0]
 80072be:	4a87      	ldr	r2, [pc, #540]	; (80074dc <UART_SetConfig+0x23c>)
 80072c0:	4002      	ands	r2, r0
 80072c2:	431a      	orrs	r2, r3
 80072c4:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	6853      	ldr	r3, [r2, #4]
 80072ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072ce:	68e1      	ldr	r1, [r4, #12]
 80072d0:	430b      	orrs	r3, r1
 80072d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072d4:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072d6:	6822      	ldr	r2, [r4, #0]
 80072d8:	4b81      	ldr	r3, [pc, #516]	; (80074e0 <UART_SetConfig+0x240>)
 80072da:	429a      	cmp	r2, r3
 80072dc:	d001      	beq.n	80072e2 <UART_SetConfig+0x42>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072de:	6a23      	ldr	r3, [r4, #32]
 80072e0:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072e2:	6890      	ldr	r0, [r2, #8]
 80072e4:	4b7f      	ldr	r3, [pc, #508]	; (80074e4 <UART_SetConfig+0x244>)
 80072e6:	4003      	ands	r3, r0
 80072e8:	430b      	orrs	r3, r1
 80072ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072ec:	6822      	ldr	r2, [r4, #0]
 80072ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80072f0:	f023 030f 	bic.w	r3, r3, #15
 80072f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072f6:	430b      	orrs	r3, r1
 80072f8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	4a7a      	ldr	r2, [pc, #488]	; (80074e8 <UART_SetConfig+0x248>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d01f      	beq.n	8007342 <UART_SetConfig+0xa2>
 8007302:	4a7a      	ldr	r2, [pc, #488]	; (80074ec <UART_SetConfig+0x24c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d059      	beq.n	80073bc <UART_SetConfig+0x11c>
 8007308:	4a79      	ldr	r2, [pc, #484]	; (80074f0 <UART_SetConfig+0x250>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d070      	beq.n	80073f0 <UART_SetConfig+0x150>
 800730e:	4a79      	ldr	r2, [pc, #484]	; (80074f4 <UART_SetConfig+0x254>)
 8007310:	4293      	cmp	r3, r2
 8007312:	f000 8087 	beq.w	8007424 <UART_SetConfig+0x184>
 8007316:	4a78      	ldr	r2, [pc, #480]	; (80074f8 <UART_SetConfig+0x258>)
 8007318:	4293      	cmp	r3, r2
 800731a:	f000 809d 	beq.w	8007458 <UART_SetConfig+0x1b8>
 800731e:	4a77      	ldr	r2, [pc, #476]	; (80074fc <UART_SetConfig+0x25c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	f000 80b3 	beq.w	800748c <UART_SetConfig+0x1ec>
 8007326:	4a76      	ldr	r2, [pc, #472]	; (8007500 <UART_SetConfig+0x260>)
 8007328:	4293      	cmp	r3, r2
 800732a:	f000 80f1 	beq.w	8007510 <UART_SetConfig+0x270>
 800732e:	4a75      	ldr	r2, [pc, #468]	; (8007504 <UART_SetConfig+0x264>)
 8007330:	4293      	cmp	r3, r2
 8007332:	f000 8104 	beq.w	800753e <UART_SetConfig+0x29e>
 8007336:	4a6a      	ldr	r2, [pc, #424]	; (80074e0 <UART_SetConfig+0x240>)
 8007338:	4293      	cmp	r3, r2
 800733a:	f000 8117 	beq.w	800756c <UART_SetConfig+0x2cc>
 800733e:	2580      	movs	r5, #128	; 0x80
 8007340:	e12d      	b.n	800759e <UART_SetConfig+0x2fe>
 8007342:	4a71      	ldr	r2, [pc, #452]	; (8007508 <UART_SetConfig+0x268>)
 8007344:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007346:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800734a:	2a28      	cmp	r2, #40	; 0x28
 800734c:	d834      	bhi.n	80073b8 <UART_SetConfig+0x118>
 800734e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007352:	0029      	.short	0x0029
 8007354:	00330033 	.word	0x00330033
 8007358:	00330033 	.word	0x00330033
 800735c:	00330033 	.word	0x00330033
 8007360:	01250033 	.word	0x01250033
 8007364:	00330033 	.word	0x00330033
 8007368:	00330033 	.word	0x00330033
 800736c:	00330033 	.word	0x00330033
 8007370:	002b0033 	.word	0x002b0033
 8007374:	00330033 	.word	0x00330033
 8007378:	00330033 	.word	0x00330033
 800737c:	00330033 	.word	0x00330033
 8007380:	002d0033 	.word	0x002d0033
 8007384:	00330033 	.word	0x00330033
 8007388:	00330033 	.word	0x00330033
 800738c:	00330033 	.word	0x00330033
 8007390:	002f0033 	.word	0x002f0033
 8007394:	00330033 	.word	0x00330033
 8007398:	00330033 	.word	0x00330033
 800739c:	00330033 	.word	0x00330033
 80073a0:	00310033 	.word	0x00310033
 80073a4:	2501      	movs	r5, #1
 80073a6:	e0fa      	b.n	800759e <UART_SetConfig+0x2fe>
 80073a8:	2508      	movs	r5, #8
 80073aa:	e0f8      	b.n	800759e <UART_SetConfig+0x2fe>
 80073ac:	2510      	movs	r5, #16
 80073ae:	e0f6      	b.n	800759e <UART_SetConfig+0x2fe>
 80073b0:	2520      	movs	r5, #32
 80073b2:	e0f4      	b.n	800759e <UART_SetConfig+0x2fe>
 80073b4:	2540      	movs	r5, #64	; 0x40
 80073b6:	e0f2      	b.n	800759e <UART_SetConfig+0x2fe>
 80073b8:	2580      	movs	r5, #128	; 0x80
 80073ba:	e0f0      	b.n	800759e <UART_SetConfig+0x2fe>
 80073bc:	4a52      	ldr	r2, [pc, #328]	; (8007508 <UART_SetConfig+0x268>)
 80073be:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80073c0:	f002 0207 	and.w	r2, r2, #7
 80073c4:	2a05      	cmp	r2, #5
 80073c6:	d811      	bhi.n	80073ec <UART_SetConfig+0x14c>
 80073c8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80073cc:	01370006 	.word	0x01370006
 80073d0:	000a0008 	.word	0x000a0008
 80073d4:	000e000c 	.word	0x000e000c
 80073d8:	2500      	movs	r5, #0
 80073da:	e0e0      	b.n	800759e <UART_SetConfig+0x2fe>
 80073dc:	2508      	movs	r5, #8
 80073de:	e0de      	b.n	800759e <UART_SetConfig+0x2fe>
 80073e0:	2510      	movs	r5, #16
 80073e2:	e0dc      	b.n	800759e <UART_SetConfig+0x2fe>
 80073e4:	2520      	movs	r5, #32
 80073e6:	e0da      	b.n	800759e <UART_SetConfig+0x2fe>
 80073e8:	2540      	movs	r5, #64	; 0x40
 80073ea:	e0d8      	b.n	800759e <UART_SetConfig+0x2fe>
 80073ec:	2580      	movs	r5, #128	; 0x80
 80073ee:	e0d6      	b.n	800759e <UART_SetConfig+0x2fe>
 80073f0:	4a45      	ldr	r2, [pc, #276]	; (8007508 <UART_SetConfig+0x268>)
 80073f2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80073f4:	f002 0207 	and.w	r2, r2, #7
 80073f8:	2a05      	cmp	r2, #5
 80073fa:	d811      	bhi.n	8007420 <UART_SetConfig+0x180>
 80073fc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007400:	011f0006 	.word	0x011f0006
 8007404:	000a0008 	.word	0x000a0008
 8007408:	000e000c 	.word	0x000e000c
 800740c:	2500      	movs	r5, #0
 800740e:	e0c6      	b.n	800759e <UART_SetConfig+0x2fe>
 8007410:	2508      	movs	r5, #8
 8007412:	e0c4      	b.n	800759e <UART_SetConfig+0x2fe>
 8007414:	2510      	movs	r5, #16
 8007416:	e0c2      	b.n	800759e <UART_SetConfig+0x2fe>
 8007418:	2520      	movs	r5, #32
 800741a:	e0c0      	b.n	800759e <UART_SetConfig+0x2fe>
 800741c:	2540      	movs	r5, #64	; 0x40
 800741e:	e0be      	b.n	800759e <UART_SetConfig+0x2fe>
 8007420:	2580      	movs	r5, #128	; 0x80
 8007422:	e0bc      	b.n	800759e <UART_SetConfig+0x2fe>
 8007424:	4a38      	ldr	r2, [pc, #224]	; (8007508 <UART_SetConfig+0x268>)
 8007426:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007428:	f002 0207 	and.w	r2, r2, #7
 800742c:	2a05      	cmp	r2, #5
 800742e:	d811      	bhi.n	8007454 <UART_SetConfig+0x1b4>
 8007430:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007434:	01070006 	.word	0x01070006
 8007438:	000a0008 	.word	0x000a0008
 800743c:	000e000c 	.word	0x000e000c
 8007440:	2500      	movs	r5, #0
 8007442:	e0ac      	b.n	800759e <UART_SetConfig+0x2fe>
 8007444:	2508      	movs	r5, #8
 8007446:	e0aa      	b.n	800759e <UART_SetConfig+0x2fe>
 8007448:	2510      	movs	r5, #16
 800744a:	e0a8      	b.n	800759e <UART_SetConfig+0x2fe>
 800744c:	2520      	movs	r5, #32
 800744e:	e0a6      	b.n	800759e <UART_SetConfig+0x2fe>
 8007450:	2540      	movs	r5, #64	; 0x40
 8007452:	e0a4      	b.n	800759e <UART_SetConfig+0x2fe>
 8007454:	2580      	movs	r5, #128	; 0x80
 8007456:	e0a2      	b.n	800759e <UART_SetConfig+0x2fe>
 8007458:	4a2b      	ldr	r2, [pc, #172]	; (8007508 <UART_SetConfig+0x268>)
 800745a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800745c:	f002 0207 	and.w	r2, r2, #7
 8007460:	2a05      	cmp	r2, #5
 8007462:	d811      	bhi.n	8007488 <UART_SetConfig+0x1e8>
 8007464:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007468:	00ef0006 	.word	0x00ef0006
 800746c:	000a0008 	.word	0x000a0008
 8007470:	000e000c 	.word	0x000e000c
 8007474:	2500      	movs	r5, #0
 8007476:	e092      	b.n	800759e <UART_SetConfig+0x2fe>
 8007478:	2508      	movs	r5, #8
 800747a:	e090      	b.n	800759e <UART_SetConfig+0x2fe>
 800747c:	2510      	movs	r5, #16
 800747e:	e08e      	b.n	800759e <UART_SetConfig+0x2fe>
 8007480:	2520      	movs	r5, #32
 8007482:	e08c      	b.n	800759e <UART_SetConfig+0x2fe>
 8007484:	2540      	movs	r5, #64	; 0x40
 8007486:	e08a      	b.n	800759e <UART_SetConfig+0x2fe>
 8007488:	2580      	movs	r5, #128	; 0x80
 800748a:	e088      	b.n	800759e <UART_SetConfig+0x2fe>
 800748c:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <UART_SetConfig+0x268>)
 800748e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007490:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8007494:	2a28      	cmp	r2, #40	; 0x28
 8007496:	d839      	bhi.n	800750c <UART_SetConfig+0x26c>
 8007498:	e8df f002 	tbb	[pc, r2]
 800749c:	38383815 	.word	0x38383815
 80074a0:	38383838 	.word	0x38383838
 80074a4:	383838d7 	.word	0x383838d7
 80074a8:	38383838 	.word	0x38383838
 80074ac:	38383817 	.word	0x38383817
 80074b0:	38383838 	.word	0x38383838
 80074b4:	38383819 	.word	0x38383819
 80074b8:	38383838 	.word	0x38383838
 80074bc:	3838381b 	.word	0x3838381b
 80074c0:	38383838 	.word	0x38383838
 80074c4:	1d          	.byte	0x1d
 80074c5:	00          	.byte	0x00
 80074c6:	2501      	movs	r5, #1
 80074c8:	e069      	b.n	800759e <UART_SetConfig+0x2fe>
 80074ca:	2508      	movs	r5, #8
 80074cc:	e067      	b.n	800759e <UART_SetConfig+0x2fe>
 80074ce:	2510      	movs	r5, #16
 80074d0:	e065      	b.n	800759e <UART_SetConfig+0x2fe>
 80074d2:	2520      	movs	r5, #32
 80074d4:	e063      	b.n	800759e <UART_SetConfig+0x2fe>
 80074d6:	2540      	movs	r5, #64	; 0x40
 80074d8:	e061      	b.n	800759e <UART_SetConfig+0x2fe>
 80074da:	bf00      	nop
 80074dc:	cfff69f3 	.word	0xcfff69f3
 80074e0:	58000c00 	.word	0x58000c00
 80074e4:	11fff4ff 	.word	0x11fff4ff
 80074e8:	40011000 	.word	0x40011000
 80074ec:	40004400 	.word	0x40004400
 80074f0:	40004800 	.word	0x40004800
 80074f4:	40004c00 	.word	0x40004c00
 80074f8:	40005000 	.word	0x40005000
 80074fc:	40011400 	.word	0x40011400
 8007500:	40007800 	.word	0x40007800
 8007504:	40007c00 	.word	0x40007c00
 8007508:	58024400 	.word	0x58024400
 800750c:	2580      	movs	r5, #128	; 0x80
 800750e:	e046      	b.n	800759e <UART_SetConfig+0x2fe>
 8007510:	4a99      	ldr	r2, [pc, #612]	; (8007778 <UART_SetConfig+0x4d8>)
 8007512:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007514:	f002 0207 	and.w	r2, r2, #7
 8007518:	2a05      	cmp	r2, #5
 800751a:	d80e      	bhi.n	800753a <UART_SetConfig+0x29a>
 800751c:	e8df f002 	tbb	[pc, r2]
 8007520:	07059703 	.word	0x07059703
 8007524:	0b09      	.short	0x0b09
 8007526:	2500      	movs	r5, #0
 8007528:	e039      	b.n	800759e <UART_SetConfig+0x2fe>
 800752a:	2508      	movs	r5, #8
 800752c:	e037      	b.n	800759e <UART_SetConfig+0x2fe>
 800752e:	2510      	movs	r5, #16
 8007530:	e035      	b.n	800759e <UART_SetConfig+0x2fe>
 8007532:	2520      	movs	r5, #32
 8007534:	e033      	b.n	800759e <UART_SetConfig+0x2fe>
 8007536:	2540      	movs	r5, #64	; 0x40
 8007538:	e031      	b.n	800759e <UART_SetConfig+0x2fe>
 800753a:	2580      	movs	r5, #128	; 0x80
 800753c:	e02f      	b.n	800759e <UART_SetConfig+0x2fe>
 800753e:	4a8e      	ldr	r2, [pc, #568]	; (8007778 <UART_SetConfig+0x4d8>)
 8007540:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007542:	f002 0207 	and.w	r2, r2, #7
 8007546:	2a05      	cmp	r2, #5
 8007548:	d80e      	bhi.n	8007568 <UART_SetConfig+0x2c8>
 800754a:	e8df f002 	tbb	[pc, r2]
 800754e:	8203      	.short	0x8203
 8007550:	0b090705 	.word	0x0b090705
 8007554:	2500      	movs	r5, #0
 8007556:	e022      	b.n	800759e <UART_SetConfig+0x2fe>
 8007558:	2508      	movs	r5, #8
 800755a:	e020      	b.n	800759e <UART_SetConfig+0x2fe>
 800755c:	2510      	movs	r5, #16
 800755e:	e01e      	b.n	800759e <UART_SetConfig+0x2fe>
 8007560:	2520      	movs	r5, #32
 8007562:	e01c      	b.n	800759e <UART_SetConfig+0x2fe>
 8007564:	2540      	movs	r5, #64	; 0x40
 8007566:	e01a      	b.n	800759e <UART_SetConfig+0x2fe>
 8007568:	2580      	movs	r5, #128	; 0x80
 800756a:	e018      	b.n	800759e <UART_SetConfig+0x2fe>
 800756c:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8007570:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007572:	f002 0207 	and.w	r2, r2, #7
 8007576:	2a05      	cmp	r2, #5
 8007578:	d80e      	bhi.n	8007598 <UART_SetConfig+0x2f8>
 800757a:	e8df f002 	tbb	[pc, r2]
 800757e:	6c03      	.short	0x6c03
 8007580:	0b090705 	.word	0x0b090705
 8007584:	2502      	movs	r5, #2
 8007586:	e00a      	b.n	800759e <UART_SetConfig+0x2fe>
 8007588:	2508      	movs	r5, #8
 800758a:	e008      	b.n	800759e <UART_SetConfig+0x2fe>
 800758c:	2510      	movs	r5, #16
 800758e:	e006      	b.n	800759e <UART_SetConfig+0x2fe>
 8007590:	2520      	movs	r5, #32
 8007592:	e004      	b.n	800759e <UART_SetConfig+0x2fe>
 8007594:	2540      	movs	r5, #64	; 0x40
 8007596:	e002      	b.n	800759e <UART_SetConfig+0x2fe>
 8007598:	2580      	movs	r5, #128	; 0x80
 800759a:	e000      	b.n	800759e <UART_SetConfig+0x2fe>
 800759c:	2504      	movs	r5, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800759e:	4a77      	ldr	r2, [pc, #476]	; (800777c <UART_SetConfig+0x4dc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d05a      	beq.n	800765a <UART_SetConfig+0x3ba>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075a4:	69e3      	ldr	r3, [r4, #28]
 80075a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075aa:	f000 8517 	beq.w	8007fdc <UART_SetConfig+0xd3c>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80075ae:	2d40      	cmp	r5, #64	; 0x40
 80075b0:	f201 81bb 	bhi.w	800892a <UART_SetConfig+0x168a>
 80075b4:	e8df f015 	tbh	[pc, r5, lsl #1]
 80075b8:	07fa076c 	.word	0x07fa076c
 80075bc:	09b909b9 	.word	0x09b909b9
 80075c0:	09b90838 	.word	0x09b90838
 80075c4:	09b909b9 	.word	0x09b909b9
 80075c8:	09b90878 	.word	0x09b90878
 80075cc:	09b909b9 	.word	0x09b909b9
 80075d0:	09b909b9 	.word	0x09b909b9
 80075d4:	09b909b9 	.word	0x09b909b9
 80075d8:	09b908b8 	.word	0x09b908b8
 80075dc:	09b909b9 	.word	0x09b909b9
 80075e0:	09b909b9 	.word	0x09b909b9
 80075e4:	09b909b9 	.word	0x09b909b9
 80075e8:	09b909b9 	.word	0x09b909b9
 80075ec:	09b909b9 	.word	0x09b909b9
 80075f0:	09b909b9 	.word	0x09b909b9
 80075f4:	09b909b9 	.word	0x09b909b9
 80075f8:	09b90938 	.word	0x09b90938
 80075fc:	09b909b9 	.word	0x09b909b9
 8007600:	09b909b9 	.word	0x09b909b9
 8007604:	09b909b9 	.word	0x09b909b9
 8007608:	09b909b9 	.word	0x09b909b9
 800760c:	09b909b9 	.word	0x09b909b9
 8007610:	09b909b9 	.word	0x09b909b9
 8007614:	09b909b9 	.word	0x09b909b9
 8007618:	09b909b9 	.word	0x09b909b9
 800761c:	09b909b9 	.word	0x09b909b9
 8007620:	09b909b9 	.word	0x09b909b9
 8007624:	09b909b9 	.word	0x09b909b9
 8007628:	09b909b9 	.word	0x09b909b9
 800762c:	09b909b9 	.word	0x09b909b9
 8007630:	09b909b9 	.word	0x09b909b9
 8007634:	09b909b9 	.word	0x09b909b9
 8007638:	0974      	.short	0x0974
  UART_GETCLOCKSOURCE(huart, clocksource);
 800763a:	2504      	movs	r5, #4
 800763c:	e7af      	b.n	800759e <UART_SetConfig+0x2fe>
 800763e:	2504      	movs	r5, #4
 8007640:	e7ad      	b.n	800759e <UART_SetConfig+0x2fe>
 8007642:	2504      	movs	r5, #4
 8007644:	e7ab      	b.n	800759e <UART_SetConfig+0x2fe>
 8007646:	2504      	movs	r5, #4
 8007648:	e7a9      	b.n	800759e <UART_SetConfig+0x2fe>
 800764a:	2504      	movs	r5, #4
 800764c:	e7a7      	b.n	800759e <UART_SetConfig+0x2fe>
 800764e:	2504      	movs	r5, #4
 8007650:	e7a5      	b.n	800759e <UART_SetConfig+0x2fe>
 8007652:	2504      	movs	r5, #4
 8007654:	e7a3      	b.n	800759e <UART_SetConfig+0x2fe>
 8007656:	2504      	movs	r5, #4
 8007658:	e7a1      	b.n	800759e <UART_SetConfig+0x2fe>
    switch (clocksource)
 800765a:	2d08      	cmp	r5, #8
 800765c:	f000 80a4 	beq.w	80077a8 <UART_SetConfig+0x508>
 8007660:	d90b      	bls.n	800767a <UART_SetConfig+0x3da>
 8007662:	2d20      	cmp	r5, #32
 8007664:	f000 8134 	beq.w	80078d0 <UART_SetConfig+0x630>
 8007668:	2d40      	cmp	r5, #64	; 0x40
 800766a:	f000 814f 	beq.w	800790c <UART_SetConfig+0x66c>
 800766e:	2d10      	cmp	r5, #16
 8007670:	f000 80d3 	beq.w	800781a <UART_SetConfig+0x57a>
        ret = HAL_ERROR;
 8007674:	2001      	movs	r0, #1
 8007676:	f000 bf3d 	b.w	80084f4 <UART_SetConfig+0x1254>
    switch (clocksource)
 800767a:	2d02      	cmp	r5, #2
 800767c:	d020      	beq.n	80076c0 <UART_SetConfig+0x420>
 800767e:	2d04      	cmp	r5, #4
 8007680:	d1f8      	bne.n	8007674 <UART_SetConfig+0x3d4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007682:	a803      	add	r0, sp, #12
 8007684:	f7fd f834 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007688:	9804      	ldr	r0, [sp, #16]
 800768a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d06e      	beq.n	800776e <UART_SetConfig+0x4ce>
 8007690:	2b01      	cmp	r3, #1
 8007692:	d075      	beq.n	8007780 <UART_SetConfig+0x4e0>
 8007694:	2b02      	cmp	r3, #2
 8007696:	d075      	beq.n	8007784 <UART_SetConfig+0x4e4>
 8007698:	2b03      	cmp	r3, #3
 800769a:	d075      	beq.n	8007788 <UART_SetConfig+0x4e8>
 800769c:	2b04      	cmp	r3, #4
 800769e:	d075      	beq.n	800778c <UART_SetConfig+0x4ec>
 80076a0:	2b05      	cmp	r3, #5
 80076a2:	d075      	beq.n	8007790 <UART_SetConfig+0x4f0>
 80076a4:	2b06      	cmp	r3, #6
 80076a6:	d075      	beq.n	8007794 <UART_SetConfig+0x4f4>
 80076a8:	2b07      	cmp	r3, #7
 80076aa:	d075      	beq.n	8007798 <UART_SetConfig+0x4f8>
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d075      	beq.n	800779c <UART_SetConfig+0x4fc>
 80076b0:	2b09      	cmp	r3, #9
 80076b2:	d075      	beq.n	80077a0 <UART_SetConfig+0x500>
 80076b4:	2b0a      	cmp	r3, #10
 80076b6:	d075      	beq.n	80077a4 <UART_SetConfig+0x504>
 80076b8:	2b0b      	cmp	r3, #11
 80076ba:	d055      	beq.n	8007768 <UART_SetConfig+0x4c8>
 80076bc:	2301      	movs	r3, #1
 80076be:	e057      	b.n	8007770 <UART_SetConfig+0x4d0>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076c0:	f7fd f804 	bl	80046cc <HAL_RCCEx_GetD3PCLK1Freq>
 80076c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076c6:	b1d3      	cbz	r3, 80076fe <UART_SetConfig+0x45e>
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d039      	beq.n	8007740 <UART_SetConfig+0x4a0>
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d039      	beq.n	8007744 <UART_SetConfig+0x4a4>
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d039      	beq.n	8007748 <UART_SetConfig+0x4a8>
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	d039      	beq.n	800774c <UART_SetConfig+0x4ac>
 80076d8:	2b05      	cmp	r3, #5
 80076da:	d039      	beq.n	8007750 <UART_SetConfig+0x4b0>
 80076dc:	2b06      	cmp	r3, #6
 80076de:	d039      	beq.n	8007754 <UART_SetConfig+0x4b4>
 80076e0:	2b07      	cmp	r3, #7
 80076e2:	d039      	beq.n	8007758 <UART_SetConfig+0x4b8>
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d039      	beq.n	800775c <UART_SetConfig+0x4bc>
 80076e8:	2b09      	cmp	r3, #9
 80076ea:	d039      	beq.n	8007760 <UART_SetConfig+0x4c0>
 80076ec:	2b0a      	cmp	r3, #10
 80076ee:	d039      	beq.n	8007764 <UART_SetConfig+0x4c4>
 80076f0:	2b0b      	cmp	r3, #11
 80076f2:	d001      	beq.n	80076f8 <UART_SetConfig+0x458>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e003      	b.n	8007700 <UART_SetConfig+0x460>
 80076f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076fc:	e000      	b.n	8007700 <UART_SetConfig+0x460>
 80076fe:	2301      	movs	r3, #1
 8007700:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8007704:	2800      	cmp	r0, #0
 8007706:	f001 8113 	beq.w	8008930 <UART_SetConfig+0x1690>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800770a:	6866      	ldr	r6, [r4, #4]
 800770c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007710:	4283      	cmp	r3, r0
 8007712:	f201 810f 	bhi.w	8008934 <UART_SetConfig+0x1694>
 8007716:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 800771a:	f201 810d 	bhi.w	8008938 <UART_SetConfig+0x1698>
        switch (clocksource)
 800771e:	2d08      	cmp	r5, #8
 8007720:	f000 8251 	beq.w	8007bc6 <UART_SetConfig+0x926>
 8007724:	f240 8161 	bls.w	80079ea <UART_SetConfig+0x74a>
 8007728:	2d20      	cmp	r5, #32
 800772a:	f000 838d 	beq.w	8007e48 <UART_SetConfig+0xba8>
 800772e:	2d40      	cmp	r5, #64	; 0x40
 8007730:	f000 83ef 	beq.w	8007f12 <UART_SetConfig+0xc72>
 8007734:	2d10      	cmp	r5, #16
 8007736:	f000 829f 	beq.w	8007c78 <UART_SetConfig+0x9d8>
            ret = HAL_ERROR;
 800773a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800773c:	2300      	movs	r3, #0
 800773e:	e1de      	b.n	8007afe <UART_SetConfig+0x85e>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007740:	2302      	movs	r3, #2
 8007742:	e7dd      	b.n	8007700 <UART_SetConfig+0x460>
 8007744:	2304      	movs	r3, #4
 8007746:	e7db      	b.n	8007700 <UART_SetConfig+0x460>
 8007748:	2306      	movs	r3, #6
 800774a:	e7d9      	b.n	8007700 <UART_SetConfig+0x460>
 800774c:	2308      	movs	r3, #8
 800774e:	e7d7      	b.n	8007700 <UART_SetConfig+0x460>
 8007750:	230a      	movs	r3, #10
 8007752:	e7d5      	b.n	8007700 <UART_SetConfig+0x460>
 8007754:	230c      	movs	r3, #12
 8007756:	e7d3      	b.n	8007700 <UART_SetConfig+0x460>
 8007758:	2310      	movs	r3, #16
 800775a:	e7d1      	b.n	8007700 <UART_SetConfig+0x460>
 800775c:	2320      	movs	r3, #32
 800775e:	e7cf      	b.n	8007700 <UART_SetConfig+0x460>
 8007760:	2340      	movs	r3, #64	; 0x40
 8007762:	e7cd      	b.n	8007700 <UART_SetConfig+0x460>
 8007764:	2380      	movs	r3, #128	; 0x80
 8007766:	e7cb      	b.n	8007700 <UART_SetConfig+0x460>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800776c:	e000      	b.n	8007770 <UART_SetConfig+0x4d0>
 800776e:	2301      	movs	r3, #1
 8007770:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8007774:	e7c6      	b.n	8007704 <UART_SetConfig+0x464>
 8007776:	bf00      	nop
 8007778:	58024400 	.word	0x58024400
 800777c:	58000c00 	.word	0x58000c00
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007780:	2302      	movs	r3, #2
 8007782:	e7f5      	b.n	8007770 <UART_SetConfig+0x4d0>
 8007784:	2304      	movs	r3, #4
 8007786:	e7f3      	b.n	8007770 <UART_SetConfig+0x4d0>
 8007788:	2306      	movs	r3, #6
 800778a:	e7f1      	b.n	8007770 <UART_SetConfig+0x4d0>
 800778c:	2308      	movs	r3, #8
 800778e:	e7ef      	b.n	8007770 <UART_SetConfig+0x4d0>
 8007790:	230a      	movs	r3, #10
 8007792:	e7ed      	b.n	8007770 <UART_SetConfig+0x4d0>
 8007794:	230c      	movs	r3, #12
 8007796:	e7eb      	b.n	8007770 <UART_SetConfig+0x4d0>
 8007798:	2310      	movs	r3, #16
 800779a:	e7e9      	b.n	8007770 <UART_SetConfig+0x4d0>
 800779c:	2320      	movs	r3, #32
 800779e:	e7e7      	b.n	8007770 <UART_SetConfig+0x4d0>
 80077a0:	2340      	movs	r3, #64	; 0x40
 80077a2:	e7e5      	b.n	8007770 <UART_SetConfig+0x4d0>
 80077a4:	2380      	movs	r3, #128	; 0x80
 80077a6:	e7e3      	b.n	8007770 <UART_SetConfig+0x4d0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077a8:	4668      	mov	r0, sp
 80077aa:	f7fd f89f 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077ae:	9801      	ldr	r0, [sp, #4]
 80077b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b2:	b1d3      	cbz	r3, 80077ea <UART_SetConfig+0x54a>
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d01c      	beq.n	80077f2 <UART_SetConfig+0x552>
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d01c      	beq.n	80077f6 <UART_SetConfig+0x556>
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d01c      	beq.n	80077fa <UART_SetConfig+0x55a>
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d01c      	beq.n	80077fe <UART_SetConfig+0x55e>
 80077c4:	2b05      	cmp	r3, #5
 80077c6:	d01c      	beq.n	8007802 <UART_SetConfig+0x562>
 80077c8:	2b06      	cmp	r3, #6
 80077ca:	d01c      	beq.n	8007806 <UART_SetConfig+0x566>
 80077cc:	2b07      	cmp	r3, #7
 80077ce:	d01c      	beq.n	800780a <UART_SetConfig+0x56a>
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d01c      	beq.n	800780e <UART_SetConfig+0x56e>
 80077d4:	2b09      	cmp	r3, #9
 80077d6:	d01c      	beq.n	8007812 <UART_SetConfig+0x572>
 80077d8:	2b0a      	cmp	r3, #10
 80077da:	d01c      	beq.n	8007816 <UART_SetConfig+0x576>
 80077dc:	2b0b      	cmp	r3, #11
 80077de:	d001      	beq.n	80077e4 <UART_SetConfig+0x544>
 80077e0:	2301      	movs	r3, #1
 80077e2:	e003      	b.n	80077ec <UART_SetConfig+0x54c>
 80077e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077e8:	e000      	b.n	80077ec <UART_SetConfig+0x54c>
 80077ea:	2301      	movs	r3, #1
 80077ec:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80077f0:	e788      	b.n	8007704 <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077f2:	2302      	movs	r3, #2
 80077f4:	e7fa      	b.n	80077ec <UART_SetConfig+0x54c>
 80077f6:	2304      	movs	r3, #4
 80077f8:	e7f8      	b.n	80077ec <UART_SetConfig+0x54c>
 80077fa:	2306      	movs	r3, #6
 80077fc:	e7f6      	b.n	80077ec <UART_SetConfig+0x54c>
 80077fe:	2308      	movs	r3, #8
 8007800:	e7f4      	b.n	80077ec <UART_SetConfig+0x54c>
 8007802:	230a      	movs	r3, #10
 8007804:	e7f2      	b.n	80077ec <UART_SetConfig+0x54c>
 8007806:	230c      	movs	r3, #12
 8007808:	e7f0      	b.n	80077ec <UART_SetConfig+0x54c>
 800780a:	2310      	movs	r3, #16
 800780c:	e7ee      	b.n	80077ec <UART_SetConfig+0x54c>
 800780e:	2320      	movs	r3, #32
 8007810:	e7ec      	b.n	80077ec <UART_SetConfig+0x54c>
 8007812:	2340      	movs	r3, #64	; 0x40
 8007814:	e7ea      	b.n	80077ec <UART_SetConfig+0x54c>
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	e7e8      	b.n	80077ec <UART_SetConfig+0x54c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800781a:	4b9c      	ldr	r3, [pc, #624]	; (8007a8c <UART_SetConfig+0x7ec>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f013 0f20 	tst.w	r3, #32
 8007822:	d03a      	beq.n	800789a <UART_SetConfig+0x5fa>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007824:	4b99      	ldr	r3, [pc, #612]	; (8007a8c <UART_SetConfig+0x7ec>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800782c:	4898      	ldr	r0, [pc, #608]	; (8007a90 <UART_SetConfig+0x7f0>)
 800782e:	40d8      	lsrs	r0, r3
 8007830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007832:	b1c3      	cbz	r3, 8007866 <UART_SetConfig+0x5c6>
 8007834:	2b01      	cmp	r3, #1
 8007836:	d01a      	beq.n	800786e <UART_SetConfig+0x5ce>
 8007838:	2b02      	cmp	r3, #2
 800783a:	d01a      	beq.n	8007872 <UART_SetConfig+0x5d2>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d01a      	beq.n	8007876 <UART_SetConfig+0x5d6>
 8007840:	2b04      	cmp	r3, #4
 8007842:	d01a      	beq.n	800787a <UART_SetConfig+0x5da>
 8007844:	2b05      	cmp	r3, #5
 8007846:	d01a      	beq.n	800787e <UART_SetConfig+0x5de>
 8007848:	2b06      	cmp	r3, #6
 800784a:	d01a      	beq.n	8007882 <UART_SetConfig+0x5e2>
 800784c:	2b07      	cmp	r3, #7
 800784e:	d01a      	beq.n	8007886 <UART_SetConfig+0x5e6>
 8007850:	2b08      	cmp	r3, #8
 8007852:	d01a      	beq.n	800788a <UART_SetConfig+0x5ea>
 8007854:	2b09      	cmp	r3, #9
 8007856:	d01a      	beq.n	800788e <UART_SetConfig+0x5ee>
 8007858:	2b0a      	cmp	r3, #10
 800785a:	d01a      	beq.n	8007892 <UART_SetConfig+0x5f2>
 800785c:	2b0b      	cmp	r3, #11
 800785e:	d11a      	bne.n	8007896 <UART_SetConfig+0x5f6>
 8007860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007864:	e000      	b.n	8007868 <UART_SetConfig+0x5c8>
 8007866:	2301      	movs	r3, #1
 8007868:	fbb0 f0f3 	udiv	r0, r0, r3
 800786c:	e74a      	b.n	8007704 <UART_SetConfig+0x464>
 800786e:	2302      	movs	r3, #2
 8007870:	e7fa      	b.n	8007868 <UART_SetConfig+0x5c8>
 8007872:	2304      	movs	r3, #4
 8007874:	e7f8      	b.n	8007868 <UART_SetConfig+0x5c8>
 8007876:	2306      	movs	r3, #6
 8007878:	e7f6      	b.n	8007868 <UART_SetConfig+0x5c8>
 800787a:	2308      	movs	r3, #8
 800787c:	e7f4      	b.n	8007868 <UART_SetConfig+0x5c8>
 800787e:	230a      	movs	r3, #10
 8007880:	e7f2      	b.n	8007868 <UART_SetConfig+0x5c8>
 8007882:	230c      	movs	r3, #12
 8007884:	e7f0      	b.n	8007868 <UART_SetConfig+0x5c8>
 8007886:	2310      	movs	r3, #16
 8007888:	e7ee      	b.n	8007868 <UART_SetConfig+0x5c8>
 800788a:	2320      	movs	r3, #32
 800788c:	e7ec      	b.n	8007868 <UART_SetConfig+0x5c8>
 800788e:	2340      	movs	r3, #64	; 0x40
 8007890:	e7ea      	b.n	8007868 <UART_SetConfig+0x5c8>
 8007892:	2380      	movs	r3, #128	; 0x80
 8007894:	e7e8      	b.n	8007868 <UART_SetConfig+0x5c8>
 8007896:	2301      	movs	r3, #1
 8007898:	e7e6      	b.n	8007868 <UART_SetConfig+0x5c8>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800789a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d053      	beq.n	8007948 <UART_SetConfig+0x6a8>
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d053      	beq.n	800794c <UART_SetConfig+0x6ac>
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d053      	beq.n	8007950 <UART_SetConfig+0x6b0>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d053      	beq.n	8007954 <UART_SetConfig+0x6b4>
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d053      	beq.n	8007958 <UART_SetConfig+0x6b8>
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	d053      	beq.n	800795c <UART_SetConfig+0x6bc>
 80078b4:	2b06      	cmp	r3, #6
 80078b6:	d053      	beq.n	8007960 <UART_SetConfig+0x6c0>
 80078b8:	2b07      	cmp	r3, #7
 80078ba:	d053      	beq.n	8007964 <UART_SetConfig+0x6c4>
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d053      	beq.n	8007968 <UART_SetConfig+0x6c8>
 80078c0:	2b09      	cmp	r3, #9
 80078c2:	d053      	beq.n	800796c <UART_SetConfig+0x6cc>
 80078c4:	2b0a      	cmp	r3, #10
 80078c6:	d053      	beq.n	8007970 <UART_SetConfig+0x6d0>
 80078c8:	2b0b      	cmp	r3, #11
 80078ca:	d153      	bne.n	8007974 <UART_SetConfig+0x6d4>
 80078cc:	4871      	ldr	r0, [pc, #452]	; (8007a94 <UART_SetConfig+0x7f4>)
 80078ce:	e719      	b.n	8007704 <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d050      	beq.n	8007978 <UART_SetConfig+0x6d8>
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d050      	beq.n	800797c <UART_SetConfig+0x6dc>
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d050      	beq.n	8007980 <UART_SetConfig+0x6e0>
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d050      	beq.n	8007984 <UART_SetConfig+0x6e4>
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	d050      	beq.n	8007988 <UART_SetConfig+0x6e8>
 80078e6:	2b05      	cmp	r3, #5
 80078e8:	d050      	beq.n	800798c <UART_SetConfig+0x6ec>
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d050      	beq.n	8007990 <UART_SetConfig+0x6f0>
 80078ee:	2b07      	cmp	r3, #7
 80078f0:	d050      	beq.n	8007994 <UART_SetConfig+0x6f4>
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d050      	beq.n	8007998 <UART_SetConfig+0x6f8>
 80078f6:	2b09      	cmp	r3, #9
 80078f8:	d050      	beq.n	800799c <UART_SetConfig+0x6fc>
 80078fa:	2b0a      	cmp	r3, #10
 80078fc:	d051      	beq.n	80079a2 <UART_SetConfig+0x702>
 80078fe:	2b0b      	cmp	r3, #11
 8007900:	d001      	beq.n	8007906 <UART_SetConfig+0x666>
 8007902:	4865      	ldr	r0, [pc, #404]	; (8007a98 <UART_SetConfig+0x7f8>)
 8007904:	e6fe      	b.n	8007704 <UART_SetConfig+0x464>
 8007906:	f643 5009 	movw	r0, #15625	; 0x3d09
 800790a:	e6fb      	b.n	8007704 <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800790c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	d04a      	beq.n	80079a8 <UART_SetConfig+0x708>
 8007912:	2b01      	cmp	r3, #1
 8007914:	d04b      	beq.n	80079ae <UART_SetConfig+0x70e>
 8007916:	2b02      	cmp	r3, #2
 8007918:	d04c      	beq.n	80079b4 <UART_SetConfig+0x714>
 800791a:	2b03      	cmp	r3, #3
 800791c:	d04d      	beq.n	80079ba <UART_SetConfig+0x71a>
 800791e:	2b04      	cmp	r3, #4
 8007920:	d04e      	beq.n	80079c0 <UART_SetConfig+0x720>
 8007922:	2b05      	cmp	r3, #5
 8007924:	d04f      	beq.n	80079c6 <UART_SetConfig+0x726>
 8007926:	2b06      	cmp	r3, #6
 8007928:	d050      	beq.n	80079cc <UART_SetConfig+0x72c>
 800792a:	2b07      	cmp	r3, #7
 800792c:	d051      	beq.n	80079d2 <UART_SetConfig+0x732>
 800792e:	2b08      	cmp	r3, #8
 8007930:	d052      	beq.n	80079d8 <UART_SetConfig+0x738>
 8007932:	2b09      	cmp	r3, #9
 8007934:	d053      	beq.n	80079de <UART_SetConfig+0x73e>
 8007936:	2b0a      	cmp	r3, #10
 8007938:	d054      	beq.n	80079e4 <UART_SetConfig+0x744>
 800793a:	2b0b      	cmp	r3, #11
 800793c:	d002      	beq.n	8007944 <UART_SetConfig+0x6a4>
 800793e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007942:	e6df      	b.n	8007704 <UART_SetConfig+0x464>
 8007944:	2080      	movs	r0, #128	; 0x80
 8007946:	e6dd      	b.n	8007704 <UART_SetConfig+0x464>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007948:	4851      	ldr	r0, [pc, #324]	; (8007a90 <UART_SetConfig+0x7f0>)
 800794a:	e6db      	b.n	8007704 <UART_SetConfig+0x464>
 800794c:	4853      	ldr	r0, [pc, #332]	; (8007a9c <UART_SetConfig+0x7fc>)
 800794e:	e6d9      	b.n	8007704 <UART_SetConfig+0x464>
 8007950:	4853      	ldr	r0, [pc, #332]	; (8007aa0 <UART_SetConfig+0x800>)
 8007952:	e6d7      	b.n	8007704 <UART_SetConfig+0x464>
 8007954:	4853      	ldr	r0, [pc, #332]	; (8007aa4 <UART_SetConfig+0x804>)
 8007956:	e6d5      	b.n	8007704 <UART_SetConfig+0x464>
 8007958:	4853      	ldr	r0, [pc, #332]	; (8007aa8 <UART_SetConfig+0x808>)
 800795a:	e6d3      	b.n	8007704 <UART_SetConfig+0x464>
 800795c:	4853      	ldr	r0, [pc, #332]	; (8007aac <UART_SetConfig+0x80c>)
 800795e:	e6d1      	b.n	8007704 <UART_SetConfig+0x464>
 8007960:	4853      	ldr	r0, [pc, #332]	; (8007ab0 <UART_SetConfig+0x810>)
 8007962:	e6cf      	b.n	8007704 <UART_SetConfig+0x464>
 8007964:	484c      	ldr	r0, [pc, #304]	; (8007a98 <UART_SetConfig+0x7f8>)
 8007966:	e6cd      	b.n	8007704 <UART_SetConfig+0x464>
 8007968:	4852      	ldr	r0, [pc, #328]	; (8007ab4 <UART_SetConfig+0x814>)
 800796a:	e6cb      	b.n	8007704 <UART_SetConfig+0x464>
 800796c:	4852      	ldr	r0, [pc, #328]	; (8007ab8 <UART_SetConfig+0x818>)
 800796e:	e6c9      	b.n	8007704 <UART_SetConfig+0x464>
 8007970:	4852      	ldr	r0, [pc, #328]	; (8007abc <UART_SetConfig+0x81c>)
 8007972:	e6c7      	b.n	8007704 <UART_SetConfig+0x464>
 8007974:	4846      	ldr	r0, [pc, #280]	; (8007a90 <UART_SetConfig+0x7f0>)
 8007976:	e6c5      	b.n	8007704 <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007978:	4847      	ldr	r0, [pc, #284]	; (8007a98 <UART_SetConfig+0x7f8>)
 800797a:	e6c3      	b.n	8007704 <UART_SetConfig+0x464>
 800797c:	484d      	ldr	r0, [pc, #308]	; (8007ab4 <UART_SetConfig+0x814>)
 800797e:	e6c1      	b.n	8007704 <UART_SetConfig+0x464>
 8007980:	484d      	ldr	r0, [pc, #308]	; (8007ab8 <UART_SetConfig+0x818>)
 8007982:	e6bf      	b.n	8007704 <UART_SetConfig+0x464>
 8007984:	484e      	ldr	r0, [pc, #312]	; (8007ac0 <UART_SetConfig+0x820>)
 8007986:	e6bd      	b.n	8007704 <UART_SetConfig+0x464>
 8007988:	484c      	ldr	r0, [pc, #304]	; (8007abc <UART_SetConfig+0x81c>)
 800798a:	e6bb      	b.n	8007704 <UART_SetConfig+0x464>
 800798c:	484d      	ldr	r0, [pc, #308]	; (8007ac4 <UART_SetConfig+0x824>)
 800798e:	e6b9      	b.n	8007704 <UART_SetConfig+0x464>
 8007990:	484d      	ldr	r0, [pc, #308]	; (8007ac8 <UART_SetConfig+0x828>)
 8007992:	e6b7      	b.n	8007704 <UART_SetConfig+0x464>
 8007994:	483f      	ldr	r0, [pc, #252]	; (8007a94 <UART_SetConfig+0x7f4>)
 8007996:	e6b5      	b.n	8007704 <UART_SetConfig+0x464>
 8007998:	484c      	ldr	r0, [pc, #304]	; (8007acc <UART_SetConfig+0x82c>)
 800799a:	e6b3      	b.n	8007704 <UART_SetConfig+0x464>
 800799c:	f24f 4024 	movw	r0, #62500	; 0xf424
 80079a0:	e6b0      	b.n	8007704 <UART_SetConfig+0x464>
 80079a2:	f647 2012 	movw	r0, #31250	; 0x7a12
 80079a6:	e6ad      	b.n	8007704 <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80079a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80079ac:	e6aa      	b.n	8007704 <UART_SetConfig+0x464>
 80079ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80079b2:	e6a7      	b.n	8007704 <UART_SetConfig+0x464>
 80079b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80079b8:	e6a4      	b.n	8007704 <UART_SetConfig+0x464>
 80079ba:	f241 5055 	movw	r0, #5461	; 0x1555
 80079be:	e6a1      	b.n	8007704 <UART_SetConfig+0x464>
 80079c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80079c4:	e69e      	b.n	8007704 <UART_SetConfig+0x464>
 80079c6:	f640 40cc 	movw	r0, #3276	; 0xccc
 80079ca:	e69b      	b.n	8007704 <UART_SetConfig+0x464>
 80079cc:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80079d0:	e698      	b.n	8007704 <UART_SetConfig+0x464>
 80079d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80079d6:	e695      	b.n	8007704 <UART_SetConfig+0x464>
 80079d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80079dc:	e692      	b.n	8007704 <UART_SetConfig+0x464>
 80079de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80079e2:	e68f      	b.n	8007704 <UART_SetConfig+0x464>
 80079e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079e8:	e68c      	b.n	8007704 <UART_SetConfig+0x464>
        switch (clocksource)
 80079ea:	2d02      	cmp	r5, #2
 80079ec:	d02f      	beq.n	8007a4e <UART_SetConfig+0x7ae>
 80079ee:	2d04      	cmp	r5, #4
 80079f0:	f47f aea3 	bne.w	800773a <UART_SetConfig+0x49a>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f4:	a803      	add	r0, sp, #12
 80079f6:	f7fc fe7b 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079fa:	9804      	ldr	r0, [sp, #16]
 80079fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80a8 	beq.w	8007b54 <UART_SetConfig+0x8b4>
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	f000 80bd 	beq.w	8007b84 <UART_SetConfig+0x8e4>
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	f000 80bd 	beq.w	8007b8a <UART_SetConfig+0x8ea>
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	f000 80bd 	beq.w	8007b90 <UART_SetConfig+0x8f0>
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	f000 80bd 	beq.w	8007b96 <UART_SetConfig+0x8f6>
 8007a1c:	2b05      	cmp	r3, #5
 8007a1e:	f000 80bd 	beq.w	8007b9c <UART_SetConfig+0x8fc>
 8007a22:	2b06      	cmp	r3, #6
 8007a24:	f000 80bd 	beq.w	8007ba2 <UART_SetConfig+0x902>
 8007a28:	2b07      	cmp	r3, #7
 8007a2a:	f000 80bd 	beq.w	8007ba8 <UART_SetConfig+0x908>
 8007a2e:	2b08      	cmp	r3, #8
 8007a30:	f000 80bd 	beq.w	8007bae <UART_SetConfig+0x90e>
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	f000 80bd 	beq.w	8007bb4 <UART_SetConfig+0x914>
 8007a3a:	2b0a      	cmp	r3, #10
 8007a3c:	f000 80bd 	beq.w	8007bba <UART_SetConfig+0x91a>
 8007a40:	2b0b      	cmp	r3, #11
 8007a42:	f040 80bd 	bne.w	8007bc0 <UART_SetConfig+0x920>
 8007a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e084      	b.n	8007b58 <UART_SetConfig+0x8b8>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a4e:	f7fc fe3d 	bl	80046cc <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a54:	b3e3      	cbz	r3, 8007ad0 <UART_SetConfig+0x830>
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d05b      	beq.n	8007b12 <UART_SetConfig+0x872>
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d05c      	beq.n	8007b18 <UART_SetConfig+0x878>
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d05d      	beq.n	8007b1e <UART_SetConfig+0x87e>
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d05e      	beq.n	8007b24 <UART_SetConfig+0x884>
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	d05f      	beq.n	8007b2a <UART_SetConfig+0x88a>
 8007a6a:	2b06      	cmp	r3, #6
 8007a6c:	d060      	beq.n	8007b30 <UART_SetConfig+0x890>
 8007a6e:	2b07      	cmp	r3, #7
 8007a70:	d061      	beq.n	8007b36 <UART_SetConfig+0x896>
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d062      	beq.n	8007b3c <UART_SetConfig+0x89c>
 8007a76:	2b09      	cmp	r3, #9
 8007a78:	d063      	beq.n	8007b42 <UART_SetConfig+0x8a2>
 8007a7a:	2b0a      	cmp	r3, #10
 8007a7c:	d064      	beq.n	8007b48 <UART_SetConfig+0x8a8>
 8007a7e:	2b0b      	cmp	r3, #11
 8007a80:	d165      	bne.n	8007b4e <UART_SetConfig+0x8ae>
 8007a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a86:	2300      	movs	r3, #0
 8007a88:	e024      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007a8a:	bf00      	nop
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	03d09000 	.word	0x03d09000
 8007a94:	0003d090 	.word	0x0003d090
 8007a98:	003d0900 	.word	0x003d0900
 8007a9c:	01e84800 	.word	0x01e84800
 8007aa0:	00f42400 	.word	0x00f42400
 8007aa4:	00a2c2aa 	.word	0x00a2c2aa
 8007aa8:	007a1200 	.word	0x007a1200
 8007aac:	0061a800 	.word	0x0061a800
 8007ab0:	00516155 	.word	0x00516155
 8007ab4:	001e8480 	.word	0x001e8480
 8007ab8:	000f4240 	.word	0x000f4240
 8007abc:	0007a120 	.word	0x0007a120
 8007ac0:	000a2c2a 	.word	0x000a2c2a
 8007ac4:	00061a80 	.word	0x00061a80
 8007ac8:	00051615 	.word	0x00051615
 8007acc:	0001e848 	.word	0x0001e848
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	f7f8 fbff 	bl	80002d8 <__aeabi_uldivmod>
 8007ada:	020f      	lsls	r7, r1, #8
 8007adc:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8007ae0:	0206      	lsls	r6, r0, #8
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	0850      	lsrs	r0, r2, #1
 8007ae6:	2500      	movs	r5, #0
 8007ae8:	462b      	mov	r3, r5
 8007aea:	eb16 0800 	adds.w	r8, r6, r0
 8007aee:	f147 0900 	adc.w	r9, r7, #0
 8007af2:	4640      	mov	r0, r8
 8007af4:	4649      	mov	r1, r9
 8007af6:	f7f8 fbef 	bl	80002d8 <__aeabi_uldivmod>
 8007afa:	4603      	mov	r3, r0
            break;
 8007afc:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007afe:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8007b02:	4ac1      	ldr	r2, [pc, #772]	; (8007e08 <UART_SetConfig+0xb68>)
 8007b04:	4291      	cmp	r1, r2
 8007b06:	f200 8719 	bhi.w	800893c <UART_SetConfig+0x169c>
          huart->Instance->BRR = usartdiv;
 8007b0a:	6822      	ldr	r2, [r4, #0]
 8007b0c:	60d3      	str	r3, [r2, #12]
 8007b0e:	f000 bcf1 	b.w	80084f4 <UART_SetConfig+0x1254>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b12:	2202      	movs	r2, #2
 8007b14:	2300      	movs	r3, #0
 8007b16:	e7dd      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b18:	2204      	movs	r2, #4
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e7da      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b1e:	2206      	movs	r2, #6
 8007b20:	2300      	movs	r3, #0
 8007b22:	e7d7      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b24:	2208      	movs	r2, #8
 8007b26:	2300      	movs	r3, #0
 8007b28:	e7d4      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b2a:	220a      	movs	r2, #10
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e7d1      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b30:	220c      	movs	r2, #12
 8007b32:	2300      	movs	r3, #0
 8007b34:	e7ce      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b36:	2210      	movs	r2, #16
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e7cb      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e7c8      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b42:	2240      	movs	r2, #64	; 0x40
 8007b44:	2300      	movs	r3, #0
 8007b46:	e7c5      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b48:	2280      	movs	r2, #128	; 0x80
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e7c2      	b.n	8007ad4 <UART_SetConfig+0x834>
 8007b4e:	2201      	movs	r2, #1
 8007b50:	2300      	movs	r3, #0
 8007b52:	e7bf      	b.n	8007ad4 <UART_SetConfig+0x834>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b54:	2201      	movs	r2, #1
 8007b56:	2300      	movs	r3, #0
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f7f8 fbbd 	bl	80002d8 <__aeabi_uldivmod>
 8007b5e:	020f      	lsls	r7, r1, #8
 8007b60:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8007b64:	0206      	lsls	r6, r0, #8
 8007b66:	6862      	ldr	r2, [r4, #4]
 8007b68:	0850      	lsrs	r0, r2, #1
 8007b6a:	2500      	movs	r5, #0
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	eb16 0800 	adds.w	r8, r6, r0
 8007b72:	f147 0900 	adc.w	r9, r7, #0
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 fbad 	bl	80002d8 <__aeabi_uldivmod>
 8007b7e:	4603      	mov	r3, r0
            break;
 8007b80:	4628      	mov	r0, r5
 8007b82:	e7bc      	b.n	8007afe <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b84:	2202      	movs	r2, #2
 8007b86:	2300      	movs	r3, #0
 8007b88:	e7e6      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e7e3      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007b90:	2206      	movs	r2, #6
 8007b92:	2300      	movs	r3, #0
 8007b94:	e7e0      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007b96:	2208      	movs	r2, #8
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e7dd      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007b9c:	220a      	movs	r2, #10
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e7da      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007ba2:	220c      	movs	r2, #12
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e7d7      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007ba8:	2210      	movs	r2, #16
 8007baa:	2300      	movs	r3, #0
 8007bac:	e7d4      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007bae:	2220      	movs	r2, #32
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e7d1      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007bb4:	2240      	movs	r2, #64	; 0x40
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	e7ce      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007bba:	2280      	movs	r2, #128	; 0x80
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e7cb      	b.n	8007b58 <UART_SetConfig+0x8b8>
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e7c8      	b.n	8007b58 <UART_SetConfig+0x8b8>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bc6:	4668      	mov	r0, sp
 8007bc8:	f7fc fe90 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bcc:	9801      	ldr	r0, [sp, #4]
 8007bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bd0:	b1cb      	cbz	r3, 8007c06 <UART_SetConfig+0x966>
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d02f      	beq.n	8007c36 <UART_SetConfig+0x996>
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d030      	beq.n	8007c3c <UART_SetConfig+0x99c>
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d031      	beq.n	8007c42 <UART_SetConfig+0x9a2>
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d032      	beq.n	8007c48 <UART_SetConfig+0x9a8>
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	d033      	beq.n	8007c4e <UART_SetConfig+0x9ae>
 8007be6:	2b06      	cmp	r3, #6
 8007be8:	d034      	beq.n	8007c54 <UART_SetConfig+0x9b4>
 8007bea:	2b07      	cmp	r3, #7
 8007bec:	d035      	beq.n	8007c5a <UART_SetConfig+0x9ba>
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d036      	beq.n	8007c60 <UART_SetConfig+0x9c0>
 8007bf2:	2b09      	cmp	r3, #9
 8007bf4:	d037      	beq.n	8007c66 <UART_SetConfig+0x9c6>
 8007bf6:	2b0a      	cmp	r3, #10
 8007bf8:	d038      	beq.n	8007c6c <UART_SetConfig+0x9cc>
 8007bfa:	2b0b      	cmp	r3, #11
 8007bfc:	d139      	bne.n	8007c72 <UART_SetConfig+0x9d2>
 8007bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c02:	2300      	movs	r3, #0
 8007c04:	e001      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c06:	2201      	movs	r2, #1
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	f7f8 fb64 	bl	80002d8 <__aeabi_uldivmod>
 8007c10:	020f      	lsls	r7, r1, #8
 8007c12:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8007c16:	0206      	lsls	r6, r0, #8
 8007c18:	6862      	ldr	r2, [r4, #4]
 8007c1a:	0850      	lsrs	r0, r2, #1
 8007c1c:	2500      	movs	r5, #0
 8007c1e:	462b      	mov	r3, r5
 8007c20:	eb16 0800 	adds.w	r8, r6, r0
 8007c24:	f147 0900 	adc.w	r9, r7, #0
 8007c28:	4640      	mov	r0, r8
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	f7f8 fb54 	bl	80002d8 <__aeabi_uldivmod>
 8007c30:	4603      	mov	r3, r0
            break;
 8007c32:	4628      	mov	r0, r5
 8007c34:	e763      	b.n	8007afe <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c36:	2202      	movs	r2, #2
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e7e6      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c3c:	2204      	movs	r2, #4
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e7e3      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c42:	2206      	movs	r2, #6
 8007c44:	2300      	movs	r3, #0
 8007c46:	e7e0      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c48:	2208      	movs	r2, #8
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e7dd      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c4e:	220a      	movs	r2, #10
 8007c50:	2300      	movs	r3, #0
 8007c52:	e7da      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c54:	220c      	movs	r2, #12
 8007c56:	2300      	movs	r3, #0
 8007c58:	e7d7      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c5a:	2210      	movs	r2, #16
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e7d4      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c60:	2220      	movs	r2, #32
 8007c62:	2300      	movs	r3, #0
 8007c64:	e7d1      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c66:	2240      	movs	r2, #64	; 0x40
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e7ce      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c6c:	2280      	movs	r2, #128	; 0x80
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e7cb      	b.n	8007c0a <UART_SetConfig+0x96a>
 8007c72:	2201      	movs	r2, #1
 8007c74:	2300      	movs	r3, #0
 8007c76:	e7c8      	b.n	8007c0a <UART_SetConfig+0x96a>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c78:	4b64      	ldr	r3, [pc, #400]	; (8007e0c <UART_SetConfig+0xb6c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f013 0f20 	tst.w	r3, #32
 8007c80:	d05c      	beq.n	8007d3c <UART_SetConfig+0xa9c>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c82:	4b62      	ldr	r3, [pc, #392]	; (8007e0c <UART_SetConfig+0xb6c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c8a:	4861      	ldr	r0, [pc, #388]	; (8007e10 <UART_SetConfig+0xb70>)
 8007c8c:	40d8      	lsrs	r0, r3
 8007c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c90:	b1cb      	cbz	r3, 8007cc6 <UART_SetConfig+0xa26>
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d031      	beq.n	8007cfa <UART_SetConfig+0xa5a>
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d032      	beq.n	8007d00 <UART_SetConfig+0xa60>
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d033      	beq.n	8007d06 <UART_SetConfig+0xa66>
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d034      	beq.n	8007d0c <UART_SetConfig+0xa6c>
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d035      	beq.n	8007d12 <UART_SetConfig+0xa72>
 8007ca6:	2b06      	cmp	r3, #6
 8007ca8:	d036      	beq.n	8007d18 <UART_SetConfig+0xa78>
 8007caa:	2b07      	cmp	r3, #7
 8007cac:	d037      	beq.n	8007d1e <UART_SetConfig+0xa7e>
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d038      	beq.n	8007d24 <UART_SetConfig+0xa84>
 8007cb2:	2b09      	cmp	r3, #9
 8007cb4:	d039      	beq.n	8007d2a <UART_SetConfig+0xa8a>
 8007cb6:	2b0a      	cmp	r3, #10
 8007cb8:	d03a      	beq.n	8007d30 <UART_SetConfig+0xa90>
 8007cba:	2b0b      	cmp	r3, #11
 8007cbc:	d13b      	bne.n	8007d36 <UART_SetConfig+0xa96>
 8007cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e001      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	2300      	movs	r3, #0
 8007cca:	2100      	movs	r1, #0
 8007ccc:	f7f8 fb04 	bl	80002d8 <__aeabi_uldivmod>
 8007cd0:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8007cd4:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8007cd8:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8007cdc:	0870      	lsrs	r0, r6, #1
 8007cde:	2500      	movs	r5, #0
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	eb18 0600 	adds.w	r6, r8, r0
 8007ce8:	f149 0700 	adc.w	r7, r9, #0
 8007cec:	4630      	mov	r0, r6
 8007cee:	4639      	mov	r1, r7
 8007cf0:	f7f8 faf2 	bl	80002d8 <__aeabi_uldivmod>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	e701      	b.n	8007afe <UART_SetConfig+0x85e>
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e7e4      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d00:	2204      	movs	r2, #4
 8007d02:	2300      	movs	r3, #0
 8007d04:	e7e1      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d06:	2206      	movs	r2, #6
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e7de      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d0c:	2208      	movs	r2, #8
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e7db      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d12:	220a      	movs	r2, #10
 8007d14:	2300      	movs	r3, #0
 8007d16:	e7d8      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d18:	220c      	movs	r2, #12
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e7d5      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d1e:	2210      	movs	r2, #16
 8007d20:	2300      	movs	r3, #0
 8007d22:	e7d2      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d24:	2220      	movs	r2, #32
 8007d26:	2300      	movs	r3, #0
 8007d28:	e7cf      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d2a:	2240      	movs	r2, #64	; 0x40
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e7cc      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d30:	2280      	movs	r2, #128	; 0x80
 8007d32:	2300      	movs	r3, #0
 8007d34:	e7c9      	b.n	8007cca <UART_SetConfig+0xa2a>
 8007d36:	2201      	movs	r2, #1
 8007d38:	2300      	movs	r3, #0
 8007d3a:	e7c6      	b.n	8007cca <UART_SetConfig+0xa2a>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d3e:	b1d3      	cbz	r3, 8007d76 <UART_SetConfig+0xad6>
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d029      	beq.n	8007d98 <UART_SetConfig+0xaf8>
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d02c      	beq.n	8007da2 <UART_SetConfig+0xb02>
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d02f      	beq.n	8007dac <UART_SetConfig+0xb0c>
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d032      	beq.n	8007db6 <UART_SetConfig+0xb16>
 8007d50:	2b05      	cmp	r3, #5
 8007d52:	d035      	beq.n	8007dc0 <UART_SetConfig+0xb20>
 8007d54:	2b06      	cmp	r3, #6
 8007d56:	d038      	beq.n	8007dca <UART_SetConfig+0xb2a>
 8007d58:	2b07      	cmp	r3, #7
 8007d5a:	d03b      	beq.n	8007dd4 <UART_SetConfig+0xb34>
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d03e      	beq.n	8007dde <UART_SetConfig+0xb3e>
 8007d60:	2b09      	cmp	r3, #9
 8007d62:	d041      	beq.n	8007de8 <UART_SetConfig+0xb48>
 8007d64:	2b0a      	cmp	r3, #10
 8007d66:	d065      	beq.n	8007e34 <UART_SetConfig+0xb94>
 8007d68:	2b0b      	cmp	r3, #11
 8007d6a:	d168      	bne.n	8007e3e <UART_SetConfig+0xb9e>
 8007d6c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007e10 <UART_SetConfig+0xb70>
 8007d70:	f04f 0900 	mov.w	r9, #0
 8007d74:	e003      	b.n	8007d7e <UART_SetConfig+0xade>
 8007d76:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8007e14 <UART_SetConfig+0xb74>
 8007d7a:	f04f 0903 	mov.w	r9, #3
 8007d7e:	0877      	lsrs	r7, r6, #1
 8007d80:	2500      	movs	r5, #0
 8007d82:	4632      	mov	r2, r6
 8007d84:	462b      	mov	r3, r5
 8007d86:	eb18 0007 	adds.w	r0, r8, r7
 8007d8a:	f149 0100 	adc.w	r1, r9, #0
 8007d8e:	f7f8 faa3 	bl	80002d8 <__aeabi_uldivmod>
 8007d92:	4603      	mov	r3, r0
 8007d94:	4628      	mov	r0, r5
 8007d96:	e6b2      	b.n	8007afe <UART_SetConfig+0x85e>
 8007d98:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8007e18 <UART_SetConfig+0xb78>
 8007d9c:	f04f 0901 	mov.w	r9, #1
 8007da0:	e7ed      	b.n	8007d7e <UART_SetConfig+0xade>
 8007da2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8007e1c <UART_SetConfig+0xb7c>
 8007da6:	f04f 0900 	mov.w	r9, #0
 8007daa:	e7e8      	b.n	8007d7e <UART_SetConfig+0xade>
 8007dac:	f20f 0948 	addw	r9, pc, #72	; 0x48
 8007db0:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007db4:	e7e3      	b.n	8007d7e <UART_SetConfig+0xade>
 8007db6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8007e20 <UART_SetConfig+0xb80>
 8007dba:	f04f 0900 	mov.w	r9, #0
 8007dbe:	e7de      	b.n	8007d7e <UART_SetConfig+0xade>
 8007dc0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8007e24 <UART_SetConfig+0xb84>
 8007dc4:	f04f 0900 	mov.w	r9, #0
 8007dc8:	e7d9      	b.n	8007d7e <UART_SetConfig+0xade>
 8007dca:	f20f 0934 	addw	r9, pc, #52	; 0x34
 8007dce:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007dd2:	e7d4      	b.n	8007d7e <UART_SetConfig+0xade>
 8007dd4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8007e28 <UART_SetConfig+0xb88>
 8007dd8:	f04f 0900 	mov.w	r9, #0
 8007ddc:	e7cf      	b.n	8007d7e <UART_SetConfig+0xade>
 8007dde:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8007e2c <UART_SetConfig+0xb8c>
 8007de2:	f04f 0900 	mov.w	r9, #0
 8007de6:	e7ca      	b.n	8007d7e <UART_SetConfig+0xade>
 8007de8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8007e30 <UART_SetConfig+0xb90>
 8007dec:	f04f 0900 	mov.w	r9, #0
 8007df0:	e7c5      	b.n	8007d7e <UART_SetConfig+0xade>
 8007df2:	bf00      	nop
 8007df4:	f3af 8000 	nop.w
 8007df8:	a2c2aa00 	.word	0xa2c2aa00
 8007dfc:	00000000 	.word	0x00000000
 8007e00:	51615500 	.word	0x51615500
 8007e04:	00000000 	.word	0x00000000
 8007e08:	000ffcff 	.word	0x000ffcff
 8007e0c:	58024400 	.word	0x58024400
 8007e10:	03d09000 	.word	0x03d09000
 8007e14:	d0900000 	.word	0xd0900000
 8007e18:	e8480000 	.word	0xe8480000
 8007e1c:	f4240000 	.word	0xf4240000
 8007e20:	7a120000 	.word	0x7a120000
 8007e24:	61a80000 	.word	0x61a80000
 8007e28:	3d090000 	.word	0x3d090000
 8007e2c:	1e848000 	.word	0x1e848000
 8007e30:	0f424000 	.word	0x0f424000
 8007e34:	f8df 86e8 	ldr.w	r8, [pc, #1768]	; 8008520 <UART_SetConfig+0x1280>
 8007e38:	f04f 0900 	mov.w	r9, #0
 8007e3c:	e79f      	b.n	8007d7e <UART_SetConfig+0xade>
 8007e3e:	f8df 8730 	ldr.w	r8, [pc, #1840]	; 8008570 <UART_SetConfig+0x12d0>
 8007e42:	f04f 0903 	mov.w	r9, #3
 8007e46:	e79a      	b.n	8007d7e <UART_SetConfig+0xade>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e4a:	b1d3      	cbz	r3, 8007e82 <UART_SetConfig+0xbe2>
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d029      	beq.n	8007ea4 <UART_SetConfig+0xc04>
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d02c      	beq.n	8007eae <UART_SetConfig+0xc0e>
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d02f      	beq.n	8007eb8 <UART_SetConfig+0xc18>
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d032      	beq.n	8007ec2 <UART_SetConfig+0xc22>
 8007e5c:	2b05      	cmp	r3, #5
 8007e5e:	d035      	beq.n	8007ecc <UART_SetConfig+0xc2c>
 8007e60:	2b06      	cmp	r3, #6
 8007e62:	d038      	beq.n	8007ed6 <UART_SetConfig+0xc36>
 8007e64:	2b07      	cmp	r3, #7
 8007e66:	d03b      	beq.n	8007ee0 <UART_SetConfig+0xc40>
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d03e      	beq.n	8007eea <UART_SetConfig+0xc4a>
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d041      	beq.n	8007ef4 <UART_SetConfig+0xc54>
 8007e70:	2b0a      	cmp	r3, #10
 8007e72:	d044      	beq.n	8007efe <UART_SetConfig+0xc5e>
 8007e74:	2b0b      	cmp	r3, #11
 8007e76:	d147      	bne.n	8007f08 <UART_SetConfig+0xc68>
 8007e78:	f8df 86c4 	ldr.w	r8, [pc, #1732]	; 8008540 <UART_SetConfig+0x12a0>
 8007e7c:	f04f 0900 	mov.w	r9, #0
 8007e80:	e003      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007e82:	f8df 86f0 	ldr.w	r8, [pc, #1776]	; 8008574 <UART_SetConfig+0x12d4>
 8007e86:	f04f 0900 	mov.w	r9, #0
 8007e8a:	0877      	lsrs	r7, r6, #1
 8007e8c:	2500      	movs	r5, #0
 8007e8e:	4632      	mov	r2, r6
 8007e90:	462b      	mov	r3, r5
 8007e92:	eb18 0007 	adds.w	r0, r8, r7
 8007e96:	f149 0100 	adc.w	r1, r9, #0
 8007e9a:	f7f8 fa1d 	bl	80002d8 <__aeabi_uldivmod>
 8007e9e:	4603      	mov	r3, r0
            break;
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	e62c      	b.n	8007afe <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea4:	f8df 86d0 	ldr.w	r8, [pc, #1744]	; 8008578 <UART_SetConfig+0x12d8>
 8007ea8:	f04f 0900 	mov.w	r9, #0
 8007eac:	e7ed      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007eae:	f8df 86cc 	ldr.w	r8, [pc, #1740]	; 800857c <UART_SetConfig+0x12dc>
 8007eb2:	f04f 0900 	mov.w	r9, #0
 8007eb6:	e7e8      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007eb8:	f20f 69a4 	addw	r9, pc, #1700	; 0x6a4
 8007ebc:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007ec0:	e7e3      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007ec2:	f8df 865c 	ldr.w	r8, [pc, #1628]	; 8008520 <UART_SetConfig+0x1280>
 8007ec6:	f04f 0900 	mov.w	r9, #0
 8007eca:	e7de      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007ecc:	f8df 86b0 	ldr.w	r8, [pc, #1712]	; 8008580 <UART_SetConfig+0x12e0>
 8007ed0:	f04f 0900 	mov.w	r9, #0
 8007ed4:	e7d9      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007ed6:	f20f 6990 	addw	r9, pc, #1680	; 0x690
 8007eda:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007ede:	e7d4      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007ee0:	f8df 8638 	ldr.w	r8, [pc, #1592]	; 800851c <UART_SetConfig+0x127c>
 8007ee4:	f04f 0900 	mov.w	r9, #0
 8007ee8:	e7cf      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007eea:	f8df 863c 	ldr.w	r8, [pc, #1596]	; 8008528 <UART_SetConfig+0x1288>
 8007eee:	f04f 0900 	mov.w	r9, #0
 8007ef2:	e7ca      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007ef4:	f8df 8638 	ldr.w	r8, [pc, #1592]	; 8008530 <UART_SetConfig+0x1290>
 8007ef8:	f04f 0900 	mov.w	r9, #0
 8007efc:	e7c5      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007efe:	f8df 863c 	ldr.w	r8, [pc, #1596]	; 800853c <UART_SetConfig+0x129c>
 8007f02:	f04f 0900 	mov.w	r9, #0
 8007f06:	e7c0      	b.n	8007e8a <UART_SetConfig+0xbea>
 8007f08:	f8df 8668 	ldr.w	r8, [pc, #1640]	; 8008574 <UART_SetConfig+0x12d4>
 8007f0c:	f04f 0900 	mov.w	r9, #0
 8007f10:	e7bb      	b.n	8007e8a <UART_SetConfig+0xbea>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f14:	b1d3      	cbz	r3, 8007f4c <UART_SetConfig+0xcac>
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d029      	beq.n	8007f6e <UART_SetConfig+0xcce>
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d02c      	beq.n	8007f78 <UART_SetConfig+0xcd8>
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d02f      	beq.n	8007f82 <UART_SetConfig+0xce2>
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d032      	beq.n	8007f8c <UART_SetConfig+0xcec>
 8007f26:	2b05      	cmp	r3, #5
 8007f28:	d035      	beq.n	8007f96 <UART_SetConfig+0xcf6>
 8007f2a:	2b06      	cmp	r3, #6
 8007f2c:	d038      	beq.n	8007fa0 <UART_SetConfig+0xd00>
 8007f2e:	2b07      	cmp	r3, #7
 8007f30:	d03b      	beq.n	8007faa <UART_SetConfig+0xd0a>
 8007f32:	2b08      	cmp	r3, #8
 8007f34:	d03e      	beq.n	8007fb4 <UART_SetConfig+0xd14>
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	d041      	beq.n	8007fbe <UART_SetConfig+0xd1e>
 8007f3a:	2b0a      	cmp	r3, #10
 8007f3c:	d044      	beq.n	8007fc8 <UART_SetConfig+0xd28>
 8007f3e:	2b0b      	cmp	r3, #11
 8007f40:	d147      	bne.n	8007fd2 <UART_SetConfig+0xd32>
 8007f42:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8007f46:	f04f 0900 	mov.w	r9, #0
 8007f4a:	e003      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007f4c:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
 8007f50:	f04f 0900 	mov.w	r9, #0
 8007f54:	0877      	lsrs	r7, r6, #1
 8007f56:	2500      	movs	r5, #0
 8007f58:	4632      	mov	r2, r6
 8007f5a:	462b      	mov	r3, r5
 8007f5c:	eb18 0007 	adds.w	r0, r8, r7
 8007f60:	f149 0100 	adc.w	r1, r9, #0
 8007f64:	f7f8 f9b8 	bl	80002d8 <__aeabi_uldivmod>
 8007f68:	4603      	mov	r3, r0
            break;
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	e5c7      	b.n	8007afe <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f6e:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
 8007f72:	f04f 0900 	mov.w	r9, #0
 8007f76:	e7ed      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007f78:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
 8007f7c:	f04f 0900 	mov.w	r9, #0
 8007f80:	e7e8      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007f82:	f8df 8600 	ldr.w	r8, [pc, #1536]	; 8008584 <UART_SetConfig+0x12e4>
 8007f86:	f04f 0900 	mov.w	r9, #0
 8007f8a:	e7e3      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007f8c:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 8007f90:	f04f 0900 	mov.w	r9, #0
 8007f94:	e7de      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007f96:	f8df 85f0 	ldr.w	r8, [pc, #1520]	; 8008588 <UART_SetConfig+0x12e8>
 8007f9a:	f04f 0900 	mov.w	r9, #0
 8007f9e:	e7d9      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007fa0:	f8df 85e8 	ldr.w	r8, [pc, #1512]	; 800858c <UART_SetConfig+0x12ec>
 8007fa4:	f04f 0900 	mov.w	r9, #0
 8007fa8:	e7d4      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007faa:	f44f 2800 	mov.w	r8, #524288	; 0x80000
 8007fae:	f04f 0900 	mov.w	r9, #0
 8007fb2:	e7cf      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007fb4:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 8007fb8:	f04f 0900 	mov.w	r9, #0
 8007fbc:	e7ca      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007fbe:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8007fc2:	f04f 0900 	mov.w	r9, #0
 8007fc6:	e7c5      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007fc8:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8007fcc:	f04f 0900 	mov.w	r9, #0
 8007fd0:	e7c0      	b.n	8007f54 <UART_SetConfig+0xcb4>
 8007fd2:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
 8007fd6:	f04f 0900 	mov.w	r9, #0
 8007fda:	e7bb      	b.n	8007f54 <UART_SetConfig+0xcb4>
    switch (clocksource)
 8007fdc:	2d40      	cmp	r5, #64	; 0x40
 8007fde:	f200 8254 	bhi.w	800848a <UART_SetConfig+0x11ea>
 8007fe2:	e8df f015 	tbh	[pc, r5, lsl #1]
 8007fe6:	0041      	.short	0x0041
 8007fe8:	0252008f 	.word	0x0252008f
 8007fec:	00ce0252 	.word	0x00ce0252
 8007ff0:	02520252 	.word	0x02520252
 8007ff4:	010f0252 	.word	0x010f0252
 8007ff8:	02520252 	.word	0x02520252
 8007ffc:	02520252 	.word	0x02520252
 8008000:	02520252 	.word	0x02520252
 8008004:	01500252 	.word	0x01500252
 8008008:	02520252 	.word	0x02520252
 800800c:	02520252 	.word	0x02520252
 8008010:	02520252 	.word	0x02520252
 8008014:	02520252 	.word	0x02520252
 8008018:	02520252 	.word	0x02520252
 800801c:	02520252 	.word	0x02520252
 8008020:	02520252 	.word	0x02520252
 8008024:	01d10252 	.word	0x01d10252
 8008028:	02520252 	.word	0x02520252
 800802c:	02520252 	.word	0x02520252
 8008030:	02520252 	.word	0x02520252
 8008034:	02520252 	.word	0x02520252
 8008038:	02520252 	.word	0x02520252
 800803c:	02520252 	.word	0x02520252
 8008040:	02520252 	.word	0x02520252
 8008044:	02520252 	.word	0x02520252
 8008048:	02520252 	.word	0x02520252
 800804c:	02520252 	.word	0x02520252
 8008050:	02520252 	.word	0x02520252
 8008054:	02520252 	.word	0x02520252
 8008058:	02520252 	.word	0x02520252
 800805c:	02520252 	.word	0x02520252
 8008060:	02520252 	.word	0x02520252
 8008064:	020c0252 	.word	0x020c0252
        pclk = HAL_RCC_GetPCLK1Freq();
 8008068:	f7fb fd70 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800806c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800806e:	b1c3      	cbz	r3, 80080a2 <UART_SetConfig+0xe02>
 8008070:	2b01      	cmp	r3, #1
 8008072:	d031      	beq.n	80080d8 <UART_SetConfig+0xe38>
 8008074:	2b02      	cmp	r3, #2
 8008076:	d031      	beq.n	80080dc <UART_SetConfig+0xe3c>
 8008078:	2b03      	cmp	r3, #3
 800807a:	d031      	beq.n	80080e0 <UART_SetConfig+0xe40>
 800807c:	2b04      	cmp	r3, #4
 800807e:	d031      	beq.n	80080e4 <UART_SetConfig+0xe44>
 8008080:	2b05      	cmp	r3, #5
 8008082:	d031      	beq.n	80080e8 <UART_SetConfig+0xe48>
 8008084:	2b06      	cmp	r3, #6
 8008086:	d031      	beq.n	80080ec <UART_SetConfig+0xe4c>
 8008088:	2b07      	cmp	r3, #7
 800808a:	d031      	beq.n	80080f0 <UART_SetConfig+0xe50>
 800808c:	2b08      	cmp	r3, #8
 800808e:	d031      	beq.n	80080f4 <UART_SetConfig+0xe54>
 8008090:	2b09      	cmp	r3, #9
 8008092:	d031      	beq.n	80080f8 <UART_SetConfig+0xe58>
 8008094:	2b0a      	cmp	r3, #10
 8008096:	d031      	beq.n	80080fc <UART_SetConfig+0xe5c>
 8008098:	2b0b      	cmp	r3, #11
 800809a:	d131      	bne.n	8008100 <UART_SetConfig+0xe60>
 800809c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080a0:	e000      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080a2:	2301      	movs	r3, #1
 80080a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80080a8:	6862      	ldr	r2, [r4, #4]
 80080aa:	0853      	lsrs	r3, r2, #1
 80080ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80080b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80080b6:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b8:	f1a3 0110 	sub.w	r1, r3, #16
 80080bc:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80080c0:	4291      	cmp	r1, r2
 80080c2:	f200 843d 	bhi.w	8008940 <UART_SetConfig+0x16a0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080cc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80080d0:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80080d2:	6822      	ldr	r2, [r4, #0]
 80080d4:	60d3      	str	r3, [r2, #12]
 80080d6:	e20d      	b.n	80084f4 <UART_SetConfig+0x1254>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080d8:	2302      	movs	r3, #2
 80080da:	e7e3      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080dc:	2304      	movs	r3, #4
 80080de:	e7e1      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080e0:	2306      	movs	r3, #6
 80080e2:	e7df      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080e4:	2308      	movs	r3, #8
 80080e6:	e7dd      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080e8:	230a      	movs	r3, #10
 80080ea:	e7db      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080ec:	230c      	movs	r3, #12
 80080ee:	e7d9      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080f0:	2310      	movs	r3, #16
 80080f2:	e7d7      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080f4:	2320      	movs	r3, #32
 80080f6:	e7d5      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080f8:	2340      	movs	r3, #64	; 0x40
 80080fa:	e7d3      	b.n	80080a4 <UART_SetConfig+0xe04>
 80080fc:	2380      	movs	r3, #128	; 0x80
 80080fe:	e7d1      	b.n	80080a4 <UART_SetConfig+0xe04>
 8008100:	2301      	movs	r3, #1
 8008102:	e7cf      	b.n	80080a4 <UART_SetConfig+0xe04>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008104:	f7fb fd34 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800810a:	b1c3      	cbz	r3, 800813e <UART_SetConfig+0xe9e>
 800810c:	2b01      	cmp	r3, #1
 800810e:	d022      	beq.n	8008156 <UART_SetConfig+0xeb6>
 8008110:	2b02      	cmp	r3, #2
 8008112:	d022      	beq.n	800815a <UART_SetConfig+0xeba>
 8008114:	2b03      	cmp	r3, #3
 8008116:	d022      	beq.n	800815e <UART_SetConfig+0xebe>
 8008118:	2b04      	cmp	r3, #4
 800811a:	d022      	beq.n	8008162 <UART_SetConfig+0xec2>
 800811c:	2b05      	cmp	r3, #5
 800811e:	d022      	beq.n	8008166 <UART_SetConfig+0xec6>
 8008120:	2b06      	cmp	r3, #6
 8008122:	d022      	beq.n	800816a <UART_SetConfig+0xeca>
 8008124:	2b07      	cmp	r3, #7
 8008126:	d022      	beq.n	800816e <UART_SetConfig+0xece>
 8008128:	2b08      	cmp	r3, #8
 800812a:	d022      	beq.n	8008172 <UART_SetConfig+0xed2>
 800812c:	2b09      	cmp	r3, #9
 800812e:	d022      	beq.n	8008176 <UART_SetConfig+0xed6>
 8008130:	2b0a      	cmp	r3, #10
 8008132:	d022      	beq.n	800817a <UART_SetConfig+0xeda>
 8008134:	2b0b      	cmp	r3, #11
 8008136:	d122      	bne.n	800817e <UART_SetConfig+0xede>
 8008138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800813c:	e000      	b.n	8008140 <UART_SetConfig+0xea0>
 800813e:	2301      	movs	r3, #1
 8008140:	fbb0 f0f3 	udiv	r0, r0, r3
 8008144:	6862      	ldr	r2, [r4, #4]
 8008146:	0853      	lsrs	r3, r2, #1
 8008148:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800814c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008150:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008152:	2000      	movs	r0, #0
        break;
 8008154:	e7b0      	b.n	80080b8 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008156:	2302      	movs	r3, #2
 8008158:	e7f2      	b.n	8008140 <UART_SetConfig+0xea0>
 800815a:	2304      	movs	r3, #4
 800815c:	e7f0      	b.n	8008140 <UART_SetConfig+0xea0>
 800815e:	2306      	movs	r3, #6
 8008160:	e7ee      	b.n	8008140 <UART_SetConfig+0xea0>
 8008162:	2308      	movs	r3, #8
 8008164:	e7ec      	b.n	8008140 <UART_SetConfig+0xea0>
 8008166:	230a      	movs	r3, #10
 8008168:	e7ea      	b.n	8008140 <UART_SetConfig+0xea0>
 800816a:	230c      	movs	r3, #12
 800816c:	e7e8      	b.n	8008140 <UART_SetConfig+0xea0>
 800816e:	2310      	movs	r3, #16
 8008170:	e7e6      	b.n	8008140 <UART_SetConfig+0xea0>
 8008172:	2320      	movs	r3, #32
 8008174:	e7e4      	b.n	8008140 <UART_SetConfig+0xea0>
 8008176:	2340      	movs	r3, #64	; 0x40
 8008178:	e7e2      	b.n	8008140 <UART_SetConfig+0xea0>
 800817a:	2380      	movs	r3, #128	; 0x80
 800817c:	e7e0      	b.n	8008140 <UART_SetConfig+0xea0>
 800817e:	2301      	movs	r3, #1
 8008180:	e7de      	b.n	8008140 <UART_SetConfig+0xea0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008182:	a803      	add	r0, sp, #12
 8008184:	f7fc fab4 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008188:	9b04      	ldr	r3, [sp, #16]
 800818a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800818c:	b1c2      	cbz	r2, 80081c0 <UART_SetConfig+0xf20>
 800818e:	2a01      	cmp	r2, #1
 8008190:	d022      	beq.n	80081d8 <UART_SetConfig+0xf38>
 8008192:	2a02      	cmp	r2, #2
 8008194:	d022      	beq.n	80081dc <UART_SetConfig+0xf3c>
 8008196:	2a03      	cmp	r2, #3
 8008198:	d022      	beq.n	80081e0 <UART_SetConfig+0xf40>
 800819a:	2a04      	cmp	r2, #4
 800819c:	d022      	beq.n	80081e4 <UART_SetConfig+0xf44>
 800819e:	2a05      	cmp	r2, #5
 80081a0:	d022      	beq.n	80081e8 <UART_SetConfig+0xf48>
 80081a2:	2a06      	cmp	r2, #6
 80081a4:	d022      	beq.n	80081ec <UART_SetConfig+0xf4c>
 80081a6:	2a07      	cmp	r2, #7
 80081a8:	d022      	beq.n	80081f0 <UART_SetConfig+0xf50>
 80081aa:	2a08      	cmp	r2, #8
 80081ac:	d022      	beq.n	80081f4 <UART_SetConfig+0xf54>
 80081ae:	2a09      	cmp	r2, #9
 80081b0:	d022      	beq.n	80081f8 <UART_SetConfig+0xf58>
 80081b2:	2a0a      	cmp	r2, #10
 80081b4:	d022      	beq.n	80081fc <UART_SetConfig+0xf5c>
 80081b6:	2a0b      	cmp	r2, #11
 80081b8:	d122      	bne.n	8008200 <UART_SetConfig+0xf60>
 80081ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081be:	e000      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081c0:	2201      	movs	r2, #1
 80081c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80081c6:	6861      	ldr	r1, [r4, #4]
 80081c8:	084b      	lsrs	r3, r1, #1
 80081ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80081ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80081d2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80081d4:	2000      	movs	r0, #0
        break;
 80081d6:	e76f      	b.n	80080b8 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081d8:	2202      	movs	r2, #2
 80081da:	e7f2      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081dc:	2204      	movs	r2, #4
 80081de:	e7f0      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081e0:	2206      	movs	r2, #6
 80081e2:	e7ee      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081e4:	2208      	movs	r2, #8
 80081e6:	e7ec      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081e8:	220a      	movs	r2, #10
 80081ea:	e7ea      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081ec:	220c      	movs	r2, #12
 80081ee:	e7e8      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081f0:	2210      	movs	r2, #16
 80081f2:	e7e6      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081f4:	2220      	movs	r2, #32
 80081f6:	e7e4      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081f8:	2240      	movs	r2, #64	; 0x40
 80081fa:	e7e2      	b.n	80081c2 <UART_SetConfig+0xf22>
 80081fc:	2280      	movs	r2, #128	; 0x80
 80081fe:	e7e0      	b.n	80081c2 <UART_SetConfig+0xf22>
 8008200:	2201      	movs	r2, #1
 8008202:	e7de      	b.n	80081c2 <UART_SetConfig+0xf22>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008204:	4668      	mov	r0, sp
 8008206:	f7fc fb71 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820a:	9b01      	ldr	r3, [sp, #4]
 800820c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800820e:	b1c2      	cbz	r2, 8008242 <UART_SetConfig+0xfa2>
 8008210:	2a01      	cmp	r2, #1
 8008212:	d022      	beq.n	800825a <UART_SetConfig+0xfba>
 8008214:	2a02      	cmp	r2, #2
 8008216:	d022      	beq.n	800825e <UART_SetConfig+0xfbe>
 8008218:	2a03      	cmp	r2, #3
 800821a:	d022      	beq.n	8008262 <UART_SetConfig+0xfc2>
 800821c:	2a04      	cmp	r2, #4
 800821e:	d022      	beq.n	8008266 <UART_SetConfig+0xfc6>
 8008220:	2a05      	cmp	r2, #5
 8008222:	d022      	beq.n	800826a <UART_SetConfig+0xfca>
 8008224:	2a06      	cmp	r2, #6
 8008226:	d022      	beq.n	800826e <UART_SetConfig+0xfce>
 8008228:	2a07      	cmp	r2, #7
 800822a:	d022      	beq.n	8008272 <UART_SetConfig+0xfd2>
 800822c:	2a08      	cmp	r2, #8
 800822e:	d022      	beq.n	8008276 <UART_SetConfig+0xfd6>
 8008230:	2a09      	cmp	r2, #9
 8008232:	d022      	beq.n	800827a <UART_SetConfig+0xfda>
 8008234:	2a0a      	cmp	r2, #10
 8008236:	d022      	beq.n	800827e <UART_SetConfig+0xfde>
 8008238:	2a0b      	cmp	r2, #11
 800823a:	d122      	bne.n	8008282 <UART_SetConfig+0xfe2>
 800823c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008240:	e000      	b.n	8008244 <UART_SetConfig+0xfa4>
 8008242:	2201      	movs	r2, #1
 8008244:	fbb3 f2f2 	udiv	r2, r3, r2
 8008248:	6861      	ldr	r1, [r4, #4]
 800824a:	084b      	lsrs	r3, r1, #1
 800824c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008250:	fbb3 f3f1 	udiv	r3, r3, r1
 8008254:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008256:	2000      	movs	r0, #0
        break;
 8008258:	e72e      	b.n	80080b8 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800825a:	2202      	movs	r2, #2
 800825c:	e7f2      	b.n	8008244 <UART_SetConfig+0xfa4>
 800825e:	2204      	movs	r2, #4
 8008260:	e7f0      	b.n	8008244 <UART_SetConfig+0xfa4>
 8008262:	2206      	movs	r2, #6
 8008264:	e7ee      	b.n	8008244 <UART_SetConfig+0xfa4>
 8008266:	2208      	movs	r2, #8
 8008268:	e7ec      	b.n	8008244 <UART_SetConfig+0xfa4>
 800826a:	220a      	movs	r2, #10
 800826c:	e7ea      	b.n	8008244 <UART_SetConfig+0xfa4>
 800826e:	220c      	movs	r2, #12
 8008270:	e7e8      	b.n	8008244 <UART_SetConfig+0xfa4>
 8008272:	2210      	movs	r2, #16
 8008274:	e7e6      	b.n	8008244 <UART_SetConfig+0xfa4>
 8008276:	2220      	movs	r2, #32
 8008278:	e7e4      	b.n	8008244 <UART_SetConfig+0xfa4>
 800827a:	2240      	movs	r2, #64	; 0x40
 800827c:	e7e2      	b.n	8008244 <UART_SetConfig+0xfa4>
 800827e:	2280      	movs	r2, #128	; 0x80
 8008280:	e7e0      	b.n	8008244 <UART_SetConfig+0xfa4>
 8008282:	2201      	movs	r2, #1
 8008284:	e7de      	b.n	8008244 <UART_SetConfig+0xfa4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008286:	4ba4      	ldr	r3, [pc, #656]	; (8008518 <UART_SetConfig+0x1278>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f013 0f20 	tst.w	r3, #32
 800828e:	d042      	beq.n	8008316 <UART_SetConfig+0x1076>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008290:	4ba1      	ldr	r3, [pc, #644]	; (8008518 <UART_SetConfig+0x1278>)
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008298:	4ba0      	ldr	r3, [pc, #640]	; (800851c <UART_SetConfig+0x127c>)
 800829a:	40d3      	lsrs	r3, r2
 800829c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800829e:	b1d2      	cbz	r2, 80082d6 <UART_SetConfig+0x1036>
 80082a0:	2a01      	cmp	r2, #1
 80082a2:	d024      	beq.n	80082ee <UART_SetConfig+0x104e>
 80082a4:	2a02      	cmp	r2, #2
 80082a6:	d024      	beq.n	80082f2 <UART_SetConfig+0x1052>
 80082a8:	2a03      	cmp	r2, #3
 80082aa:	d024      	beq.n	80082f6 <UART_SetConfig+0x1056>
 80082ac:	2a04      	cmp	r2, #4
 80082ae:	d024      	beq.n	80082fa <UART_SetConfig+0x105a>
 80082b0:	2a05      	cmp	r2, #5
 80082b2:	d024      	beq.n	80082fe <UART_SetConfig+0x105e>
 80082b4:	2a06      	cmp	r2, #6
 80082b6:	d024      	beq.n	8008302 <UART_SetConfig+0x1062>
 80082b8:	2a07      	cmp	r2, #7
 80082ba:	d024      	beq.n	8008306 <UART_SetConfig+0x1066>
 80082bc:	2a08      	cmp	r2, #8
 80082be:	d024      	beq.n	800830a <UART_SetConfig+0x106a>
 80082c0:	2a09      	cmp	r2, #9
 80082c2:	d024      	beq.n	800830e <UART_SetConfig+0x106e>
 80082c4:	2a0a      	cmp	r2, #10
 80082c6:	d024      	beq.n	8008312 <UART_SetConfig+0x1072>
 80082c8:	2a0b      	cmp	r2, #11
 80082ca:	d001      	beq.n	80082d0 <UART_SetConfig+0x1030>
 80082cc:	2201      	movs	r2, #1
 80082ce:	e003      	b.n	80082d8 <UART_SetConfig+0x1038>
 80082d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082d4:	e000      	b.n	80082d8 <UART_SetConfig+0x1038>
 80082d6:	2201      	movs	r2, #1
 80082d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80082dc:	6861      	ldr	r1, [r4, #4]
 80082de:	084b      	lsrs	r3, r1, #1
 80082e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80082e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80082e8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80082ea:	2000      	movs	r0, #0
 80082ec:	e6e4      	b.n	80080b8 <UART_SetConfig+0xe18>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ee:	2202      	movs	r2, #2
 80082f0:	e7f2      	b.n	80082d8 <UART_SetConfig+0x1038>
 80082f2:	2204      	movs	r2, #4
 80082f4:	e7f0      	b.n	80082d8 <UART_SetConfig+0x1038>
 80082f6:	2206      	movs	r2, #6
 80082f8:	e7ee      	b.n	80082d8 <UART_SetConfig+0x1038>
 80082fa:	2208      	movs	r2, #8
 80082fc:	e7ec      	b.n	80082d8 <UART_SetConfig+0x1038>
 80082fe:	220a      	movs	r2, #10
 8008300:	e7ea      	b.n	80082d8 <UART_SetConfig+0x1038>
 8008302:	220c      	movs	r2, #12
 8008304:	e7e8      	b.n	80082d8 <UART_SetConfig+0x1038>
 8008306:	2210      	movs	r2, #16
 8008308:	e7e6      	b.n	80082d8 <UART_SetConfig+0x1038>
 800830a:	2220      	movs	r2, #32
 800830c:	e7e4      	b.n	80082d8 <UART_SetConfig+0x1038>
 800830e:	2240      	movs	r2, #64	; 0x40
 8008310:	e7e2      	b.n	80082d8 <UART_SetConfig+0x1038>
 8008312:	2280      	movs	r2, #128	; 0x80
 8008314:	e7e0      	b.n	80082d8 <UART_SetConfig+0x1038>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008318:	b1cb      	cbz	r3, 800834e <UART_SetConfig+0x10ae>
 800831a:	2b01      	cmp	r3, #1
 800831c:	d020      	beq.n	8008360 <UART_SetConfig+0x10c0>
 800831e:	2b02      	cmp	r3, #2
 8008320:	d020      	beq.n	8008364 <UART_SetConfig+0x10c4>
 8008322:	2b03      	cmp	r3, #3
 8008324:	d020      	beq.n	8008368 <UART_SetConfig+0x10c8>
 8008326:	2b04      	cmp	r3, #4
 8008328:	d020      	beq.n	800836c <UART_SetConfig+0x10cc>
 800832a:	2b05      	cmp	r3, #5
 800832c:	d020      	beq.n	8008370 <UART_SetConfig+0x10d0>
 800832e:	2b06      	cmp	r3, #6
 8008330:	d020      	beq.n	8008374 <UART_SetConfig+0x10d4>
 8008332:	2b07      	cmp	r3, #7
 8008334:	d020      	beq.n	8008378 <UART_SetConfig+0x10d8>
 8008336:	2b08      	cmp	r3, #8
 8008338:	d020      	beq.n	800837c <UART_SetConfig+0x10dc>
 800833a:	2b09      	cmp	r3, #9
 800833c:	d020      	beq.n	8008380 <UART_SetConfig+0x10e0>
 800833e:	2b0a      	cmp	r3, #10
 8008340:	d020      	beq.n	8008384 <UART_SetConfig+0x10e4>
 8008342:	2b0b      	cmp	r3, #11
 8008344:	d001      	beq.n	800834a <UART_SetConfig+0x10aa>
 8008346:	4b76      	ldr	r3, [pc, #472]	; (8008520 <UART_SetConfig+0x1280>)
 8008348:	e002      	b.n	8008350 <UART_SetConfig+0x10b0>
 800834a:	4b76      	ldr	r3, [pc, #472]	; (8008524 <UART_SetConfig+0x1284>)
 800834c:	e000      	b.n	8008350 <UART_SetConfig+0x10b0>
 800834e:	4b74      	ldr	r3, [pc, #464]	; (8008520 <UART_SetConfig+0x1280>)
 8008350:	6862      	ldr	r2, [r4, #4]
 8008352:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008356:	fbb3 f3f2 	udiv	r3, r3, r2
 800835a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800835c:	2000      	movs	r0, #0
 800835e:	e6ab      	b.n	80080b8 <UART_SetConfig+0xe18>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008360:	4b6e      	ldr	r3, [pc, #440]	; (800851c <UART_SetConfig+0x127c>)
 8008362:	e7f5      	b.n	8008350 <UART_SetConfig+0x10b0>
 8008364:	4b70      	ldr	r3, [pc, #448]	; (8008528 <UART_SetConfig+0x1288>)
 8008366:	e7f3      	b.n	8008350 <UART_SetConfig+0x10b0>
 8008368:	4b70      	ldr	r3, [pc, #448]	; (800852c <UART_SetConfig+0x128c>)
 800836a:	e7f1      	b.n	8008350 <UART_SetConfig+0x10b0>
 800836c:	4b70      	ldr	r3, [pc, #448]	; (8008530 <UART_SetConfig+0x1290>)
 800836e:	e7ef      	b.n	8008350 <UART_SetConfig+0x10b0>
 8008370:	4b70      	ldr	r3, [pc, #448]	; (8008534 <UART_SetConfig+0x1294>)
 8008372:	e7ed      	b.n	8008350 <UART_SetConfig+0x10b0>
 8008374:	4b70      	ldr	r3, [pc, #448]	; (8008538 <UART_SetConfig+0x1298>)
 8008376:	e7eb      	b.n	8008350 <UART_SetConfig+0x10b0>
 8008378:	4b70      	ldr	r3, [pc, #448]	; (800853c <UART_SetConfig+0x129c>)
 800837a:	e7e9      	b.n	8008350 <UART_SetConfig+0x10b0>
 800837c:	4b70      	ldr	r3, [pc, #448]	; (8008540 <UART_SetConfig+0x12a0>)
 800837e:	e7e7      	b.n	8008350 <UART_SetConfig+0x10b0>
 8008380:	4b70      	ldr	r3, [pc, #448]	; (8008544 <UART_SetConfig+0x12a4>)
 8008382:	e7e5      	b.n	8008350 <UART_SetConfig+0x10b0>
 8008384:	4b70      	ldr	r3, [pc, #448]	; (8008548 <UART_SetConfig+0x12a8>)
 8008386:	e7e3      	b.n	8008350 <UART_SetConfig+0x10b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800838a:	b1c3      	cbz	r3, 80083be <UART_SetConfig+0x111e>
 800838c:	2b01      	cmp	r3, #1
 800838e:	d01f      	beq.n	80083d0 <UART_SetConfig+0x1130>
 8008390:	2b02      	cmp	r3, #2
 8008392:	d01f      	beq.n	80083d4 <UART_SetConfig+0x1134>
 8008394:	2b03      	cmp	r3, #3
 8008396:	d01f      	beq.n	80083d8 <UART_SetConfig+0x1138>
 8008398:	2b04      	cmp	r3, #4
 800839a:	d01f      	beq.n	80083dc <UART_SetConfig+0x113c>
 800839c:	2b05      	cmp	r3, #5
 800839e:	d01f      	beq.n	80083e0 <UART_SetConfig+0x1140>
 80083a0:	2b06      	cmp	r3, #6
 80083a2:	d01f      	beq.n	80083e4 <UART_SetConfig+0x1144>
 80083a4:	2b07      	cmp	r3, #7
 80083a6:	d01f      	beq.n	80083e8 <UART_SetConfig+0x1148>
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d01f      	beq.n	80083ec <UART_SetConfig+0x114c>
 80083ac:	2b09      	cmp	r3, #9
 80083ae:	d01f      	beq.n	80083f0 <UART_SetConfig+0x1150>
 80083b0:	2b0a      	cmp	r3, #10
 80083b2:	d01f      	beq.n	80083f4 <UART_SetConfig+0x1154>
 80083b4:	2b0b      	cmp	r3, #11
 80083b6:	d120      	bne.n	80083fa <UART_SetConfig+0x115a>
 80083b8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80083bc:	e000      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083be:	4b5f      	ldr	r3, [pc, #380]	; (800853c <UART_SetConfig+0x129c>)
 80083c0:	6862      	ldr	r2, [r4, #4]
 80083c2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80083c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80083cc:	2000      	movs	r0, #0
        break;
 80083ce:	e673      	b.n	80080b8 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083d0:	4b5b      	ldr	r3, [pc, #364]	; (8008540 <UART_SetConfig+0x12a0>)
 80083d2:	e7f5      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083d4:	4b5b      	ldr	r3, [pc, #364]	; (8008544 <UART_SetConfig+0x12a4>)
 80083d6:	e7f3      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083d8:	4b5c      	ldr	r3, [pc, #368]	; (800854c <UART_SetConfig+0x12ac>)
 80083da:	e7f1      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083dc:	4b5a      	ldr	r3, [pc, #360]	; (8008548 <UART_SetConfig+0x12a8>)
 80083de:	e7ef      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083e0:	4b5b      	ldr	r3, [pc, #364]	; (8008550 <UART_SetConfig+0x12b0>)
 80083e2:	e7ed      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083e4:	4b5b      	ldr	r3, [pc, #364]	; (8008554 <UART_SetConfig+0x12b4>)
 80083e6:	e7eb      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083e8:	4b4e      	ldr	r3, [pc, #312]	; (8008524 <UART_SetConfig+0x1284>)
 80083ea:	e7e9      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083ec:	4b5a      	ldr	r3, [pc, #360]	; (8008558 <UART_SetConfig+0x12b8>)
 80083ee:	e7e7      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083f0:	4b5a      	ldr	r3, [pc, #360]	; (800855c <UART_SetConfig+0x12bc>)
 80083f2:	e7e5      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80083f8:	e7e2      	b.n	80083c0 <UART_SetConfig+0x1120>
 80083fa:	4b50      	ldr	r3, [pc, #320]	; (800853c <UART_SetConfig+0x129c>)
 80083fc:	e7e0      	b.n	80083c0 <UART_SetConfig+0x1120>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008400:	b1c3      	cbz	r3, 8008434 <UART_SetConfig+0x1194>
 8008402:	2b01      	cmp	r3, #1
 8008404:	d020      	beq.n	8008448 <UART_SetConfig+0x11a8>
 8008406:	2b02      	cmp	r3, #2
 8008408:	d021      	beq.n	800844e <UART_SetConfig+0x11ae>
 800840a:	2b03      	cmp	r3, #3
 800840c:	d022      	beq.n	8008454 <UART_SetConfig+0x11b4>
 800840e:	2b04      	cmp	r3, #4
 8008410:	d023      	beq.n	800845a <UART_SetConfig+0x11ba>
 8008412:	2b05      	cmp	r3, #5
 8008414:	d024      	beq.n	8008460 <UART_SetConfig+0x11c0>
 8008416:	2b06      	cmp	r3, #6
 8008418:	d025      	beq.n	8008466 <UART_SetConfig+0x11c6>
 800841a:	2b07      	cmp	r3, #7
 800841c:	d026      	beq.n	800846c <UART_SetConfig+0x11cc>
 800841e:	2b08      	cmp	r3, #8
 8008420:	d027      	beq.n	8008472 <UART_SetConfig+0x11d2>
 8008422:	2b09      	cmp	r3, #9
 8008424:	d028      	beq.n	8008478 <UART_SetConfig+0x11d8>
 8008426:	2b0a      	cmp	r3, #10
 8008428:	d029      	beq.n	800847e <UART_SetConfig+0x11de>
 800842a:	2b0b      	cmp	r3, #11
 800842c:	d12a      	bne.n	8008484 <UART_SetConfig+0x11e4>
 800842e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008432:	e001      	b.n	8008438 <UART_SetConfig+0x1198>
 8008434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008438:	6862      	ldr	r2, [r4, #4]
 800843a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800843e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008442:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008444:	2000      	movs	r0, #0
        break;
 8008446:	e637      	b.n	80080b8 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800844c:	e7f4      	b.n	8008438 <UART_SetConfig+0x1198>
 800844e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008452:	e7f1      	b.n	8008438 <UART_SetConfig+0x1198>
 8008454:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008458:	e7ee      	b.n	8008438 <UART_SetConfig+0x1198>
 800845a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800845e:	e7eb      	b.n	8008438 <UART_SetConfig+0x1198>
 8008460:	f641 1398 	movw	r3, #6552	; 0x1998
 8008464:	e7e8      	b.n	8008438 <UART_SetConfig+0x1198>
 8008466:	f241 5354 	movw	r3, #5460	; 0x1554
 800846a:	e7e5      	b.n	8008438 <UART_SetConfig+0x1198>
 800846c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008470:	e7e2      	b.n	8008438 <UART_SetConfig+0x1198>
 8008472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008476:	e7df      	b.n	8008438 <UART_SetConfig+0x1198>
 8008478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800847c:	e7dc      	b.n	8008438 <UART_SetConfig+0x1198>
 800847e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008482:	e7d9      	b.n	8008438 <UART_SetConfig+0x1198>
 8008484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008488:	e7d6      	b.n	8008438 <UART_SetConfig+0x1198>
        ret = HAL_ERROR;
 800848a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800848c:	2300      	movs	r3, #0
 800848e:	e613      	b.n	80080b8 <UART_SetConfig+0xe18>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008490:	f7fb fb5c 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008496:	b1d3      	cbz	r3, 80084ce <UART_SetConfig+0x122e>
 8008498:	2b01      	cmp	r3, #1
 800849a:	d036      	beq.n	800850a <UART_SetConfig+0x126a>
 800849c:	2b02      	cmp	r3, #2
 800849e:	d036      	beq.n	800850e <UART_SetConfig+0x126e>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d036      	beq.n	8008512 <UART_SetConfig+0x1272>
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d073      	beq.n	8008590 <UART_SetConfig+0x12f0>
 80084a8:	2b05      	cmp	r3, #5
 80084aa:	d073      	beq.n	8008594 <UART_SetConfig+0x12f4>
 80084ac:	2b06      	cmp	r3, #6
 80084ae:	d073      	beq.n	8008598 <UART_SetConfig+0x12f8>
 80084b0:	2b07      	cmp	r3, #7
 80084b2:	d073      	beq.n	800859c <UART_SetConfig+0x12fc>
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d073      	beq.n	80085a0 <UART_SetConfig+0x1300>
 80084b8:	2b09      	cmp	r3, #9
 80084ba:	d073      	beq.n	80085a4 <UART_SetConfig+0x1304>
 80084bc:	2b0a      	cmp	r3, #10
 80084be:	d073      	beq.n	80085a8 <UART_SetConfig+0x1308>
 80084c0:	2b0b      	cmp	r3, #11
 80084c2:	d001      	beq.n	80084c8 <UART_SetConfig+0x1228>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e003      	b.n	80084d0 <UART_SetConfig+0x1230>
 80084c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084cc:	e000      	b.n	80084d0 <UART_SetConfig+0x1230>
 80084ce:	2301      	movs	r3, #1
 80084d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80084d4:	6862      	ldr	r2, [r4, #4]
 80084d6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80084da:	fbb3 f3f2 	udiv	r3, r3, r2
 80084de:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80084e0:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e2:	f1a3 0110 	sub.w	r1, r3, #16
 80084e6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80084ea:	4291      	cmp	r1, r2
 80084ec:	f200 822a 	bhi.w	8008944 <UART_SetConfig+0x16a4>
    {
      huart->Instance->BRR = usartdiv;
 80084f0:	6822      	ldr	r2, [r4, #0]
 80084f2:	60d3      	str	r3, [r2, #12]
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80084fa:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8008502:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 8008504:	b007      	add	sp, #28
 8008506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800850a:	2302      	movs	r3, #2
 800850c:	e7e0      	b.n	80084d0 <UART_SetConfig+0x1230>
 800850e:	2304      	movs	r3, #4
 8008510:	e7de      	b.n	80084d0 <UART_SetConfig+0x1230>
 8008512:	2306      	movs	r3, #6
 8008514:	e7dc      	b.n	80084d0 <UART_SetConfig+0x1230>
 8008516:	bf00      	nop
 8008518:	58024400 	.word	0x58024400
 800851c:	03d09000 	.word	0x03d09000
 8008520:	07a12000 	.word	0x07a12000
 8008524:	0007a120 	.word	0x0007a120
 8008528:	01e84800 	.word	0x01e84800
 800852c:	01458554 	.word	0x01458554
 8008530:	00f42400 	.word	0x00f42400
 8008534:	00c35000 	.word	0x00c35000
 8008538:	00a2c2aa 	.word	0x00a2c2aa
 800853c:	007a1200 	.word	0x007a1200
 8008540:	003d0900 	.word	0x003d0900
 8008544:	001e8480 	.word	0x001e8480
 8008548:	000f4240 	.word	0x000f4240
 800854c:	00145854 	.word	0x00145854
 8008550:	000c3500 	.word	0x000c3500
 8008554:	000a2c2a 	.word	0x000a2c2a
 8008558:	0003d090 	.word	0x0003d090
 800855c:	0001e848 	.word	0x0001e848
 8008560:	0a2c2a00 	.word	0x0a2c2a00
 8008564:	00000000 	.word	0x00000000
 8008568:	05161500 	.word	0x05161500
 800856c:	00000000 	.word	0x00000000
 8008570:	d0900000 	.word	0xd0900000
 8008574:	3d090000 	.word	0x3d090000
 8008578:	1e848000 	.word	0x1e848000
 800857c:	0f424000 	.word	0x0f424000
 8008580:	061a8000 	.word	0x061a8000
 8008584:	00155500 	.word	0x00155500
 8008588:	000ccc00 	.word	0x000ccc00
 800858c:	000aaa00 	.word	0x000aaa00
 8008590:	2308      	movs	r3, #8
 8008592:	e79d      	b.n	80084d0 <UART_SetConfig+0x1230>
 8008594:	230a      	movs	r3, #10
 8008596:	e79b      	b.n	80084d0 <UART_SetConfig+0x1230>
 8008598:	230c      	movs	r3, #12
 800859a:	e799      	b.n	80084d0 <UART_SetConfig+0x1230>
 800859c:	2310      	movs	r3, #16
 800859e:	e797      	b.n	80084d0 <UART_SetConfig+0x1230>
 80085a0:	2320      	movs	r3, #32
 80085a2:	e795      	b.n	80084d0 <UART_SetConfig+0x1230>
 80085a4:	2340      	movs	r3, #64	; 0x40
 80085a6:	e793      	b.n	80084d0 <UART_SetConfig+0x1230>
 80085a8:	2380      	movs	r3, #128	; 0x80
 80085aa:	e791      	b.n	80084d0 <UART_SetConfig+0x1230>
        pclk = HAL_RCC_GetPCLK2Freq();
 80085ac:	f7fb fae0 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b2:	b1d3      	cbz	r3, 80085ea <UART_SetConfig+0x134a>
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d023      	beq.n	8008600 <UART_SetConfig+0x1360>
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d023      	beq.n	8008604 <UART_SetConfig+0x1364>
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d023      	beq.n	8008608 <UART_SetConfig+0x1368>
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d023      	beq.n	800860c <UART_SetConfig+0x136c>
 80085c4:	2b05      	cmp	r3, #5
 80085c6:	d023      	beq.n	8008610 <UART_SetConfig+0x1370>
 80085c8:	2b06      	cmp	r3, #6
 80085ca:	d023      	beq.n	8008614 <UART_SetConfig+0x1374>
 80085cc:	2b07      	cmp	r3, #7
 80085ce:	d023      	beq.n	8008618 <UART_SetConfig+0x1378>
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d023      	beq.n	800861c <UART_SetConfig+0x137c>
 80085d4:	2b09      	cmp	r3, #9
 80085d6:	d023      	beq.n	8008620 <UART_SetConfig+0x1380>
 80085d8:	2b0a      	cmp	r3, #10
 80085da:	d023      	beq.n	8008624 <UART_SetConfig+0x1384>
 80085dc:	2b0b      	cmp	r3, #11
 80085de:	d001      	beq.n	80085e4 <UART_SetConfig+0x1344>
 80085e0:	2301      	movs	r3, #1
 80085e2:	e003      	b.n	80085ec <UART_SetConfig+0x134c>
 80085e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085e8:	e000      	b.n	80085ec <UART_SetConfig+0x134c>
 80085ea:	2301      	movs	r3, #1
 80085ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80085f0:	6862      	ldr	r2, [r4, #4]
 80085f2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80085f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80085fa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80085fc:	2000      	movs	r0, #0
        break;
 80085fe:	e770      	b.n	80084e2 <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008600:	2302      	movs	r3, #2
 8008602:	e7f3      	b.n	80085ec <UART_SetConfig+0x134c>
 8008604:	2304      	movs	r3, #4
 8008606:	e7f1      	b.n	80085ec <UART_SetConfig+0x134c>
 8008608:	2306      	movs	r3, #6
 800860a:	e7ef      	b.n	80085ec <UART_SetConfig+0x134c>
 800860c:	2308      	movs	r3, #8
 800860e:	e7ed      	b.n	80085ec <UART_SetConfig+0x134c>
 8008610:	230a      	movs	r3, #10
 8008612:	e7eb      	b.n	80085ec <UART_SetConfig+0x134c>
 8008614:	230c      	movs	r3, #12
 8008616:	e7e9      	b.n	80085ec <UART_SetConfig+0x134c>
 8008618:	2310      	movs	r3, #16
 800861a:	e7e7      	b.n	80085ec <UART_SetConfig+0x134c>
 800861c:	2320      	movs	r3, #32
 800861e:	e7e5      	b.n	80085ec <UART_SetConfig+0x134c>
 8008620:	2340      	movs	r3, #64	; 0x40
 8008622:	e7e3      	b.n	80085ec <UART_SetConfig+0x134c>
 8008624:	2380      	movs	r3, #128	; 0x80
 8008626:	e7e1      	b.n	80085ec <UART_SetConfig+0x134c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008628:	a803      	add	r0, sp, #12
 800862a:	f7fc f861 	bl	80046f0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800862e:	9b04      	ldr	r3, [sp, #16]
 8008630:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008632:	b1d2      	cbz	r2, 800866a <UART_SetConfig+0x13ca>
 8008634:	2a01      	cmp	r2, #1
 8008636:	d023      	beq.n	8008680 <UART_SetConfig+0x13e0>
 8008638:	2a02      	cmp	r2, #2
 800863a:	d023      	beq.n	8008684 <UART_SetConfig+0x13e4>
 800863c:	2a03      	cmp	r2, #3
 800863e:	d023      	beq.n	8008688 <UART_SetConfig+0x13e8>
 8008640:	2a04      	cmp	r2, #4
 8008642:	d023      	beq.n	800868c <UART_SetConfig+0x13ec>
 8008644:	2a05      	cmp	r2, #5
 8008646:	d023      	beq.n	8008690 <UART_SetConfig+0x13f0>
 8008648:	2a06      	cmp	r2, #6
 800864a:	d023      	beq.n	8008694 <UART_SetConfig+0x13f4>
 800864c:	2a07      	cmp	r2, #7
 800864e:	d023      	beq.n	8008698 <UART_SetConfig+0x13f8>
 8008650:	2a08      	cmp	r2, #8
 8008652:	d023      	beq.n	800869c <UART_SetConfig+0x13fc>
 8008654:	2a09      	cmp	r2, #9
 8008656:	d023      	beq.n	80086a0 <UART_SetConfig+0x1400>
 8008658:	2a0a      	cmp	r2, #10
 800865a:	d023      	beq.n	80086a4 <UART_SetConfig+0x1404>
 800865c:	2a0b      	cmp	r2, #11
 800865e:	d001      	beq.n	8008664 <UART_SetConfig+0x13c4>
 8008660:	2201      	movs	r2, #1
 8008662:	e003      	b.n	800866c <UART_SetConfig+0x13cc>
 8008664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008668:	e000      	b.n	800866c <UART_SetConfig+0x13cc>
 800866a:	2201      	movs	r2, #1
 800866c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008670:	6862      	ldr	r2, [r4, #4]
 8008672:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008676:	fbb3 f3f2 	udiv	r3, r3, r2
 800867a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800867c:	2000      	movs	r0, #0
        break;
 800867e:	e730      	b.n	80084e2 <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008680:	2202      	movs	r2, #2
 8008682:	e7f3      	b.n	800866c <UART_SetConfig+0x13cc>
 8008684:	2204      	movs	r2, #4
 8008686:	e7f1      	b.n	800866c <UART_SetConfig+0x13cc>
 8008688:	2206      	movs	r2, #6
 800868a:	e7ef      	b.n	800866c <UART_SetConfig+0x13cc>
 800868c:	2208      	movs	r2, #8
 800868e:	e7ed      	b.n	800866c <UART_SetConfig+0x13cc>
 8008690:	220a      	movs	r2, #10
 8008692:	e7eb      	b.n	800866c <UART_SetConfig+0x13cc>
 8008694:	220c      	movs	r2, #12
 8008696:	e7e9      	b.n	800866c <UART_SetConfig+0x13cc>
 8008698:	2210      	movs	r2, #16
 800869a:	e7e7      	b.n	800866c <UART_SetConfig+0x13cc>
 800869c:	2220      	movs	r2, #32
 800869e:	e7e5      	b.n	800866c <UART_SetConfig+0x13cc>
 80086a0:	2240      	movs	r2, #64	; 0x40
 80086a2:	e7e3      	b.n	800866c <UART_SetConfig+0x13cc>
 80086a4:	2280      	movs	r2, #128	; 0x80
 80086a6:	e7e1      	b.n	800866c <UART_SetConfig+0x13cc>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a8:	4668      	mov	r0, sp
 80086aa:	f7fc f91f 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ae:	9b01      	ldr	r3, [sp, #4]
 80086b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80086b2:	b1d2      	cbz	r2, 80086ea <UART_SetConfig+0x144a>
 80086b4:	2a01      	cmp	r2, #1
 80086b6:	d023      	beq.n	8008700 <UART_SetConfig+0x1460>
 80086b8:	2a02      	cmp	r2, #2
 80086ba:	d023      	beq.n	8008704 <UART_SetConfig+0x1464>
 80086bc:	2a03      	cmp	r2, #3
 80086be:	d023      	beq.n	8008708 <UART_SetConfig+0x1468>
 80086c0:	2a04      	cmp	r2, #4
 80086c2:	d023      	beq.n	800870c <UART_SetConfig+0x146c>
 80086c4:	2a05      	cmp	r2, #5
 80086c6:	d023      	beq.n	8008710 <UART_SetConfig+0x1470>
 80086c8:	2a06      	cmp	r2, #6
 80086ca:	d023      	beq.n	8008714 <UART_SetConfig+0x1474>
 80086cc:	2a07      	cmp	r2, #7
 80086ce:	d023      	beq.n	8008718 <UART_SetConfig+0x1478>
 80086d0:	2a08      	cmp	r2, #8
 80086d2:	d023      	beq.n	800871c <UART_SetConfig+0x147c>
 80086d4:	2a09      	cmp	r2, #9
 80086d6:	d023      	beq.n	8008720 <UART_SetConfig+0x1480>
 80086d8:	2a0a      	cmp	r2, #10
 80086da:	d023      	beq.n	8008724 <UART_SetConfig+0x1484>
 80086dc:	2a0b      	cmp	r2, #11
 80086de:	d001      	beq.n	80086e4 <UART_SetConfig+0x1444>
 80086e0:	2201      	movs	r2, #1
 80086e2:	e003      	b.n	80086ec <UART_SetConfig+0x144c>
 80086e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086e8:	e000      	b.n	80086ec <UART_SetConfig+0x144c>
 80086ea:	2201      	movs	r2, #1
 80086ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f0:	6862      	ldr	r2, [r4, #4]
 80086f2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80086f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80086fa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80086fc:	2000      	movs	r0, #0
        break;
 80086fe:	e6f0      	b.n	80084e2 <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008700:	2202      	movs	r2, #2
 8008702:	e7f3      	b.n	80086ec <UART_SetConfig+0x144c>
 8008704:	2204      	movs	r2, #4
 8008706:	e7f1      	b.n	80086ec <UART_SetConfig+0x144c>
 8008708:	2206      	movs	r2, #6
 800870a:	e7ef      	b.n	80086ec <UART_SetConfig+0x144c>
 800870c:	2208      	movs	r2, #8
 800870e:	e7ed      	b.n	80086ec <UART_SetConfig+0x144c>
 8008710:	220a      	movs	r2, #10
 8008712:	e7eb      	b.n	80086ec <UART_SetConfig+0x144c>
 8008714:	220c      	movs	r2, #12
 8008716:	e7e9      	b.n	80086ec <UART_SetConfig+0x144c>
 8008718:	2210      	movs	r2, #16
 800871a:	e7e7      	b.n	80086ec <UART_SetConfig+0x144c>
 800871c:	2220      	movs	r2, #32
 800871e:	e7e5      	b.n	80086ec <UART_SetConfig+0x144c>
 8008720:	2240      	movs	r2, #64	; 0x40
 8008722:	e7e3      	b.n	80086ec <UART_SetConfig+0x144c>
 8008724:	2280      	movs	r2, #128	; 0x80
 8008726:	e7e1      	b.n	80086ec <UART_SetConfig+0x144c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008728:	4b87      	ldr	r3, [pc, #540]	; (8008948 <UART_SetConfig+0x16a8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f013 0f20 	tst.w	r3, #32
 8008730:	d041      	beq.n	80087b6 <UART_SetConfig+0x1516>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008732:	4b85      	ldr	r3, [pc, #532]	; (8008948 <UART_SetConfig+0x16a8>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800873a:	4b84      	ldr	r3, [pc, #528]	; (800894c <UART_SetConfig+0x16ac>)
 800873c:	40d3      	lsrs	r3, r2
 800873e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008740:	b1c2      	cbz	r2, 8008774 <UART_SetConfig+0x14d4>
 8008742:	2a01      	cmp	r2, #1
 8008744:	d021      	beq.n	800878a <UART_SetConfig+0x14ea>
 8008746:	2a02      	cmp	r2, #2
 8008748:	d021      	beq.n	800878e <UART_SetConfig+0x14ee>
 800874a:	2a03      	cmp	r2, #3
 800874c:	d021      	beq.n	8008792 <UART_SetConfig+0x14f2>
 800874e:	2a04      	cmp	r2, #4
 8008750:	d021      	beq.n	8008796 <UART_SetConfig+0x14f6>
 8008752:	2a05      	cmp	r2, #5
 8008754:	d021      	beq.n	800879a <UART_SetConfig+0x14fa>
 8008756:	2a06      	cmp	r2, #6
 8008758:	d021      	beq.n	800879e <UART_SetConfig+0x14fe>
 800875a:	2a07      	cmp	r2, #7
 800875c:	d021      	beq.n	80087a2 <UART_SetConfig+0x1502>
 800875e:	2a08      	cmp	r2, #8
 8008760:	d021      	beq.n	80087a6 <UART_SetConfig+0x1506>
 8008762:	2a09      	cmp	r2, #9
 8008764:	d021      	beq.n	80087aa <UART_SetConfig+0x150a>
 8008766:	2a0a      	cmp	r2, #10
 8008768:	d021      	beq.n	80087ae <UART_SetConfig+0x150e>
 800876a:	2a0b      	cmp	r2, #11
 800876c:	d121      	bne.n	80087b2 <UART_SetConfig+0x1512>
 800876e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008772:	e000      	b.n	8008776 <UART_SetConfig+0x14d6>
 8008774:	2201      	movs	r2, #1
 8008776:	fbb3 f3f2 	udiv	r3, r3, r2
 800877a:	6862      	ldr	r2, [r4, #4]
 800877c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008780:	fbb3 f3f2 	udiv	r3, r3, r2
 8008784:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008786:	2000      	movs	r0, #0
 8008788:	e6ab      	b.n	80084e2 <UART_SetConfig+0x1242>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800878a:	2202      	movs	r2, #2
 800878c:	e7f3      	b.n	8008776 <UART_SetConfig+0x14d6>
 800878e:	2204      	movs	r2, #4
 8008790:	e7f1      	b.n	8008776 <UART_SetConfig+0x14d6>
 8008792:	2206      	movs	r2, #6
 8008794:	e7ef      	b.n	8008776 <UART_SetConfig+0x14d6>
 8008796:	2208      	movs	r2, #8
 8008798:	e7ed      	b.n	8008776 <UART_SetConfig+0x14d6>
 800879a:	220a      	movs	r2, #10
 800879c:	e7eb      	b.n	8008776 <UART_SetConfig+0x14d6>
 800879e:	220c      	movs	r2, #12
 80087a0:	e7e9      	b.n	8008776 <UART_SetConfig+0x14d6>
 80087a2:	2210      	movs	r2, #16
 80087a4:	e7e7      	b.n	8008776 <UART_SetConfig+0x14d6>
 80087a6:	2220      	movs	r2, #32
 80087a8:	e7e5      	b.n	8008776 <UART_SetConfig+0x14d6>
 80087aa:	2240      	movs	r2, #64	; 0x40
 80087ac:	e7e3      	b.n	8008776 <UART_SetConfig+0x14d6>
 80087ae:	2280      	movs	r2, #128	; 0x80
 80087b0:	e7e1      	b.n	8008776 <UART_SetConfig+0x14d6>
 80087b2:	2201      	movs	r2, #1
 80087b4:	e7df      	b.n	8008776 <UART_SetConfig+0x14d6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087b8:	b1bb      	cbz	r3, 80087ea <UART_SetConfig+0x154a>
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d01e      	beq.n	80087fc <UART_SetConfig+0x155c>
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d01e      	beq.n	8008800 <UART_SetConfig+0x1560>
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d01e      	beq.n	8008804 <UART_SetConfig+0x1564>
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d01e      	beq.n	8008808 <UART_SetConfig+0x1568>
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d01e      	beq.n	800880c <UART_SetConfig+0x156c>
 80087ce:	2b06      	cmp	r3, #6
 80087d0:	d01e      	beq.n	8008810 <UART_SetConfig+0x1570>
 80087d2:	2b07      	cmp	r3, #7
 80087d4:	d01e      	beq.n	8008814 <UART_SetConfig+0x1574>
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	d01e      	beq.n	8008818 <UART_SetConfig+0x1578>
 80087da:	2b09      	cmp	r3, #9
 80087dc:	d01e      	beq.n	800881c <UART_SetConfig+0x157c>
 80087de:	2b0a      	cmp	r3, #10
 80087e0:	d01e      	beq.n	8008820 <UART_SetConfig+0x1580>
 80087e2:	2b0b      	cmp	r3, #11
 80087e4:	d11e      	bne.n	8008824 <UART_SetConfig+0x1584>
 80087e6:	4b5a      	ldr	r3, [pc, #360]	; (8008950 <UART_SetConfig+0x16b0>)
 80087e8:	e000      	b.n	80087ec <UART_SetConfig+0x154c>
 80087ea:	4b58      	ldr	r3, [pc, #352]	; (800894c <UART_SetConfig+0x16ac>)
 80087ec:	6862      	ldr	r2, [r4, #4]
 80087ee:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80087f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087f6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80087f8:	2000      	movs	r0, #0
 80087fa:	e672      	b.n	80084e2 <UART_SetConfig+0x1242>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087fc:	4b55      	ldr	r3, [pc, #340]	; (8008954 <UART_SetConfig+0x16b4>)
 80087fe:	e7f5      	b.n	80087ec <UART_SetConfig+0x154c>
 8008800:	4b55      	ldr	r3, [pc, #340]	; (8008958 <UART_SetConfig+0x16b8>)
 8008802:	e7f3      	b.n	80087ec <UART_SetConfig+0x154c>
 8008804:	4b55      	ldr	r3, [pc, #340]	; (800895c <UART_SetConfig+0x16bc>)
 8008806:	e7f1      	b.n	80087ec <UART_SetConfig+0x154c>
 8008808:	4b55      	ldr	r3, [pc, #340]	; (8008960 <UART_SetConfig+0x16c0>)
 800880a:	e7ef      	b.n	80087ec <UART_SetConfig+0x154c>
 800880c:	4b55      	ldr	r3, [pc, #340]	; (8008964 <UART_SetConfig+0x16c4>)
 800880e:	e7ed      	b.n	80087ec <UART_SetConfig+0x154c>
 8008810:	4b55      	ldr	r3, [pc, #340]	; (8008968 <UART_SetConfig+0x16c8>)
 8008812:	e7eb      	b.n	80087ec <UART_SetConfig+0x154c>
 8008814:	4b55      	ldr	r3, [pc, #340]	; (800896c <UART_SetConfig+0x16cc>)
 8008816:	e7e9      	b.n	80087ec <UART_SetConfig+0x154c>
 8008818:	4b55      	ldr	r3, [pc, #340]	; (8008970 <UART_SetConfig+0x16d0>)
 800881a:	e7e7      	b.n	80087ec <UART_SetConfig+0x154c>
 800881c:	4b55      	ldr	r3, [pc, #340]	; (8008974 <UART_SetConfig+0x16d4>)
 800881e:	e7e5      	b.n	80087ec <UART_SetConfig+0x154c>
 8008820:	4b55      	ldr	r3, [pc, #340]	; (8008978 <UART_SetConfig+0x16d8>)
 8008822:	e7e3      	b.n	80087ec <UART_SetConfig+0x154c>
 8008824:	4b49      	ldr	r3, [pc, #292]	; (800894c <UART_SetConfig+0x16ac>)
 8008826:	e7e1      	b.n	80087ec <UART_SetConfig+0x154c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800882a:	b1d3      	cbz	r3, 8008862 <UART_SetConfig+0x15c2>
 800882c:	2b01      	cmp	r3, #1
 800882e:	d021      	beq.n	8008874 <UART_SetConfig+0x15d4>
 8008830:	2b02      	cmp	r3, #2
 8008832:	d021      	beq.n	8008878 <UART_SetConfig+0x15d8>
 8008834:	2b03      	cmp	r3, #3
 8008836:	d021      	beq.n	800887c <UART_SetConfig+0x15dc>
 8008838:	2b04      	cmp	r3, #4
 800883a:	d021      	beq.n	8008880 <UART_SetConfig+0x15e0>
 800883c:	2b05      	cmp	r3, #5
 800883e:	d021      	beq.n	8008884 <UART_SetConfig+0x15e4>
 8008840:	2b06      	cmp	r3, #6
 8008842:	d021      	beq.n	8008888 <UART_SetConfig+0x15e8>
 8008844:	2b07      	cmp	r3, #7
 8008846:	d021      	beq.n	800888c <UART_SetConfig+0x15ec>
 8008848:	2b08      	cmp	r3, #8
 800884a:	d021      	beq.n	8008890 <UART_SetConfig+0x15f0>
 800884c:	2b09      	cmp	r3, #9
 800884e:	d021      	beq.n	8008894 <UART_SetConfig+0x15f4>
 8008850:	2b0a      	cmp	r3, #10
 8008852:	d022      	beq.n	800889a <UART_SetConfig+0x15fa>
 8008854:	2b0b      	cmp	r3, #11
 8008856:	d001      	beq.n	800885c <UART_SetConfig+0x15bc>
 8008858:	4b44      	ldr	r3, [pc, #272]	; (800896c <UART_SetConfig+0x16cc>)
 800885a:	e003      	b.n	8008864 <UART_SetConfig+0x15c4>
 800885c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008860:	e000      	b.n	8008864 <UART_SetConfig+0x15c4>
 8008862:	4b42      	ldr	r3, [pc, #264]	; (800896c <UART_SetConfig+0x16cc>)
 8008864:	6862      	ldr	r2, [r4, #4]
 8008866:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800886a:	fbb3 f3f2 	udiv	r3, r3, r2
 800886e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008870:	2000      	movs	r0, #0
        break;
 8008872:	e636      	b.n	80084e2 <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008874:	4b3e      	ldr	r3, [pc, #248]	; (8008970 <UART_SetConfig+0x16d0>)
 8008876:	e7f5      	b.n	8008864 <UART_SetConfig+0x15c4>
 8008878:	4b3e      	ldr	r3, [pc, #248]	; (8008974 <UART_SetConfig+0x16d4>)
 800887a:	e7f3      	b.n	8008864 <UART_SetConfig+0x15c4>
 800887c:	4b3f      	ldr	r3, [pc, #252]	; (800897c <UART_SetConfig+0x16dc>)
 800887e:	e7f1      	b.n	8008864 <UART_SetConfig+0x15c4>
 8008880:	4b3d      	ldr	r3, [pc, #244]	; (8008978 <UART_SetConfig+0x16d8>)
 8008882:	e7ef      	b.n	8008864 <UART_SetConfig+0x15c4>
 8008884:	4b3e      	ldr	r3, [pc, #248]	; (8008980 <UART_SetConfig+0x16e0>)
 8008886:	e7ed      	b.n	8008864 <UART_SetConfig+0x15c4>
 8008888:	4b3e      	ldr	r3, [pc, #248]	; (8008984 <UART_SetConfig+0x16e4>)
 800888a:	e7eb      	b.n	8008864 <UART_SetConfig+0x15c4>
 800888c:	4b30      	ldr	r3, [pc, #192]	; (8008950 <UART_SetConfig+0x16b0>)
 800888e:	e7e9      	b.n	8008864 <UART_SetConfig+0x15c4>
 8008890:	4b3d      	ldr	r3, [pc, #244]	; (8008988 <UART_SetConfig+0x16e8>)
 8008892:	e7e7      	b.n	8008864 <UART_SetConfig+0x15c4>
 8008894:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008898:	e7e4      	b.n	8008864 <UART_SetConfig+0x15c4>
 800889a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800889e:	e7e1      	b.n	8008864 <UART_SetConfig+0x15c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a2:	b1d3      	cbz	r3, 80088da <UART_SetConfig+0x163a>
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d022      	beq.n	80088ee <UART_SetConfig+0x164e>
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d023      	beq.n	80088f4 <UART_SetConfig+0x1654>
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d024      	beq.n	80088fa <UART_SetConfig+0x165a>
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d025      	beq.n	8008900 <UART_SetConfig+0x1660>
 80088b4:	2b05      	cmp	r3, #5
 80088b6:	d026      	beq.n	8008906 <UART_SetConfig+0x1666>
 80088b8:	2b06      	cmp	r3, #6
 80088ba:	d027      	beq.n	800890c <UART_SetConfig+0x166c>
 80088bc:	2b07      	cmp	r3, #7
 80088be:	d028      	beq.n	8008912 <UART_SetConfig+0x1672>
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d029      	beq.n	8008918 <UART_SetConfig+0x1678>
 80088c4:	2b09      	cmp	r3, #9
 80088c6:	d02a      	beq.n	800891e <UART_SetConfig+0x167e>
 80088c8:	2b0a      	cmp	r3, #10
 80088ca:	d02b      	beq.n	8008924 <UART_SetConfig+0x1684>
 80088cc:	2b0b      	cmp	r3, #11
 80088ce:	d002      	beq.n	80088d6 <UART_SetConfig+0x1636>
 80088d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d4:	e003      	b.n	80088de <UART_SetConfig+0x163e>
 80088d6:	2380      	movs	r3, #128	; 0x80
 80088d8:	e001      	b.n	80088de <UART_SetConfig+0x163e>
 80088da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088de:	6862      	ldr	r2, [r4, #4]
 80088e0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80088e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088e8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80088ea:	2000      	movs	r0, #0
        break;
 80088ec:	e5f9      	b.n	80084e2 <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088f2:	e7f4      	b.n	80088de <UART_SetConfig+0x163e>
 80088f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088f8:	e7f1      	b.n	80088de <UART_SetConfig+0x163e>
 80088fa:	f241 5355 	movw	r3, #5461	; 0x1555
 80088fe:	e7ee      	b.n	80088de <UART_SetConfig+0x163e>
 8008900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008904:	e7eb      	b.n	80088de <UART_SetConfig+0x163e>
 8008906:	f640 43cc 	movw	r3, #3276	; 0xccc
 800890a:	e7e8      	b.n	80088de <UART_SetConfig+0x163e>
 800890c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008910:	e7e5      	b.n	80088de <UART_SetConfig+0x163e>
 8008912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008916:	e7e2      	b.n	80088de <UART_SetConfig+0x163e>
 8008918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891c:	e7df      	b.n	80088de <UART_SetConfig+0x163e>
 800891e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008922:	e7dc      	b.n	80088de <UART_SetConfig+0x163e>
 8008924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008928:	e7d9      	b.n	80088de <UART_SetConfig+0x163e>
        ret = HAL_ERROR;
 800892a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800892c:	2300      	movs	r3, #0
 800892e:	e5d8      	b.n	80084e2 <UART_SetConfig+0x1242>
 8008930:	2000      	movs	r0, #0
 8008932:	e5df      	b.n	80084f4 <UART_SetConfig+0x1254>
        ret = HAL_ERROR;
 8008934:	2001      	movs	r0, #1
 8008936:	e5dd      	b.n	80084f4 <UART_SetConfig+0x1254>
 8008938:	2001      	movs	r0, #1
 800893a:	e5db      	b.n	80084f4 <UART_SetConfig+0x1254>
          ret = HAL_ERROR;
 800893c:	2001      	movs	r0, #1
 800893e:	e5d9      	b.n	80084f4 <UART_SetConfig+0x1254>
      ret = HAL_ERROR;
 8008940:	2001      	movs	r0, #1
 8008942:	e5d7      	b.n	80084f4 <UART_SetConfig+0x1254>
      ret = HAL_ERROR;
 8008944:	2001      	movs	r0, #1
 8008946:	e5d5      	b.n	80084f4 <UART_SetConfig+0x1254>
 8008948:	58024400 	.word	0x58024400
 800894c:	03d09000 	.word	0x03d09000
 8008950:	0003d090 	.word	0x0003d090
 8008954:	01e84800 	.word	0x01e84800
 8008958:	00f42400 	.word	0x00f42400
 800895c:	00a2c2aa 	.word	0x00a2c2aa
 8008960:	007a1200 	.word	0x007a1200
 8008964:	0061a800 	.word	0x0061a800
 8008968:	00516155 	.word	0x00516155
 800896c:	003d0900 	.word	0x003d0900
 8008970:	001e8480 	.word	0x001e8480
 8008974:	000f4240 	.word	0x000f4240
 8008978:	0007a120 	.word	0x0007a120
 800897c:	000a2c2a 	.word	0x000a2c2a
 8008980:	00061a80 	.word	0x00061a80
 8008984:	00051615 	.word	0x00051615
 8008988:	0001e848 	.word	0x0001e848

0800898c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800898c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800898e:	f013 0f01 	tst.w	r3, #1
 8008992:	d006      	beq.n	80089a2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008994:	6802      	ldr	r2, [r0, #0]
 8008996:	6853      	ldr	r3, [r2, #4]
 8008998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800899c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800899e:	430b      	orrs	r3, r1
 80089a0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80089a4:	f013 0f02 	tst.w	r3, #2
 80089a8:	d006      	beq.n	80089b8 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089aa:	6802      	ldr	r2, [r0, #0]
 80089ac:	6853      	ldr	r3, [r2, #4]
 80089ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089b2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80089b4:	430b      	orrs	r3, r1
 80089b6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80089ba:	f013 0f04 	tst.w	r3, #4
 80089be:	d006      	beq.n	80089ce <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089c0:	6802      	ldr	r2, [r0, #0]
 80089c2:	6853      	ldr	r3, [r2, #4]
 80089c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089c8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80089ca:	430b      	orrs	r3, r1
 80089cc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80089d0:	f013 0f08 	tst.w	r3, #8
 80089d4:	d006      	beq.n	80089e4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089d6:	6802      	ldr	r2, [r0, #0]
 80089d8:	6853      	ldr	r3, [r2, #4]
 80089da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089de:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80089e0:	430b      	orrs	r3, r1
 80089e2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80089e6:	f013 0f10 	tst.w	r3, #16
 80089ea:	d006      	beq.n	80089fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089ec:	6802      	ldr	r2, [r0, #0]
 80089ee:	6893      	ldr	r3, [r2, #8]
 80089f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80089f6:	430b      	orrs	r3, r1
 80089f8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80089fc:	f013 0f20 	tst.w	r3, #32
 8008a00:	d006      	beq.n	8008a10 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a02:	6802      	ldr	r2, [r0, #0]
 8008a04:	6893      	ldr	r3, [r2, #8]
 8008a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a0a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008a12:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a16:	d00a      	beq.n	8008a2e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a18:	6802      	ldr	r2, [r0, #0]
 8008a1a:	6853      	ldr	r3, [r2, #4]
 8008a1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a20:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008a22:	430b      	orrs	r3, r1
 8008a24:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a26:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a2c:	d00b      	beq.n	8008a46 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008a30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a34:	d006      	beq.n	8008a44 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a36:	6802      	ldr	r2, [r0, #0]
 8008a38:	6853      	ldr	r3, [r2, #4]
 8008a3a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008a3e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008a40:	430b      	orrs	r3, r1
 8008a42:	6053      	str	r3, [r2, #4]
  }
}
 8008a44:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a46:	6802      	ldr	r2, [r0, #0]
 8008a48:	6853      	ldr	r3, [r2, #4]
 8008a4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008a4e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008a50:	430b      	orrs	r3, r1
 8008a52:	6053      	str	r3, [r2, #4]
 8008a54:	e7eb      	b.n	8008a2e <UART_AdvFeatureConfig+0xa2>

08008a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	460f      	mov	r7, r1
 8008a5e:	4616      	mov	r6, r2
 8008a60:	4698      	mov	r8, r3
 8008a62:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	ea37 0303 	bics.w	r3, r7, r3
 8008a6c:	bf0c      	ite	eq
 8008a6e:	2301      	moveq	r3, #1
 8008a70:	2300      	movne	r3, #0
 8008a72:	42b3      	cmp	r3, r6
 8008a74:	d13f      	bne.n	8008af6 <UART_WaitOnFlagUntilTimeout+0xa0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a76:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008a7a:	d0f3      	beq.n	8008a64 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7c:	f7f7 fe0c 	bl	8000698 <HAL_GetTick>
 8008a80:	eba0 0008 	sub.w	r0, r0, r8
 8008a84:	42a8      	cmp	r0, r5
 8008a86:	d822      	bhi.n	8008ace <UART_WaitOnFlagUntilTimeout+0x78>
 8008a88:	b30d      	cbz	r5, 8008ace <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	f012 0f04 	tst.w	r2, #4
 8008a92:	d0e7      	beq.n	8008a64 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008a9a:	d0e3      	beq.n	8008a64 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008aa0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008aa2:	6822      	ldr	r2, [r4, #0]
 8008aa4:	6813      	ldr	r3, [r2, #0]
 8008aa6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008aaa:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	6893      	ldr	r3, [r2, #8]
 8008ab0:	f023 0301 	bic.w	r3, r3, #1
 8008ab4:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008ab6:	2320      	movs	r3, #32
 8008ab8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008abc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ac0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008aca:	2003      	movs	r0, #3
 8008acc:	e014      	b.n	8008af8 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	6813      	ldr	r3, [r2, #0]
 8008ad2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ad6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad8:	6822      	ldr	r2, [r4, #0]
 8008ada:	6893      	ldr	r3, [r2, #8]
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008ae2:	2320      	movs	r3, #32
 8008ae4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008ae8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8008aec:	2300      	movs	r3, #0
 8008aee:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 8008af2:	2003      	movs	r0, #3
 8008af4:	e000      	b.n	8008af8 <UART_WaitOnFlagUntilTimeout+0xa2>
        }
      }
    }
  }
  return HAL_OK;
 8008af6:	2000      	movs	r0, #0
}
 8008af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008afc <UART_CheckIdleState>:
{
 8008afc:	b530      	push	{r4, r5, lr}
 8008afe:	b083      	sub	sp, #12
 8008b00:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b02:	2300      	movs	r3, #0
 8008b04:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8008b08:	f7f7 fdc6 	bl	8000698 <HAL_GetTick>
 8008b0c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f013 0f08 	tst.w	r3, #8
 8008b16:	d10e      	bne.n	8008b36 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f013 0f04 	tst.w	r3, #4
 8008b20:	d117      	bne.n	8008b52 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8008b22:	2320      	movs	r3, #32
 8008b24:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008b28:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8008b32:	b003      	add	sp, #12
 8008b34:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b44:	4620      	mov	r0, r4
 8008b46:	f7ff ff86 	bl	8008a56 <UART_WaitOnFlagUntilTimeout>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d0e4      	beq.n	8008b18 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008b4e:	2003      	movs	r0, #3
 8008b50:	e7ef      	b.n	8008b32 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	462b      	mov	r3, r5
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b60:	4620      	mov	r0, r4
 8008b62:	f7ff ff78 	bl	8008a56 <UART_WaitOnFlagUntilTimeout>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d0db      	beq.n	8008b22 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008b6a:	2003      	movs	r0, #3
 8008b6c:	e7e1      	b.n	8008b32 <UART_CheckIdleState+0x36>

08008b6e <HAL_UART_Init>:
  if (huart == NULL)
 8008b6e:	b378      	cbz	r0, 8008bd0 <HAL_UART_Init+0x62>
{
 8008b70:	b510      	push	{r4, lr}
 8008b72:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008b74:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8008b78:	b30b      	cbz	r3, 8008bbe <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008b7a:	2324      	movs	r3, #36	; 0x24
 8008b7c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8008b80:	6822      	ldr	r2, [r4, #0]
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f7fe fb88 	bl	80072a0 <UART_SetConfig>
 8008b90:	2801      	cmp	r0, #1
 8008b92:	d013      	beq.n	8008bbc <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b96:	b9bb      	cbnz	r3, 8008bc8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b98:	6822      	ldr	r2, [r4, #0]
 8008b9a:	6853      	ldr	r3, [r2, #4]
 8008b9c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008ba0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ba2:	6822      	ldr	r2, [r4, #0]
 8008ba4:	6893      	ldr	r3, [r2, #8]
 8008ba6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008baa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008bac:	6822      	ldr	r2, [r4, #0]
 8008bae:	6813      	ldr	r3, [r2, #0]
 8008bb0:	f043 0301 	orr.w	r3, r3, #1
 8008bb4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f7ff ffa0 	bl	8008afc <UART_CheckIdleState>
}
 8008bbc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008bbe:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8008bc2:	f002 fc91 	bl	800b4e8 <HAL_UART_MspInit>
 8008bc6:	e7d8      	b.n	8008b7a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f7ff fedf 	bl	800898c <UART_AdvFeatureConfig>
 8008bce:	e7e3      	b.n	8008b98 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008bd0:	2001      	movs	r0, #1
}
 8008bd2:	4770      	bx	lr

08008bd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bd4:	b410      	push	{r4}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008bda:	4b1a      	ldr	r3, [pc, #104]	; (8008c44 <UARTEx_SetNbDataToProcess+0x70>)
 8008bdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008be0:	ac04      	add	r4, sp, #16
 8008be2:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008be6:	466c      	mov	r4, sp
 8008be8:	3308      	adds	r3, #8
 8008bea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008bee:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bf2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008bf4:	b1fb      	cbz	r3, 8008c36 <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bf6:	6811      	ldr	r1, [r2, #0]
 8008bf8:	688b      	ldr	r3, [r1, #8]
 8008bfa:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bfe:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008c00:	a904      	add	r1, sp, #16
 8008c02:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 8008c06:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 8008c0a:	00c9      	lsls	r1, r1, #3
 8008c0c:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8008c10:	fb91 f1f0 	sdiv	r1, r1, r0
 8008c14:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008c18:	a904      	add	r1, sp, #16
 8008c1a:	440b      	add	r3, r1
 8008c1c:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8008c20:	00c9      	lsls	r1, r1, #3
 8008c22:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8008c26:	fb91 f3f3 	sdiv	r3, r1, r3
 8008c2a:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 8008c2e:	b005      	add	sp, #20
 8008c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c34:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 8008c36:	2301      	movs	r3, #1
 8008c38:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c3c:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 8008c40:	e7f5      	b.n	8008c2e <UARTEx_SetNbDataToProcess+0x5a>
 8008c42:	bf00      	nop
 8008c44:	0800d0b0 	.word	0x0800d0b0

08008c48 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8008c48:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d018      	beq.n	8008c82 <HAL_UARTEx_DisableFifoMode+0x3a>
 8008c50:	2301      	movs	r3, #1
 8008c52:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8008c56:	2324      	movs	r3, #36	; 0x24
 8008c58:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c5c:	6803      	ldr	r3, [r0, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008c60:	6819      	ldr	r1, [r3, #0]
 8008c62:	f021 0101 	bic.w	r1, r1, #1
 8008c66:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c68:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c70:	6801      	ldr	r1, [r0, #0]
 8008c72:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008c74:	2220      	movs	r2, #32
 8008c76:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008c7a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8008c7e:	4618      	mov	r0, r3
 8008c80:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008c82:	2002      	movs	r0, #2
}
 8008c84:	4770      	bx	lr

08008c86 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008c86:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008c88:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d01d      	beq.n	8008ccc <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008c90:	4604      	mov	r4, r0
 8008c92:	2301      	movs	r3, #1
 8008c94:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8008c98:	2324      	movs	r3, #36	; 0x24
 8008c9a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c9e:	6803      	ldr	r3, [r0, #0]
 8008ca0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	f022 0201 	bic.w	r2, r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008caa:	6802      	ldr	r2, [r0, #0]
 8008cac:	6893      	ldr	r3, [r2, #8]
 8008cae:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008cb2:	4319      	orrs	r1, r3
 8008cb4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008cb6:	f7ff ff8d 	bl	8008bd4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008cbe:	2320      	movs	r3, #32
 8008cc0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008ccc:	2002      	movs	r0, #2
 8008cce:	e7fc      	b.n	8008cca <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008cd0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008cd0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008cd2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d01d      	beq.n	8008d16 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8008ce2:	2324      	movs	r3, #36	; 0x24
 8008ce4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ce8:	6803      	ldr	r3, [r0, #0]
 8008cea:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	f022 0201 	bic.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cf4:	6802      	ldr	r2, [r0, #0]
 8008cf6:	6893      	ldr	r3, [r2, #8]
 8008cf8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008cfc:	4319      	orrs	r1, r3
 8008cfe:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008d00:	f7ff ff68 	bl	8008bd4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008d08:	2320      	movs	r3, #32
 8008d0a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008d0e:	2000      	movs	r0, #0
 8008d10:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8008d14:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008d16:	2002      	movs	r0, #2
 8008d18:	e7fc      	b.n	8008d14 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008d1c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008d1c:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008d1e:	680b      	ldr	r3, [r1, #0]
 8008d20:	b1eb      	cbz	r3, 8008d5e <FMC_SDRAM_Init+0x42>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008d22:	6803      	ldr	r3, [r0, #0]
 8008d24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d28:	69ca      	ldr	r2, [r1, #28]
 8008d2a:	6a0c      	ldr	r4, [r1, #32]
 8008d2c:	4322      	orrs	r2, r4
 8008d2e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008d30:	4322      	orrs	r2, r4
 8008d32:	4313      	orrs	r3, r2
 8008d34:	6003      	str	r3, [r0, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008d36:	6843      	ldr	r3, [r0, #4]
 8008d38:	4a14      	ldr	r2, [pc, #80]	; (8008d8c <FMC_SDRAM_Init+0x70>)
 8008d3a:	401a      	ands	r2, r3
 8008d3c:	684b      	ldr	r3, [r1, #4]
 8008d3e:	688c      	ldr	r4, [r1, #8]
 8008d40:	4323      	orrs	r3, r4
 8008d42:	68cc      	ldr	r4, [r1, #12]
 8008d44:	4323      	orrs	r3, r4
 8008d46:	690c      	ldr	r4, [r1, #16]
 8008d48:	4323      	orrs	r3, r4
 8008d4a:	694c      	ldr	r4, [r1, #20]
 8008d4c:	4323      	orrs	r3, r4
 8008d4e:	6989      	ldr	r1, [r1, #24]
 8008d50:	430b      	orrs	r3, r1
 8008d52:	4313      	orrs	r3, r2
 8008d54:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8008d56:	2000      	movs	r0, #0
 8008d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d5c:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008d5e:	6803      	ldr	r3, [r0, #0]
 8008d60:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <FMC_SDRAM_Init+0x70>)
 8008d62:	401a      	ands	r2, r3
 8008d64:	684b      	ldr	r3, [r1, #4]
 8008d66:	688c      	ldr	r4, [r1, #8]
 8008d68:	4323      	orrs	r3, r4
 8008d6a:	68cc      	ldr	r4, [r1, #12]
 8008d6c:	4323      	orrs	r3, r4
 8008d6e:	690c      	ldr	r4, [r1, #16]
 8008d70:	4323      	orrs	r3, r4
 8008d72:	694c      	ldr	r4, [r1, #20]
 8008d74:	4323      	orrs	r3, r4
 8008d76:	698c      	ldr	r4, [r1, #24]
 8008d78:	4323      	orrs	r3, r4
 8008d7a:	69cc      	ldr	r4, [r1, #28]
 8008d7c:	4323      	orrs	r3, r4
 8008d7e:	6a0c      	ldr	r4, [r1, #32]
 8008d80:	4323      	orrs	r3, r4
 8008d82:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8008d84:	430b      	orrs	r3, r1
 8008d86:	4313      	orrs	r3, r2
 8008d88:	6003      	str	r3, [r0, #0]
 8008d8a:	e7e4      	b.n	8008d56 <FMC_SDRAM_Init+0x3a>
 8008d8c:	ffff8000 	.word	0xffff8000

08008d90 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008d90:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008d92:	b332      	cbz	r2, 8008de2 <FMC_SDRAM_Timing_Init+0x52>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008d94:	6883      	ldr	r3, [r0, #8]
 8008d96:	4a23      	ldr	r2, [pc, #140]	; (8008e24 <FMC_SDRAM_Timing_Init+0x94>)
 8008d98:	401a      	ands	r2, r3
 8008d9a:	68cb      	ldr	r3, [r1, #12]
 8008d9c:	1e5c      	subs	r4, r3, #1
 8008d9e:	694b      	ldr	r3, [r1, #20]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	051b      	lsls	r3, r3, #20
 8008da4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8008da8:	4313      	orrs	r3, r2
 8008daa:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008dac:	68c2      	ldr	r2, [r0, #12]
 8008dae:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008db2:	680b      	ldr	r3, [r1, #0]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	684c      	ldr	r4, [r1, #4]
 8008db8:	3c01      	subs	r4, #1
 8008dba:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008dbe:	688c      	ldr	r4, [r1, #8]
 8008dc0:	3c01      	subs	r4, #1
 8008dc2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8008dc6:	690c      	ldr	r4, [r1, #16]
 8008dc8:	3c01      	subs	r4, #1
 8008dca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008dce:	6989      	ldr	r1, [r1, #24]
 8008dd0:	3901      	subs	r1, #1
 8008dd2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008de0:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008de2:	6882      	ldr	r2, [r0, #8]
 8008de4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008de8:	680b      	ldr	r3, [r1, #0]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	684c      	ldr	r4, [r1, #4]
 8008dee:	3c01      	subs	r4, #1
 8008df0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008df4:	688c      	ldr	r4, [r1, #8]
 8008df6:	3c01      	subs	r4, #1
 8008df8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8008dfc:	68cc      	ldr	r4, [r1, #12]
 8008dfe:	3c01      	subs	r4, #1
 8008e00:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8008e04:	690c      	ldr	r4, [r1, #16]
 8008e06:	3c01      	subs	r4, #1
 8008e08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e0c:	694c      	ldr	r4, [r1, #20]
 8008e0e:	3c01      	subs	r4, #1
 8008e10:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8008e14:	6989      	ldr	r1, [r1, #24]
 8008e16:	3901      	subs	r1, #1
 8008e18:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	6083      	str	r3, [r0, #8]
 8008e20:	e7db      	b.n	8008dda <FMC_SDRAM_Timing_Init+0x4a>
 8008e22:	bf00      	nop
 8008e24:	ff0f0fff 	.word	0xff0f0fff

08008e28 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008e28:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8008e2a:	6902      	ldr	r2, [r0, #16]
 8008e2c:	680b      	ldr	r3, [r1, #0]
 8008e2e:	684c      	ldr	r4, [r1, #4]
 8008e30:	4323      	orrs	r3, r4
 8008e32:	688c      	ldr	r4, [r1, #8]
 8008e34:	3c01      	subs	r4, #1
 8008e36:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8008e3a:	68c9      	ldr	r1, [r1, #12]
 8008e3c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8008e40:	4313      	orrs	r3, r2
 8008e42:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8008e44:	2000      	movs	r0, #0
 8008e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008e4c:	6942      	ldr	r2, [r0, #20]
 8008e4e:	4b03      	ldr	r3, [pc, #12]	; (8008e5c <FMC_SDRAM_ProgramRefreshRate+0x10>)
 8008e50:	4013      	ands	r3, r2
 8008e52:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8008e56:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8008e58:	2000      	movs	r0, #0
 8008e5a:	4770      	bx	lr
 8008e5c:	ffffc001 	.word	0xffffc001

08008e60 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <SDMMC_GetCmdError+0x30>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a0b      	ldr	r2, [pc, #44]	; (8008e94 <SDMMC_GetCmdError+0x34>)
 8008e66:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6a:	0a5a      	lsrs	r2, r3, #9
 8008e6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e70:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8008e74:	1e5a      	subs	r2, r3, #1
 8008e76:	b143      	cbz	r3, 8008e8a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008e78:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8008e7a:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008e7c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008e80:	d0f8      	beq.n	8008e74 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e82:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <SDMMC_GetCmdError+0x38>)
 8008e84:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008e86:	2000      	movs	r0, #0
 8008e88:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008e8a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008e8e:	4770      	bx	lr
 8008e90:	20000014 	.word	0x20000014
 8008e94:	10624dd3 	.word	0x10624dd3
 8008e98:	002000c5 	.word	0x002000c5

08008e9c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e9c:	4b15      	ldr	r3, [pc, #84]	; (8008ef4 <SDMMC_GetCmdResp2+0x58>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a15      	ldr	r2, [pc, #84]	; (8008ef8 <SDMMC_GetCmdResp2+0x5c>)
 8008ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea6:	0a5a      	lsrs	r2, r3, #9
 8008ea8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008eac:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8008eb0:	1e5a      	subs	r2, r3, #1
 8008eb2:	b1db      	cbz	r3, 8008eec <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8008eb4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008eb6:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008eb8:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008ebc:	d0f8      	beq.n	8008eb0 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ebe:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8008ec2:	d1f5      	bne.n	8008eb0 <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ec4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008ec6:	f013 0f04 	tst.w	r3, #4
 8008eca:	d107      	bne.n	8008edc <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ecc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008ece:	f013 0f01 	tst.w	r3, #1
 8008ed2:	d107      	bne.n	8008ee4 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ed4:	4b09      	ldr	r3, [pc, #36]	; (8008efc <SDMMC_GetCmdResp2+0x60>)
 8008ed6:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008ed8:	2000      	movs	r0, #0
 8008eda:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008edc:	2304      	movs	r3, #4
 8008ede:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ee8:	4618      	mov	r0, r3
 8008eea:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008eec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20000014 	.word	0x20000014
 8008ef8:	10624dd3 	.word	0x10624dd3
 8008efc:	002000c5 	.word	0x002000c5

08008f00 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f00:	4b11      	ldr	r3, [pc, #68]	; (8008f48 <SDMMC_GetCmdResp3+0x48>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a11      	ldr	r2, [pc, #68]	; (8008f4c <SDMMC_GetCmdResp3+0x4c>)
 8008f06:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0a:	0a5a      	lsrs	r2, r3, #9
 8008f0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f10:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8008f14:	1e5a      	subs	r2, r3, #1
 8008f16:	b19b      	cbz	r3, 8008f40 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8008f18:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008f1a:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008f1c:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008f20:	d0f8      	beq.n	8008f14 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f22:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8008f26:	d1f5      	bne.n	8008f14 <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008f28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f2a:	f013 0f04 	tst.w	r3, #4
 8008f2e:	d103      	bne.n	8008f38 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f30:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <SDMMC_GetCmdResp3+0x50>)
 8008f32:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008f34:	2000      	movs	r0, #0
 8008f36:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008f38:	2304      	movs	r3, #4
 8008f3a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008f40:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	20000014 	.word	0x20000014
 8008f4c:	10624dd3 	.word	0x10624dd3
 8008f50:	002000c5 	.word	0x002000c5

08008f54 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f54:	4b18      	ldr	r3, [pc, #96]	; (8008fb8 <SDMMC_GetCmdResp7+0x64>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a18      	ldr	r2, [pc, #96]	; (8008fbc <SDMMC_GetCmdResp7+0x68>)
 8008f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5e:	0a5a      	lsrs	r2, r3, #9
 8008f60:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f64:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8008f68:	1e5a      	subs	r2, r3, #1
 8008f6a:	b1fb      	cbz	r3, 8008fac <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8008f6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008f6e:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008f70:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008f74:	d0f8      	beq.n	8008f68 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f76:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8008f7a:	d1f5      	bne.n	8008f68 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008f7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f7e:	f013 0f04 	tst.w	r3, #4
 8008f82:	d10b      	bne.n	8008f9c <SDMMC_GetCmdResp7+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008f84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f86:	f013 0f01 	tst.w	r3, #1
 8008f8a:	d10b      	bne.n	8008fa4 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008f8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008f92:	d00e      	beq.n	8008fb2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008f94:	2340      	movs	r3, #64	; 0x40
 8008f96:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008f98:	2000      	movs	r0, #0
 8008f9a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008f9c:	2304      	movs	r3, #4
 8008f9e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fa8:	4618      	mov	r0, r3
 8008faa:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008fac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008fb0:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8008fb2:	2000      	movs	r0, #0

}
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20000014 	.word	0x20000014
 8008fbc:	10624dd3 	.word	0x10624dd3

08008fc0 <SDMMC_Init>:
{
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	b410      	push	{r4}
 8008fc4:	ac02      	add	r4, sp, #8
 8008fc6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8008fca:	460b      	mov	r3, r1
 8008fcc:	9a03      	ldr	r2, [sp, #12]
 8008fce:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8008fd0:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8008fd2:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8008fd4:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8008fd6:	4313      	orrs	r3, r2
             Init.ClockDiv
 8008fd8:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8008fda:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008fdc:	6841      	ldr	r1, [r0, #4]
 8008fde:	4a04      	ldr	r2, [pc, #16]	; (8008ff0 <SDMMC_Init+0x30>)
 8008fe0:	400a      	ands	r2, r1
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	6043      	str	r3, [r0, #4]
}
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fec:	b004      	add	sp, #16
 8008fee:	4770      	bx	lr
 8008ff0:	ffc02c00 	.word	0xffc02c00

08008ff4 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8008ff4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8008ff8:	4770      	bx	lr

08008ffa <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8008ffa:	680b      	ldr	r3, [r1, #0]
 8008ffc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8009000:	2000      	movs	r0, #0
 8009002:	4770      	bx	lr

08009004 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009004:	6803      	ldr	r3, [r0, #0]
 8009006:	f043 0303 	orr.w	r3, r3, #3
 800900a:	6003      	str	r3, [r0, #0]
}
 800900c:	2000      	movs	r0, #0
 800900e:	4770      	bx	lr

08009010 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009010:	6800      	ldr	r0, [r0, #0]
}
 8009012:	f000 0003 	and.w	r0, r0, #3
 8009016:	4770      	bx	lr

08009018 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8009018:	680b      	ldr	r3, [r1, #0]
 800901a:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800901c:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800901e:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009020:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8009022:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8009024:	4313      	orrs	r3, r2
                       Command->CPSM);
 8009026:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8009028:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800902a:	68c1      	ldr	r1, [r0, #12]
 800902c:	4a02      	ldr	r2, [pc, #8]	; (8009038 <SDMMC_SendCommand+0x20>)
 800902e:	400a      	ands	r2, r1
 8009030:	4313      	orrs	r3, r2
 8009032:	60c3      	str	r3, [r0, #12]
}
 8009034:	2000      	movs	r0, #0
 8009036:	4770      	bx	lr
 8009038:	fffee0c0 	.word	0xfffee0c0

0800903c <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800903c:	6900      	ldr	r0, [r0, #16]
}
 800903e:	b2c0      	uxtb	r0, r0
 8009040:	4770      	bx	lr

08009042 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009042:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8009044:	5840      	ldr	r0, [r0, r1]
}
 8009046:	4770      	bx	lr

08009048 <SDMMC_GetCmdResp1>:
{
 8009048:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800904a:	4b53      	ldr	r3, [pc, #332]	; (8009198 <SDMMC_GetCmdResp1+0x150>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4c53      	ldr	r4, [pc, #332]	; (800919c <SDMMC_GetCmdResp1+0x154>)
 8009050:	fba4 4303 	umull	r4, r3, r4, r3
 8009054:	0a5b      	lsrs	r3, r3, #9
 8009056:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 800905a:	1e54      	subs	r4, r2, #1
 800905c:	2a00      	cmp	r2, #0
 800905e:	d061      	beq.n	8009124 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 8009060:	6b45      	ldr	r5, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009062:	4b4f      	ldr	r3, [pc, #316]	; (80091a0 <SDMMC_GetCmdResp1+0x158>)
 8009064:	402b      	ands	r3, r5
 8009066:	4622      	mov	r2, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0f6      	beq.n	800905a <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800906c:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8009070:	d1f3      	bne.n	800905a <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009072:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009074:	f013 0f04 	tst.w	r3, #4
 8009078:	d107      	bne.n	800908a <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800907a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800907c:	f013 0f01 	tst.w	r3, #1
 8009080:	d007      	beq.n	8009092 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009082:	2301      	movs	r3, #1
 8009084:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009086:	4618      	mov	r0, r3
 8009088:	e04e      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800908a:	2304      	movs	r3, #4
 800908c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800908e:	4618      	mov	r0, r3
 8009090:	e04a      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
 8009092:	460d      	mov	r5, r1
 8009094:	4604      	mov	r4, r0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009096:	4b43      	ldr	r3, [pc, #268]	; (80091a4 <SDMMC_GetCmdResp1+0x15c>)
 8009098:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800909a:	f7ff ffcf 	bl	800903c <SDMMC_GetCommandResponse>
 800909e:	42a8      	cmp	r0, r5
 80090a0:	d001      	beq.n	80090a6 <SDMMC_GetCmdResp1+0x5e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090a2:	2001      	movs	r0, #1
 80090a4:	e040      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80090a6:	2100      	movs	r1, #0
 80090a8:	4620      	mov	r0, r4
 80090aa:	f7ff ffca 	bl	8009042 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80090ae:	4b3e      	ldr	r3, [pc, #248]	; (80091a8 <SDMMC_GetCmdResp1+0x160>)
 80090b0:	4003      	ands	r3, r0
 80090b2:	b3d3      	cbz	r3, 800912a <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80090b4:	2800      	cmp	r0, #0
 80090b6:	db3a      	blt.n	800912e <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80090b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090bc:	d13a      	bne.n	8009134 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80090be:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80090c2:	d139      	bne.n	8009138 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80090c4:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 80090c8:	d138      	bne.n	800913c <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80090ca:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80090ce:	d138      	bne.n	8009142 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80090d0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80090d4:	d138      	bne.n	8009148 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80090d6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80090da:	d138      	bne.n	800914e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80090dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80090e0:	d138      	bne.n	8009154 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80090e2:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80090e6:	d138      	bne.n	800915a <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80090e8:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80090ec:	d138      	bne.n	8009160 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80090ee:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80090f2:	d138      	bne.n	8009166 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090f4:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80090f8:	d138      	bne.n	800916c <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090fa:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80090fe:	d138      	bne.n	8009172 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009100:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8009104:	d138      	bne.n	8009178 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009106:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800910a:	d138      	bne.n	800917e <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800910c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8009110:	d138      	bne.n	8009184 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009112:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8009116:	d138      	bne.n	800918a <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009118:	f010 0f08 	tst.w	r0, #8
 800911c:	d038      	beq.n	8009190 <SDMMC_GetCmdResp1+0x148>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800911e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009122:	e001      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 8009124:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009128:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 800912a:	2000      	movs	r0, #0
 800912c:	e7fc      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800912e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8009132:	e7f9      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009134:	2040      	movs	r0, #64	; 0x40
 8009136:	e7f7      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009138:	2080      	movs	r0, #128	; 0x80
 800913a:	e7f5      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800913c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009140:	e7f2      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009142:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009146:	e7ef      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009148:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800914c:	e7ec      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800914e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009152:	e7e9      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009154:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009158:	e7e6      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800915a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800915e:	e7e3      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009160:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009164:	e7e0      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 8009166:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800916a:	e7dd      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800916c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009170:	e7da      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009172:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009176:	e7d7      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009178:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800917c:	e7d4      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800917e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009182:	e7d1      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009184:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009188:	e7ce      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800918a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800918e:	e7cb      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009190:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009194:	e7c8      	b.n	8009128 <SDMMC_GetCmdResp1+0xe0>
 8009196:	bf00      	nop
 8009198:	20000014 	.word	0x20000014
 800919c:	10624dd3 	.word	0x10624dd3
 80091a0:	00200045 	.word	0x00200045
 80091a4:	002000c5 	.word	0x002000c5
 80091a8:	fdffe008 	.word	0xfdffe008

080091ac <SDMMC_GetCmdResp6>:
{
 80091ac:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091ae:	4b26      	ldr	r3, [pc, #152]	; (8009248 <SDMMC_GetCmdResp6+0x9c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4c26      	ldr	r4, [pc, #152]	; (800924c <SDMMC_GetCmdResp6+0xa0>)
 80091b4:	fba4 4303 	umull	r4, r3, r4, r3
 80091b8:	0a5c      	lsrs	r4, r3, #9
 80091ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80091be:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 80091c2:	1e5c      	subs	r4, r3, #1
 80091c4:	b3b3      	cbz	r3, 8009234 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDMMCx->STA;
 80091c6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80091c8:	4623      	mov	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80091ca:	f015 0f45 	tst.w	r5, #69	; 0x45
 80091ce:	d0f8      	beq.n	80091c2 <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091d0:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 80091d4:	d1f5      	bne.n	80091c2 <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80091d8:	f013 0f04 	tst.w	r3, #4
 80091dc:	d107      	bne.n	80091ee <SDMMC_GetCmdResp6+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80091e0:	f013 0f01 	tst.w	r3, #1
 80091e4:	d007      	beq.n	80091f6 <SDMMC_GetCmdResp6+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091e6:	2301      	movs	r3, #1
 80091e8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091ea:	4618      	mov	r0, r3
 80091ec:	e024      	b.n	8009238 <SDMMC_GetCmdResp6+0x8c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091ee:	2304      	movs	r3, #4
 80091f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091f2:	4618      	mov	r0, r3
 80091f4:	e020      	b.n	8009238 <SDMMC_GetCmdResp6+0x8c>
 80091f6:	4616      	mov	r6, r2
 80091f8:	460d      	mov	r5, r1
 80091fa:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80091fc:	f7ff ff1e 	bl	800903c <SDMMC_GetCommandResponse>
 8009200:	42a8      	cmp	r0, r5
 8009202:	d001      	beq.n	8009208 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009204:	2001      	movs	r0, #1
 8009206:	e017      	b.n	8009238 <SDMMC_GetCmdResp6+0x8c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009208:	4b11      	ldr	r3, [pc, #68]	; (8009250 <SDMMC_GetCmdResp6+0xa4>)
 800920a:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800920c:	2100      	movs	r1, #0
 800920e:	4620      	mov	r0, r4
 8009210:	f7ff ff17 	bl	8009042 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009214:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8009218:	d008      	beq.n	800922c <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800921a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800921e:	d10c      	bne.n	800923a <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009220:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8009224:	d00c      	beq.n	8009240 <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009226:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800922a:	e005      	b.n	8009238 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800922c:	0c00      	lsrs	r0, r0, #16
 800922e:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8009230:	2000      	movs	r0, #0
 8009232:	e001      	b.n	8009238 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8009234:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009238:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800923a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800923e:	e7fb      	b.n	8009238 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009240:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009244:	e7f8      	b.n	8009238 <SDMMC_GetCmdResp6+0x8c>
 8009246:	bf00      	nop
 8009248:	20000014 	.word	0x20000014
 800924c:	10624dd3 	.word	0x10624dd3
 8009250:	002000c5 	.word	0x002000c5

08009254 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009254:	680b      	ldr	r3, [r1, #0]
 8009256:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8009258:	684b      	ldr	r3, [r1, #4]
 800925a:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800925c:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800925e:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009260:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8009262:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8009264:	4313      	orrs	r3, r2
                       Data->DPSM);
 8009266:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8009268:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800926a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800926c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009270:	4313      	orrs	r3, r2
 8009272:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8009274:	2000      	movs	r0, #0
 8009276:	4770      	bx	lr

08009278 <SDMMC_CmdBlockLength>:
{
 8009278:	b530      	push	{r4, r5, lr}
 800927a:	b087      	sub	sp, #28
 800927c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800927e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009280:	2410      	movs	r4, #16
 8009282:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009288:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800928a:	2300      	movs	r3, #0
 800928c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800928e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009292:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009294:	a901      	add	r1, sp, #4
 8009296:	f7ff febf 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800929a:	f241 3288 	movw	r2, #5000	; 0x1388
 800929e:	4621      	mov	r1, r4
 80092a0:	4628      	mov	r0, r5
 80092a2:	f7ff fed1 	bl	8009048 <SDMMC_GetCmdResp1>
}
 80092a6:	b007      	add	sp, #28
 80092a8:	bd30      	pop	{r4, r5, pc}

080092aa <SDMMC_CmdReadSingleBlock>:
{
 80092aa:	b530      	push	{r4, r5, lr}
 80092ac:	b087      	sub	sp, #28
 80092ae:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80092b0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80092b2:	2411      	movs	r4, #17
 80092b4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092bc:	2300      	movs	r3, #0
 80092be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092c4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092c6:	a901      	add	r1, sp, #4
 80092c8:	f7ff fea6 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80092cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d0:	4621      	mov	r1, r4
 80092d2:	4628      	mov	r0, r5
 80092d4:	f7ff feb8 	bl	8009048 <SDMMC_GetCmdResp1>
}
 80092d8:	b007      	add	sp, #28
 80092da:	bd30      	pop	{r4, r5, pc}

080092dc <SDMMC_CmdReadMultiBlock>:
{
 80092dc:	b530      	push	{r4, r5, lr}
 80092de:	b087      	sub	sp, #28
 80092e0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80092e2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80092e4:	2412      	movs	r4, #18
 80092e6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092ec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092ee:	2300      	movs	r3, #0
 80092f0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092f6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092f8:	a901      	add	r1, sp, #4
 80092fa:	f7ff fe8d 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80092fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009302:	4621      	mov	r1, r4
 8009304:	4628      	mov	r0, r5
 8009306:	f7ff fe9f 	bl	8009048 <SDMMC_GetCmdResp1>
}
 800930a:	b007      	add	sp, #28
 800930c:	bd30      	pop	{r4, r5, pc}

0800930e <SDMMC_CmdWriteSingleBlock>:
{
 800930e:	b530      	push	{r4, r5, lr}
 8009310:	b087      	sub	sp, #28
 8009312:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009314:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009316:	2418      	movs	r4, #24
 8009318:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800931a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800931e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009320:	2300      	movs	r3, #0
 8009322:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009328:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800932a:	a901      	add	r1, sp, #4
 800932c:	f7ff fe74 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009330:	f241 3288 	movw	r2, #5000	; 0x1388
 8009334:	4621      	mov	r1, r4
 8009336:	4628      	mov	r0, r5
 8009338:	f7ff fe86 	bl	8009048 <SDMMC_GetCmdResp1>
}
 800933c:	b007      	add	sp, #28
 800933e:	bd30      	pop	{r4, r5, pc}

08009340 <SDMMC_CmdWriteMultiBlock>:
{
 8009340:	b530      	push	{r4, r5, lr}
 8009342:	b087      	sub	sp, #28
 8009344:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009346:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009348:	2419      	movs	r4, #25
 800934a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800934c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009350:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009352:	2300      	movs	r3, #0
 8009354:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800935a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800935c:	a901      	add	r1, sp, #4
 800935e:	f7ff fe5b 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009362:	f241 3288 	movw	r2, #5000	; 0x1388
 8009366:	4621      	mov	r1, r4
 8009368:	4628      	mov	r0, r5
 800936a:	f7ff fe6d 	bl	8009048 <SDMMC_GetCmdResp1>
}
 800936e:	b007      	add	sp, #28
 8009370:	bd30      	pop	{r4, r5, pc}
	...

08009374 <SDMMC_CmdStopTransfer>:
{
 8009374:	b530      	push	{r4, r5, lr}
 8009376:	b087      	sub	sp, #28
 8009378:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800937e:	250c      	movs	r5, #12
 8009380:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009386:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009388:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800938a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800938e:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009390:	68c3      	ldr	r3, [r0, #12]
 8009392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009396:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009398:	68c3      	ldr	r3, [r0, #12]
 800939a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800939e:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093a0:	a901      	add	r1, sp, #4
 80093a2:	f7ff fe39 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80093a6:	4a08      	ldr	r2, [pc, #32]	; (80093c8 <SDMMC_CmdStopTransfer+0x54>)
 80093a8:	4629      	mov	r1, r5
 80093aa:	4620      	mov	r0, r4
 80093ac:	f7ff fe4c 	bl	8009048 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80093b0:	68e3      	ldr	r3, [r4, #12]
 80093b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093b6:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80093b8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80093bc:	d001      	beq.n	80093c2 <SDMMC_CmdStopTransfer+0x4e>
}
 80093be:	b007      	add	sp, #28
 80093c0:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 80093c2:	2000      	movs	r0, #0
  return errorstate;
 80093c4:	e7fb      	b.n	80093be <SDMMC_CmdStopTransfer+0x4a>
 80093c6:	bf00      	nop
 80093c8:	05f5e100 	.word	0x05f5e100

080093cc <SDMMC_CmdSelDesel>:
{
 80093cc:	b530      	push	{r4, r5, lr}
 80093ce:	b087      	sub	sp, #28
 80093d0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80093d2:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80093d4:	2407      	movs	r4, #7
 80093d6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093dc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093de:	2300      	movs	r3, #0
 80093e0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093e6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093e8:	a901      	add	r1, sp, #4
 80093ea:	f7ff fe15 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80093ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f7ff fe27 	bl	8009048 <SDMMC_GetCmdResp1>
}
 80093fa:	b007      	add	sp, #28
 80093fc:	bd30      	pop	{r4, r5, pc}

080093fe <SDMMC_CmdGoIdleState>:
{
 80093fe:	b510      	push	{r4, lr}
 8009400:	b086      	sub	sp, #24
 8009402:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009408:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800940a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800940c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800940e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009412:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009414:	a901      	add	r1, sp, #4
 8009416:	f7ff fdff 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800941a:	4620      	mov	r0, r4
 800941c:	f7ff fd20 	bl	8008e60 <SDMMC_GetCmdError>
}
 8009420:	b006      	add	sp, #24
 8009422:	bd10      	pop	{r4, pc}

08009424 <SDMMC_CmdOperCond>:
{
 8009424:	b510      	push	{r4, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800942a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800942e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009430:	2308      	movs	r3, #8
 8009432:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009438:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800943a:	2300      	movs	r3, #0
 800943c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800943e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009442:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009444:	a901      	add	r1, sp, #4
 8009446:	f7ff fde7 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800944a:	4620      	mov	r0, r4
 800944c:	f7ff fd82 	bl	8008f54 <SDMMC_GetCmdResp7>
}
 8009450:	b006      	add	sp, #24
 8009452:	bd10      	pop	{r4, pc}

08009454 <SDMMC_CmdAppCommand>:
{
 8009454:	b530      	push	{r4, r5, lr}
 8009456:	b087      	sub	sp, #28
 8009458:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800945a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800945c:	2437      	movs	r4, #55	; 0x37
 800945e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009464:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009466:	2300      	movs	r3, #0
 8009468:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800946a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800946e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009470:	a901      	add	r1, sp, #4
 8009472:	f7ff fdd1 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009476:	f241 3288 	movw	r2, #5000	; 0x1388
 800947a:	4621      	mov	r1, r4
 800947c:	4628      	mov	r0, r5
 800947e:	f7ff fde3 	bl	8009048 <SDMMC_GetCmdResp1>
}
 8009482:	b007      	add	sp, #28
 8009484:	bd30      	pop	{r4, r5, pc}

08009486 <SDMMC_CmdAppOperCommand>:
{
 8009486:	b510      	push	{r4, lr}
 8009488:	b086      	sub	sp, #24
 800948a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800948c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800948e:	2329      	movs	r3, #41	; 0x29
 8009490:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009496:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009498:	2300      	movs	r3, #0
 800949a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800949c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094a0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094a2:	a901      	add	r1, sp, #4
 80094a4:	f7ff fdb8 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80094a8:	4620      	mov	r0, r4
 80094aa:	f7ff fd29 	bl	8008f00 <SDMMC_GetCmdResp3>
}
 80094ae:	b006      	add	sp, #24
 80094b0:	bd10      	pop	{r4, pc}

080094b2 <SDMMC_CmdBusWidth>:
{
 80094b2:	b530      	push	{r4, r5, lr}
 80094b4:	b087      	sub	sp, #28
 80094b6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80094b8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80094ba:	2406      	movs	r4, #6
 80094bc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094c2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094c4:	2300      	movs	r3, #0
 80094c6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094cc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094ce:	a901      	add	r1, sp, #4
 80094d0:	f7ff fda2 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80094d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d8:	4621      	mov	r1, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	f7ff fdb4 	bl	8009048 <SDMMC_GetCmdResp1>
}
 80094e0:	b007      	add	sp, #28
 80094e2:	bd30      	pop	{r4, r5, pc}

080094e4 <SDMMC_CmdSendSCR>:
{
 80094e4:	b530      	push	{r4, r5, lr}
 80094e6:	b087      	sub	sp, #28
 80094e8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80094ee:	2433      	movs	r4, #51	; 0x33
 80094f0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094f6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094f8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094fe:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009500:	a901      	add	r1, sp, #4
 8009502:	f7ff fd89 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009506:	f241 3288 	movw	r2, #5000	; 0x1388
 800950a:	4621      	mov	r1, r4
 800950c:	4628      	mov	r0, r5
 800950e:	f7ff fd9b 	bl	8009048 <SDMMC_GetCmdResp1>
}
 8009512:	b007      	add	sp, #28
 8009514:	bd30      	pop	{r4, r5, pc}

08009516 <SDMMC_CmdSendCID>:
{
 8009516:	b510      	push	{r4, lr}
 8009518:	b086      	sub	sp, #24
 800951a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009520:	2202      	movs	r2, #2
 8009522:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009524:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009528:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800952a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800952c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009530:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009532:	a901      	add	r1, sp, #4
 8009534:	f7ff fd70 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009538:	4620      	mov	r0, r4
 800953a:	f7ff fcaf 	bl	8008e9c <SDMMC_GetCmdResp2>
}
 800953e:	b006      	add	sp, #24
 8009540:	bd10      	pop	{r4, pc}

08009542 <SDMMC_CmdSendCSD>:
{
 8009542:	b510      	push	{r4, lr}
 8009544:	b086      	sub	sp, #24
 8009546:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009548:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800954a:	2309      	movs	r3, #9
 800954c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800954e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009552:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009554:	2300      	movs	r3, #0
 8009556:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800955c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800955e:	a901      	add	r1, sp, #4
 8009560:	f7ff fd5a 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009564:	4620      	mov	r0, r4
 8009566:	f7ff fc99 	bl	8008e9c <SDMMC_GetCmdResp2>
}
 800956a:	b006      	add	sp, #24
 800956c:	bd10      	pop	{r4, pc}

0800956e <SDMMC_CmdSetRelAdd>:
{
 800956e:	b570      	push	{r4, r5, r6, lr}
 8009570:	b086      	sub	sp, #24
 8009572:	4605      	mov	r5, r0
 8009574:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800957a:	2403      	movs	r4, #3
 800957c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800957e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009582:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009584:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800958a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800958c:	a901      	add	r1, sp, #4
 800958e:	f7ff fd43 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009592:	4632      	mov	r2, r6
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f7ff fe08 	bl	80091ac <SDMMC_GetCmdResp6>
}
 800959c:	b006      	add	sp, #24
 800959e:	bd70      	pop	{r4, r5, r6, pc}

080095a0 <SDMMC_CmdSendStatus>:
{
 80095a0:	b530      	push	{r4, r5, lr}
 80095a2:	b087      	sub	sp, #28
 80095a4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80095a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80095a8:	240d      	movs	r4, #13
 80095aa:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095b0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095b2:	2300      	movs	r3, #0
 80095b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095ba:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095bc:	a901      	add	r1, sp, #4
 80095be:	f7ff fd2b 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80095c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c6:	4621      	mov	r1, r4
 80095c8:	4628      	mov	r0, r5
 80095ca:	f7ff fd3d 	bl	8009048 <SDMMC_GetCmdResp1>
}
 80095ce:	b007      	add	sp, #28
 80095d0:	bd30      	pop	{r4, r5, pc}

080095d2 <SDMMC_CmdStatusRegister>:
{
 80095d2:	b530      	push	{r4, r5, lr}
 80095d4:	b087      	sub	sp, #28
 80095d6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80095dc:	240d      	movs	r4, #13
 80095de:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095e4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095ec:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095ee:	a901      	add	r1, sp, #4
 80095f0:	f7ff fd12 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80095f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095f8:	4621      	mov	r1, r4
 80095fa:	4628      	mov	r0, r5
 80095fc:	f7ff fd24 	bl	8009048 <SDMMC_GetCmdResp1>
}
 8009600:	b007      	add	sp, #28
 8009602:	bd30      	pop	{r4, r5, pc}

08009604 <SDMMC_CmdVoltageSwitch>:
{
 8009604:	b530      	push	{r4, r5, lr}
 8009606:	b087      	sub	sp, #28
 8009608:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 800960a:	2300      	movs	r3, #0
 800960c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800960e:	240b      	movs	r4, #11
 8009610:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009616:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009618:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800961a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800961e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009620:	a901      	add	r1, sp, #4
 8009622:	f7ff fcf9 	bl	8009018 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009626:	f241 3288 	movw	r2, #5000	; 0x1388
 800962a:	4621      	mov	r1, r4
 800962c:	4628      	mov	r0, r5
 800962e:	f7ff fd0b 	bl	8009048 <SDMMC_GetCmdResp1>
}
 8009632:	b007      	add	sp, #28
 8009634:	bd30      	pop	{r4, r5, pc}
	...

08009638 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009638:	4b10      	ldr	r3, [pc, #64]	; (800967c <FATFS_LinkDriverEx+0x44>)
 800963a:	7a5b      	ldrb	r3, [r3, #9]
 800963c:	b9db      	cbnz	r3, 8009676 <FATFS_LinkDriverEx+0x3e>
{
 800963e:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8009640:	4b0e      	ldr	r3, [pc, #56]	; (800967c <FATFS_LinkDriverEx+0x44>)
 8009642:	7a5d      	ldrb	r5, [r3, #9]
 8009644:	b2ed      	uxtb	r5, r5
 8009646:	2400      	movs	r4, #0
 8009648:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800964a:	7a5d      	ldrb	r5, [r3, #9]
 800964c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009650:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009652:	7a58      	ldrb	r0, [r3, #9]
 8009654:	4418      	add	r0, r3
 8009656:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009658:	7a5a      	ldrb	r2, [r3, #9]
 800965a:	b2d2      	uxtb	r2, r2
 800965c:	1c50      	adds	r0, r2, #1
 800965e:	b2c0      	uxtb	r0, r0
 8009660:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 8009662:	3230      	adds	r2, #48	; 0x30
 8009664:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8009666:	233a      	movs	r3, #58	; 0x3a
 8009668:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800966a:	232f      	movs	r3, #47	; 0x2f
 800966c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800966e:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 8009670:	4620      	mov	r0, r4
  }

  return ret;
}
 8009672:	bc30      	pop	{r4, r5}
 8009674:	4770      	bx	lr
  uint8_t ret = 1;
 8009676:	2001      	movs	r0, #1
}
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	200000a4 	.word	0x200000a4

08009680 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009680:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8009682:	2200      	movs	r2, #0
 8009684:	f7ff ffd8 	bl	8009638 <FATFS_LinkDriverEx>
}
 8009688:	bd08      	pop	{r3, pc}
	...

0800968c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800968c:	b500      	push	{lr}
 800968e:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8009690:	2300      	movs	r3, #0
 8009692:	9307      	str	r3, [sp, #28]
 8009694:	9308      	str	r3, [sp, #32]
 8009696:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	9302      	str	r3, [sp, #8]
 800969e:	9303      	str	r3, [sp, #12]
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	9305      	str	r3, [sp, #20]
 80096a4:	9306      	str	r3, [sp, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80096a6:	4841      	ldr	r0, [pc, #260]	; (80097ac <MX_ADC1_Init+0x120>)
 80096a8:	4a41      	ldr	r2, [pc, #260]	; (80097b0 <MX_ADC1_Init+0x124>)
 80096aa:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80096ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80096b0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80096b2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80096b4:	2201      	movs	r2, #1
 80096b6:	60c2      	str	r2, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80096b8:	2108      	movs	r1, #8
 80096ba:	6101      	str	r1, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80096bc:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80096be:	7542      	strb	r2, [r0, #21]
  hadc1.Init.NbrOfConversion = 6;
 80096c0:	2206      	movs	r2, #6
 80096c2:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80096c4:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80096c6:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80096c8:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80096ca:	2203      	movs	r2, #3
 80096cc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80096ce:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80096d0:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80096d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80096d6:	f7f7 fdd5 	bl	8001284 <HAL_ADC_Init>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d14d      	bne.n	800977a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80096de:	a90a      	add	r1, sp, #40	; 0x28
 80096e0:	2300      	movs	r3, #0
 80096e2:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80096e6:	4831      	ldr	r0, [pc, #196]	; (80097ac <MX_ADC1_Init+0x120>)
 80096e8:	f7f7 ff10 	bl	800150c <HAL_ADCEx_MultiModeConfigChannel>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d147      	bne.n	8009780 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80096f0:	4b30      	ldr	r3, [pc, #192]	; (80097b4 <MX_ADC1_Init+0x128>)
 80096f2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80096f4:	2306      	movs	r3, #6
 80096f6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80096f8:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80096fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80096fe:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009700:	2304      	movs	r3, #4
 8009702:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009708:	4669      	mov	r1, sp
 800970a:	4828      	ldr	r0, [pc, #160]	; (80097ac <MX_ADC1_Init+0x120>)
 800970c:	f7f7 f9b2 	bl	8000a74 <HAL_ADC_ConfigChannel>
 8009710:	2800      	cmp	r0, #0
 8009712:	d138      	bne.n	8009786 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8009714:	4b28      	ldr	r3, [pc, #160]	; (80097b8 <MX_ADC1_Init+0x12c>)
 8009716:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009718:	230c      	movs	r3, #12
 800971a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800971c:	4669      	mov	r1, sp
 800971e:	4823      	ldr	r0, [pc, #140]	; (80097ac <MX_ADC1_Init+0x120>)
 8009720:	f7f7 f9a8 	bl	8000a74 <HAL_ADC_ConfigChannel>
 8009724:	2800      	cmp	r0, #0
 8009726:	d131      	bne.n	800978c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8009728:	4b24      	ldr	r3, [pc, #144]	; (80097bc <MX_ADC1_Init+0x130>)
 800972a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800972c:	2312      	movs	r3, #18
 800972e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009730:	4669      	mov	r1, sp
 8009732:	481e      	ldr	r0, [pc, #120]	; (80097ac <MX_ADC1_Init+0x120>)
 8009734:	f7f7 f99e 	bl	8000a74 <HAL_ADC_ConfigChannel>
 8009738:	bb58      	cbnz	r0, 8009792 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800973a:	4b21      	ldr	r3, [pc, #132]	; (80097c0 <MX_ADC1_Init+0x134>)
 800973c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800973e:	2318      	movs	r3, #24
 8009740:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009742:	4669      	mov	r1, sp
 8009744:	4819      	ldr	r0, [pc, #100]	; (80097ac <MX_ADC1_Init+0x120>)
 8009746:	f7f7 f995 	bl	8000a74 <HAL_ADC_ConfigChannel>
 800974a:	bb28      	cbnz	r0, 8009798 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800974c:	4b1d      	ldr	r3, [pc, #116]	; (80097c4 <MX_ADC1_Init+0x138>)
 800974e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8009750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009754:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009756:	4669      	mov	r1, sp
 8009758:	4814      	ldr	r0, [pc, #80]	; (80097ac <MX_ADC1_Init+0x120>)
 800975a:	f7f7 f98b 	bl	8000a74 <HAL_ADC_ConfigChannel>
 800975e:	b9f0      	cbnz	r0, 800979e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009760:	4b19      	ldr	r3, [pc, #100]	; (80097c8 <MX_ADC1_Init+0x13c>)
 8009762:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8009764:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009768:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800976a:	4669      	mov	r1, sp
 800976c:	480f      	ldr	r0, [pc, #60]	; (80097ac <MX_ADC1_Init+0x120>)
 800976e:	f7f7 f981 	bl	8000a74 <HAL_ADC_ConfigChannel>
 8009772:	b9b8      	cbnz	r0, 80097a4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
  }

}
 8009774:	b00b      	add	sp, #44	; 0x2c
 8009776:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800977a:	f001 f82b 	bl	800a7d4 <Error_Handler>
 800977e:	e7ae      	b.n	80096de <MX_ADC1_Init+0x52>
    Error_Handler();
 8009780:	f001 f828 	bl	800a7d4 <Error_Handler>
 8009784:	e7b4      	b.n	80096f0 <MX_ADC1_Init+0x64>
    Error_Handler();
 8009786:	f001 f825 	bl	800a7d4 <Error_Handler>
 800978a:	e7c3      	b.n	8009714 <MX_ADC1_Init+0x88>
    Error_Handler();
 800978c:	f001 f822 	bl	800a7d4 <Error_Handler>
 8009790:	e7ca      	b.n	8009728 <MX_ADC1_Init+0x9c>
    Error_Handler();
 8009792:	f001 f81f 	bl	800a7d4 <Error_Handler>
 8009796:	e7d0      	b.n	800973a <MX_ADC1_Init+0xae>
    Error_Handler();
 8009798:	f001 f81c 	bl	800a7d4 <Error_Handler>
 800979c:	e7d6      	b.n	800974c <MX_ADC1_Init+0xc0>
    Error_Handler();
 800979e:	f001 f819 	bl	800a7d4 <Error_Handler>
 80097a2:	e7dd      	b.n	8009760 <MX_ADC1_Init+0xd4>
    Error_Handler();
 80097a4:	f001 f816 	bl	800a7d4 <Error_Handler>
}
 80097a8:	e7e4      	b.n	8009774 <MX_ADC1_Init+0xe8>
 80097aa:	bf00      	nop
 80097ac:	20000170 	.word	0x20000170
 80097b0:	40022000 	.word	0x40022000
 80097b4:	1d500080 	.word	0x1d500080
 80097b8:	0c900008 	.word	0x0c900008
 80097bc:	4fb80000 	.word	0x4fb80000
 80097c0:	4b840000 	.word	0x4b840000
 80097c4:	3ef08000 	.word	0x3ef08000
 80097c8:	3ac04000 	.word	0x3ac04000

080097cc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80097cc:	b500      	push	{lr}
 80097ce:	b089      	sub	sp, #36	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 80097d0:	2300      	movs	r3, #0
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	9302      	str	r3, [sp, #8]
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	9306      	str	r3, [sp, #24]
 80097de:	9307      	str	r3, [sp, #28]

  /** Common config 
  */
  hadc3.Instance = ADC3;
 80097e0:	4828      	ldr	r0, [pc, #160]	; (8009884 <MX_ADC3_Init+0xb8>)
 80097e2:	4a29      	ldr	r2, [pc, #164]	; (8009888 <MX_ADC3_Init+0xbc>)
 80097e4:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80097e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80097ea:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80097ec:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80097ee:	2201      	movs	r2, #1
 80097f0:	60c2      	str	r2, [r0, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80097f2:	2208      	movs	r2, #8
 80097f4:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80097f6:	7503      	strb	r3, [r0, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80097f8:	7543      	strb	r3, [r0, #21]
  hadc3.Init.NbrOfConversion = 3;
 80097fa:	2203      	movs	r2, #3
 80097fc:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80097fe:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8009800:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8009804:	6241      	str	r1, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8009806:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800980a:	6281      	str	r1, [r0, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800980c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800980e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8009810:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8009812:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009816:	f7f7 fd35 	bl	8001284 <HAL_ADC_Init>
 800981a:	bb30      	cbnz	r0, 800986a <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800981c:	4b1b      	ldr	r3, [pc, #108]	; (800988c <MX_ADC3_Init+0xc0>)
 800981e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009820:	2306      	movs	r3, #6
 8009822:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8009824:	2302      	movs	r3, #2
 8009826:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009828:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800982c:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800982e:	2304      	movs	r3, #4
 8009830:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009836:	a901      	add	r1, sp, #4
 8009838:	4812      	ldr	r0, [pc, #72]	; (8009884 <MX_ADC3_Init+0xb8>)
 800983a:	f7f7 f91b 	bl	8000a74 <HAL_ADC_ConfigChannel>
 800983e:	b9b8      	cbnz	r0, 8009870 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8009840:	4b13      	ldr	r3, [pc, #76]	; (8009890 <MX_ADC3_Init+0xc4>)
 8009842:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009844:	230c      	movs	r3, #12
 8009846:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009848:	a901      	add	r1, sp, #4
 800984a:	480e      	ldr	r0, [pc, #56]	; (8009884 <MX_ADC3_Init+0xb8>)
 800984c:	f7f7 f912 	bl	8000a74 <HAL_ADC_ConfigChannel>
 8009850:	b988      	cbnz	r0, 8009876 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8009852:	4b10      	ldr	r3, [pc, #64]	; (8009894 <MX_ADC3_Init+0xc8>)
 8009854:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009856:	2312      	movs	r3, #18
 8009858:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800985a:	a901      	add	r1, sp, #4
 800985c:	4809      	ldr	r0, [pc, #36]	; (8009884 <MX_ADC3_Init+0xb8>)
 800985e:	f7f7 f909 	bl	8000a74 <HAL_ADC_ConfigChannel>
 8009862:	b958      	cbnz	r0, 800987c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
  }

}
 8009864:	b009      	add	sp, #36	; 0x24
 8009866:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800986a:	f000 ffb3 	bl	800a7d4 <Error_Handler>
 800986e:	e7d5      	b.n	800981c <MX_ADC3_Init+0x50>
    Error_Handler();
 8009870:	f000 ffb0 	bl	800a7d4 <Error_Handler>
 8009874:	e7e4      	b.n	8009840 <MX_ADC3_Init+0x74>
    Error_Handler();
 8009876:	f000 ffad 	bl	800a7d4 <Error_Handler>
 800987a:	e7ea      	b.n	8009852 <MX_ADC3_Init+0x86>
    Error_Handler();
 800987c:	f000 ffaa 	bl	800a7d4 <Error_Handler>
}
 8009880:	e7f0      	b.n	8009864 <MX_ADC3_Init+0x98>
 8009882:	bf00      	nop
 8009884:	200001d4 	.word	0x200001d4
 8009888:	58026000 	.word	0x58026000
 800988c:	21800100 	.word	0x21800100
 8009890:	0c900008 	.word	0x0c900008
 8009894:	1d500080 	.word	0x1d500080

08009898 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	b08c      	sub	sp, #48	; 0x30
 800989c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800989e:	2300      	movs	r3, #0
 80098a0:	9307      	str	r3, [sp, #28]
 80098a2:	9308      	str	r3, [sp, #32]
 80098a4:	9309      	str	r3, [sp, #36]	; 0x24
 80098a6:	930a      	str	r3, [sp, #40]	; 0x28
 80098a8:	930b      	str	r3, [sp, #44]	; 0x2c
  if(adcHandle->Instance==ADC1)
 80098aa:	6803      	ldr	r3, [r0, #0]
 80098ac:	4a60      	ldr	r2, [pc, #384]	; (8009a30 <HAL_ADC_MspInit+0x198>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d004      	beq.n	80098bc <HAL_ADC_MspInit+0x24>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80098b2:	4a60      	ldr	r2, [pc, #384]	; (8009a34 <HAL_ADC_MspInit+0x19c>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d077      	beq.n	80099a8 <HAL_ADC_MspInit+0x110>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80098b8:	b00c      	add	sp, #48	; 0x30
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 80098bc:	4b5e      	ldr	r3, [pc, #376]	; (8009a38 <HAL_ADC_MspInit+0x1a0>)
 80098be:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80098c2:	f042 0220 	orr.w	r2, r2, #32
 80098c6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80098ca:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80098ce:	f002 0220 	and.w	r2, r2, #32
 80098d2:	9201      	str	r2, [sp, #4]
 80098d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80098da:	f042 0204 	orr.w	r2, r2, #4
 80098de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80098e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80098e6:	f002 0204 	and.w	r2, r2, #4
 80098ea:	9202      	str	r2, [sp, #8]
 80098ec:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80098f2:	f042 0201 	orr.w	r2, r2, #1
 80098f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80098fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80098fe:	f002 0201 	and.w	r2, r2, #1
 8009902:	9203      	str	r2, [sp, #12]
 8009904:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009906:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800990a:	f042 0202 	orr.w	r2, r2, #2
 800990e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	9304      	str	r3, [sp, #16]
 800991c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800991e:	2332      	movs	r3, #50	; 0x32
 8009920:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009922:	2603      	movs	r6, #3
 8009924:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009926:	a907      	add	r1, sp, #28
 8009928:	4844      	ldr	r0, [pc, #272]	; (8009a3c <HAL_ADC_MspInit+0x1a4>)
 800992a:	f7f9 f827 	bl	800297c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800992e:	23ff      	movs	r3, #255	; 0xff
 8009930:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009932:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009934:	2500      	movs	r5, #0
 8009936:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009938:	a907      	add	r1, sp, #28
 800993a:	4841      	ldr	r0, [pc, #260]	; (8009a40 <HAL_ADC_MspInit+0x1a8>)
 800993c:	f7f9 f81e 	bl	800297c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009940:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009942:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009944:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009946:	a907      	add	r1, sp, #28
 8009948:	483e      	ldr	r0, [pc, #248]	; (8009a44 <HAL_ADC_MspInit+0x1ac>)
 800994a:	f7f9 f817 	bl	800297c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 800994e:	483e      	ldr	r0, [pc, #248]	; (8009a48 <HAL_ADC_MspInit+0x1b0>)
 8009950:	4b3e      	ldr	r3, [pc, #248]	; (8009a4c <HAL_ADC_MspInit+0x1b4>)
 8009952:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8009954:	2309      	movs	r3, #9
 8009956:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009958:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800995a:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800995c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009960:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009966:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800996c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800996e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009972:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8009974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009978:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800997a:	2304      	movs	r3, #4
 800997c:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800997e:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8009980:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009982:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009984:	f7f8 f946 	bl	8001c14 <HAL_DMA_Init>
 8009988:	b958      	cbnz	r0, 80099a2 <HAL_ADC_MspInit+0x10a>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800998a:	4b2f      	ldr	r3, [pc, #188]	; (8009a48 <HAL_ADC_MspInit+0x1b0>)
 800998c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800998e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8009990:	2200      	movs	r2, #0
 8009992:	4611      	mov	r1, r2
 8009994:	2012      	movs	r0, #18
 8009996:	f7f7 fe87 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800999a:	2012      	movs	r0, #18
 800999c:	f7f7 feb6 	bl	800170c <HAL_NVIC_EnableIRQ>
 80099a0:	e78a      	b.n	80098b8 <HAL_ADC_MspInit+0x20>
      Error_Handler();
 80099a2:	f000 ff17 	bl	800a7d4 <Error_Handler>
 80099a6:	e7f0      	b.n	800998a <HAL_ADC_MspInit+0xf2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80099a8:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <HAL_ADC_MspInit+0x1a0>)
 80099aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80099ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80099b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80099b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80099ba:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80099be:	9205      	str	r2, [sp, #20]
 80099c0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80099c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80099c6:	f042 0220 	orr.w	r2, r2, #32
 80099ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80099ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099d2:	f003 0320 	and.w	r3, r3, #32
 80099d6:	9306      	str	r3, [sp, #24]
 80099d8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80099da:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80099de:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80099e0:	2303      	movs	r3, #3
 80099e2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80099e4:	a907      	add	r1, sp, #28
 80099e6:	481a      	ldr	r0, [pc, #104]	; (8009a50 <HAL_ADC_MspInit+0x1b8>)
 80099e8:	f7f8 ffc8 	bl	800297c <HAL_GPIO_Init>
    hdma_adc3.Instance = BDMA_Channel0;
 80099ec:	4819      	ldr	r0, [pc, #100]	; (8009a54 <HAL_ADC_MspInit+0x1bc>)
 80099ee:	4b1a      	ldr	r3, [pc, #104]	; (8009a58 <HAL_ADC_MspInit+0x1c0>)
 80099f0:	6003      	str	r3, [r0, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80099f2:	2311      	movs	r3, #17
 80099f4:	6043      	str	r3, [r0, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099f6:	2300      	movs	r3, #0
 80099f8:	6083      	str	r3, [r0, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80099fa:	60c3      	str	r3, [r0, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80099fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a00:	6103      	str	r3, [r0, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009a02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a06:	6143      	str	r3, [r0, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a0c:	6183      	str	r3, [r0, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8009a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a12:	61c3      	str	r3, [r0, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8009a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a18:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8009a1a:	f7f8 f8fb 	bl	8001c14 <HAL_DMA_Init>
 8009a1e:	b918      	cbnz	r0, 8009a28 <HAL_ADC_MspInit+0x190>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8009a20:	4b0c      	ldr	r3, [pc, #48]	; (8009a54 <HAL_ADC_MspInit+0x1bc>)
 8009a22:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009a24:	639c      	str	r4, [r3, #56]	; 0x38
}
 8009a26:	e747      	b.n	80098b8 <HAL_ADC_MspInit+0x20>
      Error_Handler();
 8009a28:	f000 fed4 	bl	800a7d4 <Error_Handler>
 8009a2c:	e7f8      	b.n	8009a20 <HAL_ADC_MspInit+0x188>
 8009a2e:	bf00      	nop
 8009a30:	40022000 	.word	0x40022000
 8009a34:	58026000 	.word	0x58026000
 8009a38:	58024400 	.word	0x58024400
 8009a3c:	58020800 	.word	0x58020800
 8009a40:	58020000 	.word	0x58020000
 8009a44:	58020400 	.word	0x58020400
 8009a48:	20000238 	.word	0x20000238
 8009a4c:	40020010 	.word	0x40020010
 8009a50:	58021400 	.word	0x58021400
 8009a54:	200000f8 	.word	0x200000f8
 8009a58:	58025408 	.word	0x58025408

08009a5c <audioInit>:
	TRUE
} BOOL;


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	ed2d 8b02 	vpush	{d8}
 8009a62:	4605      	mov	r5, r0
 8009a64:	460f      	mov	r7, r1
 8009a66:	4616      	mov	r6, r2
	// Initialize LEAF.

	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8009a68:	4b3f      	ldr	r3, [pc, #252]	; (8009b68 <audioInit+0x10c>)
 8009a6a:	4a40      	ldr	r2, [pc, #256]	; (8009b6c <audioInit+0x110>)
 8009a6c:	4940      	ldr	r1, [pc, #256]	; (8009b70 <audioInit+0x114>)
 8009a6e:	2020      	movs	r0, #32
 8009a70:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8009b74 <audioInit+0x118>
 8009a74:	f002 f896 	bl	800bba4 <LEAF_init>

	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE);
 8009a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a7c:	493e      	ldr	r1, [pc, #248]	; (8009b78 <audioInit+0x11c>)
 8009a7e:	483f      	ldr	r0, [pc, #252]	; (8009b7c <audioInit+0x120>)
 8009a80:	f002 f878 	bl	800bb74 <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE);
 8009a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a88:	493d      	ldr	r1, [pc, #244]	; (8009b80 <audioInit+0x124>)
 8009a8a:	483e      	ldr	r0, [pc, #248]	; (8009b84 <audioInit+0x128>)
 8009a8c:	f002 f872 	bl	800bb74 <tMempool_init>

	for (int i = 0; i < 6; i++)
 8009a90:	2400      	movs	r4, #0
 8009a92:	e009      	b.n	8009aa8 <audioInit+0x4c>
	{
		tRamp_initToPool(&adc[i],7.0f, 1, &smallPool); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 8009a94:	4a39      	ldr	r2, [pc, #228]	; (8009b7c <audioInit+0x120>)
 8009a96:	2101      	movs	r1, #1
 8009a98:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8009a9c:	483a      	ldr	r0, [pc, #232]	; (8009b88 <audioInit+0x12c>)
 8009a9e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8009aa2:	f001 fd73 	bl	800b58c <tRamp_initToPool>
	for (int i = 0; i < 6; i++)
 8009aa6:	3401      	adds	r4, #1
 8009aa8:	2c05      	cmp	r4, #5
 8009aaa:	ddf3      	ble.n	8009a94 <audioInit+0x38>

	}
	tNoise_initToPool(&noise, PinkNoise, &smallPool);
 8009aac:	4c33      	ldr	r4, [pc, #204]	; (8009b7c <audioInit+0x120>)
 8009aae:	4622      	mov	r2, r4
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	4836      	ldr	r0, [pc, #216]	; (8009b8c <audioInit+0x130>)
 8009ab4:	f002 f866 	bl	800bb84 <tNoise_initToPool>
	tNoise_initToPool(&noise2, PinkNoise, &smallPool);
 8009ab8:	4622      	mov	r2, r4
 8009aba:	2101      	movs	r1, #1
 8009abc:	4834      	ldr	r0, [pc, #208]	; (8009b90 <audioInit+0x134>)
 8009abe:	f002 f861 	bl	800bb84 <tNoise_initToPool>
	for (int i = 0; i < 6; i++)
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	e000      	b.n	8009ac8 <audioInit+0x6c>
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	ddfc      	ble.n	8009ac6 <audioInit+0x6a>
	{
		//tCycle_initToPool(&mySine[i], &smallPool);
		//tCycle_setFreq(&mySine[i], 440.0f);
	}

	HAL_Delay(10);
 8009acc:	200a      	movs	r0, #10
 8009ace:	f7f6 fde9 	bl	80006a4 <HAL_Delay>

	tVZFilter_init(&shelf1, Lowshelf, 80.0f, 4.0f);
 8009ad2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8009ad6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8009b94 <audioInit+0x138>
 8009ada:	2106      	movs	r1, #6
 8009adc:	482e      	ldr	r0, [pc, #184]	; (8009b98 <audioInit+0x13c>)
 8009ade:	f001 ff9f 	bl	800ba20 <tVZFilter_init>
	tVZFilter_init(&shelf2, Highshelf, 12000.0f, 4.0f);
 8009ae2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8009ae6:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8009b9c <audioInit+0x140>
 8009aea:	2107      	movs	r1, #7
 8009aec:	482c      	ldr	r0, [pc, #176]	; (8009ba0 <audioInit+0x144>)
 8009aee:	f001 ff97 	bl	800ba20 <tVZFilter_init>
	tVZFilter_init(&bell1, Bell, 1000.0f, 1.9f);
 8009af2:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8009ba4 <audioInit+0x148>
 8009af6:	eef0 0a48 	vmov.f32	s1, s16
 8009afa:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8009ba8 <audioInit+0x14c>
 8009afe:	2105      	movs	r1, #5
 8009b00:	482a      	ldr	r0, [pc, #168]	; (8009bac <audioInit+0x150>)
 8009b02:	f001 ff8d 	bl	800ba20 <tVZFilter_init>
	tVZFilter_init(&bell2, Bell, 6000.0f, 1.9f);
 8009b06:	eef0 0a48 	vmov.f32	s1, s16
 8009b0a:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8009bb0 <audioInit+0x154>
 8009b0e:	2105      	movs	r1, #5
 8009b10:	4828      	ldr	r0, [pc, #160]	; (8009bb4 <audioInit+0x158>)
 8009b12:	f001 ff85 	bl	800ba20 <tVZFilter_init>


	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	e004      	b.n	8009b24 <audioInit+0xc8>
	{
		audioOutBuffer[i] = 0;
 8009b1a:	4a27      	ldr	r2, [pc, #156]	; (8009bb8 <audioInit+0x15c>)
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8009b22:	3301      	adds	r3, #1
 8009b24:	2b7f      	cmp	r3, #127	; 0x7f
 8009b26:	ddf8      	ble.n	8009b1a <audioInit+0xbe>





	if (HAL_ADC_Start_DMA(&hadc3,(uint32_t*)&ADC3_values,NUM_EXT_ADC_CHANNELS * AUDIO_FRAME_SIZE) != HAL_OK)
 8009b28:	2260      	movs	r2, #96	; 0x60
 8009b2a:	4924      	ldr	r1, [pc, #144]	; (8009bbc <audioInit+0x160>)
 8009b2c:	4824      	ldr	r0, [pc, #144]	; (8009bc0 <audioInit+0x164>)
 8009b2e:	f7f7 fa61 	bl	8000ff4 <HAL_ADC_Start_DMA>
 8009b32:	b9a8      	cbnz	r0, 8009b60 <audioInit+0x104>
	{
	  Error_Handler();
	}
	//HAL_Delay(1);
	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8009b34:	4c20      	ldr	r4, [pc, #128]	; (8009bb8 <audioInit+0x15c>)
 8009b36:	2280      	movs	r2, #128	; 0x80
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	f7fb fde2 	bl	8005704 <HAL_SAI_Transmit_DMA>
 8009b40:	4b20      	ldr	r3, [pc, #128]	; (8009bc4 <audioInit+0x168>)
 8009b42:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8009b44:	2280      	movs	r2, #128	; 0x80
 8009b46:	f504 7100 	add.w	r1, r4, #512	; 0x200
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	f7fb fe5c 	bl	8005808 <HAL_SAI_Receive_DMA>
 8009b50:	4b1d      	ldr	r3, [pc, #116]	; (8009bc8 <audioInit+0x16c>)
 8009b52:	7018      	strb	r0, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8009b54:	4628      	mov	r0, r5
 8009b56:	f000 fa11 	bl	8009f7c <AudioCodec_init>

}
 8009b5a:	ecbd 8b02 	vpop	{d8}
 8009b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  Error_Handler();
 8009b60:	f000 fe38 	bl	800a7d4 <Error_Handler>
 8009b64:	e7e6      	b.n	8009b34 <audioInit+0xd8>
 8009b66:	bf00      	nop
 8009b68:	0800a725 	.word	0x0800a725
 8009b6c:	0007a120 	.word	0x0007a120
 8009b70:	24000000 	.word	0x24000000
 8009b74:	473b8000 	.word	0x473b8000
 8009b78:	200002f8 	.word	0x200002f8
 8009b7c:	20007690 	.word	0x20007690
 8009b80:	60000000 	.word	0x60000000
 8009b84:	200002cc 	.word	0x200002cc
 8009b88:	200002d4 	.word	0x200002d4
 8009b8c:	20001680 	.word	0x20001680
 8009b90:	200002bc 	.word	0x200002bc
 8009b94:	42a00000 	.word	0x42a00000
 8009b98:	200002c8 	.word	0x200002c8
 8009b9c:	463b8000 	.word	0x463b8000
 8009ba0:	200002c4 	.word	0x200002c4
 8009ba4:	3ff33333 	.word	0x3ff33333
 8009ba8:	447a0000 	.word	0x447a0000
 8009bac:	200002c0 	.word	0x200002c0
 8009bb0:	45bb8000 	.word	0x45bb8000
 8009bb4:	200002b4 	.word	0x200002b4
 8009bb8:	30000000 	.word	0x30000000
 8009bbc:	38000000 	.word	0x38000000
 8009bc0:	200001d4 	.word	0x200001d4
 8009bc4:	200002b8 	.word	0x200002b8
 8009bc8:	200002d0 	.word	0x200002d0

08009bcc <audioTickL>:
float audioTickL(float audioIn, int sampleNum)
{

	sample = 0.0f;

	sample = audioADCInputs[0][sampleNumGlobal];
 8009bcc:	4a08      	ldr	r2, [pc, #32]	; (8009bf0 <audioTickL+0x24>)
 8009bce:	6813      	ldr	r3, [r2, #0]
 8009bd0:	4908      	ldr	r1, [pc, #32]	; (8009bf4 <audioTickL+0x28>)
 8009bd2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009bd6:	ed91 0a00 	vldr	s0, [r1]
 8009bda:	ed82 0a01 	vstr	s0, [r2, #4]
	sampleNumGlobal++;
 8009bde:	3301      	adds	r3, #1
 8009be0:	6013      	str	r3, [r2, #0]
	if (sampleNumGlobal >= 2048)
 8009be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009be6:	db02      	blt.n	8009bee <audioTickL+0x22>
	{
		sampleNumGlobal = 0;
 8009be8:	4613      	mov	r3, r2
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
	}
	return sample;
}
 8009bee:	4770      	bx	lr
 8009bf0:	200000b0 	.word	0x200000b0
 8009bf4:	20001684 	.word	0x20001684

08009bf8 <audioTickR>:

uint32_t myCounter = 0;

float audioTickR(float audioIn, int sampleNum)
{
	rightIn = audioIn;
 8009bf8:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <audioTickR+0x1c>)
 8009bfa:	ed83 0a02 	vstr	s0, [r3, #8]
	//sample = (audioADCInputs[1][sampleNumGlobal] + audioADCInputs[2][sampleNumGlobal]) * 0.5f;
	sample = audioADCInputs[2][sampleNumGlobal];
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
 8009c04:	4a04      	ldr	r2, [pc, #16]	; (8009c18 <audioTickR+0x20>)
 8009c06:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009c0a:	ed92 0a00 	vldr	s0, [r2]
 8009c0e:	ed83 0a01 	vstr	s0, [r3, #4]
	//sample = 0.0f;
	return sample;
}
 8009c12:	4770      	bx	lr
 8009c14:	200000b0 	.word	0x200000b0
 8009c18:	20001684 	.word	0x20001684

08009c1c <buttonCheck>:


volatile uint8_t LED_States[3] = {0,0,0};
void buttonCheck(void)
{
 8009c1c:	b538      	push	{r3, r4, r5, lr}
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 8009c1e:	4d4c      	ldr	r5, [pc, #304]	; (8009d50 <buttonCheck+0x134>)
 8009c20:	2140      	movs	r1, #64	; 0x40
 8009c22:	4628      	mov	r0, r5
 8009c24:	f7f8 ff9a 	bl	8002b5c <HAL_GPIO_ReadPin>
 8009c28:	fab0 f080 	clz	r0, r0
 8009c2c:	0940      	lsrs	r0, r0, #5
 8009c2e:	4c49      	ldr	r4, [pc, #292]	; (8009d54 <buttonCheck+0x138>)
 8009c30:	7020      	strb	r0, [r4, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 8009c32:	2180      	movs	r1, #128	; 0x80
 8009c34:	4628      	mov	r0, r5
 8009c36:	f7f8 ff91 	bl	8002b5c <HAL_GPIO_ReadPin>
 8009c3a:	fab0 f080 	clz	r0, r0
 8009c3e:	0940      	lsrs	r0, r0, #5
 8009c40:	7060      	strb	r0, [r4, #1]
	//buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
	for (int i = 0; i < NUM_BUTTONS; i++)
 8009c42:	2300      	movs	r3, #0
 8009c44:	e009      	b.n	8009c5a <buttonCheck+0x3e>
	  {
		  if (buttonValues[i] == 1)
		  {
			  buttonPressed[i] = 1;
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 8009c46:	4a43      	ldr	r2, [pc, #268]	; (8009d54 <buttonCheck+0x138>)
 8009c48:	5cd2      	ldrb	r2, [r2, r3]
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	4942      	ldr	r1, [pc, #264]	; (8009d58 <buttonCheck+0x13c>)
 8009c4e:	54ca      	strb	r2, [r1, r3]
		  buttonCounters[i] = 0;
 8009c50:	4a42      	ldr	r2, [pc, #264]	; (8009d5c <buttonCheck+0x140>)
 8009c52:	2100      	movs	r1, #0
 8009c54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8009c58:	3301      	adds	r3, #1
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	dc29      	bgt.n	8009cb2 <buttonCheck+0x96>
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8009c5e:	4a3d      	ldr	r2, [pc, #244]	; (8009d54 <buttonCheck+0x138>)
 8009c60:	5cd1      	ldrb	r1, [r2, r3]
 8009c62:	b2c9      	uxtb	r1, r1
 8009c64:	4a3c      	ldr	r2, [pc, #240]	; (8009d58 <buttonCheck+0x13c>)
 8009c66:	5cd2      	ldrb	r2, [r2, r3]
 8009c68:	b2d2      	uxtb	r2, r2
 8009c6a:	4291      	cmp	r1, r2
 8009c6c:	d00a      	beq.n	8009c84 <buttonCheck+0x68>
 8009c6e:	4a3b      	ldr	r2, [pc, #236]	; (8009d5c <buttonCheck+0x140>)
 8009c70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c74:	2a09      	cmp	r2, #9
 8009c76:	d805      	bhi.n	8009c84 <buttonCheck+0x68>
		  buttonCounters[i]++;
 8009c78:	4938      	ldr	r1, [pc, #224]	; (8009d5c <buttonCheck+0x140>)
 8009c7a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8009c7e:	3201      	adds	r2, #1
 8009c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 8009c84:	4a33      	ldr	r2, [pc, #204]	; (8009d54 <buttonCheck+0x138>)
 8009c86:	5cd1      	ldrb	r1, [r2, r3]
 8009c88:	b2c9      	uxtb	r1, r1
 8009c8a:	4a33      	ldr	r2, [pc, #204]	; (8009d58 <buttonCheck+0x13c>)
 8009c8c:	5cd2      	ldrb	r2, [r2, r3]
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	4291      	cmp	r1, r2
 8009c92:	d0e1      	beq.n	8009c58 <buttonCheck+0x3c>
 8009c94:	4a31      	ldr	r2, [pc, #196]	; (8009d5c <buttonCheck+0x140>)
 8009c96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c9a:	2a09      	cmp	r2, #9
 8009c9c:	d9dc      	bls.n	8009c58 <buttonCheck+0x3c>
		  if (buttonValues[i] == 1)
 8009c9e:	4a2d      	ldr	r2, [pc, #180]	; (8009d54 <buttonCheck+0x138>)
 8009ca0:	5cd2      	ldrb	r2, [r2, r3]
 8009ca2:	b2d2      	uxtb	r2, r2
 8009ca4:	2a01      	cmp	r2, #1
 8009ca6:	d1ce      	bne.n	8009c46 <buttonCheck+0x2a>
			  buttonPressed[i] = 1;
 8009ca8:	4a2d      	ldr	r2, [pc, #180]	; (8009d60 <buttonCheck+0x144>)
 8009caa:	2101      	movs	r1, #1
 8009cac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8009cb0:	e7c9      	b.n	8009c46 <buttonCheck+0x2a>
	  }
	}

	if (buttonPressed[0] == 1)
 8009cb2:	4b2b      	ldr	r3, [pc, #172]	; (8009d60 <buttonCheck+0x144>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d008      	beq.n	8009ccc <buttonCheck+0xb0>
			LED_States[0] = 0;
		}
		buttonPressed[0] = 0;

	}
	if (buttonPressed[1] == 1)
 8009cba:	4b29      	ldr	r3, [pc, #164]	; (8009d60 <buttonCheck+0x144>)
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d01e      	beq.n	8009d00 <buttonCheck+0xe4>
			LED_States[1] = 0;
		}
		buttonPressed[1] = 0;
	}

	if (buttonPressed[2] == 1)
 8009cc2:	4b27      	ldr	r3, [pc, #156]	; (8009d60 <buttonCheck+0x144>)
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d034      	beq.n	8009d34 <buttonCheck+0x118>

			LED_States[2] = 0;
		}
		buttonPressed[2] = 0;
	}
}
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
		if (LED_States[0] == 0)
 8009ccc:	4b25      	ldr	r3, [pc, #148]	; (8009d64 <buttonCheck+0x148>)
 8009cce:	7b1b      	ldrb	r3, [r3, #12]
 8009cd0:	b963      	cbnz	r3, 8009cec <buttonCheck+0xd0>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009cd8:	4823      	ldr	r0, [pc, #140]	; (8009d68 <buttonCheck+0x14c>)
 8009cda:	f7f8 ff46 	bl	8002b6a <HAL_GPIO_WritePin>
			LED_States[0] = 1;
 8009cde:	4b21      	ldr	r3, [pc, #132]	; (8009d64 <buttonCheck+0x148>)
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	731a      	strb	r2, [r3, #12]
		buttonPressed[0] = 0;
 8009ce4:	4b1e      	ldr	r3, [pc, #120]	; (8009d60 <buttonCheck+0x144>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	e7e6      	b.n	8009cba <buttonCheck+0x9e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8009cec:	2200      	movs	r2, #0
 8009cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009cf2:	481d      	ldr	r0, [pc, #116]	; (8009d68 <buttonCheck+0x14c>)
 8009cf4:	f7f8 ff39 	bl	8002b6a <HAL_GPIO_WritePin>
			LED_States[0] = 0;
 8009cf8:	4b1a      	ldr	r3, [pc, #104]	; (8009d64 <buttonCheck+0x148>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	731a      	strb	r2, [r3, #12]
 8009cfe:	e7f1      	b.n	8009ce4 <buttonCheck+0xc8>
		if (LED_States[1] == 0)
 8009d00:	4b18      	ldr	r3, [pc, #96]	; (8009d64 <buttonCheck+0x148>)
 8009d02:	7b5b      	ldrb	r3, [r3, #13]
 8009d04:	b963      	cbnz	r3, 8009d20 <buttonCheck+0x104>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8009d06:	2201      	movs	r2, #1
 8009d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d0c:	4817      	ldr	r0, [pc, #92]	; (8009d6c <buttonCheck+0x150>)
 8009d0e:	f7f8 ff2c 	bl	8002b6a <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 8009d12:	4b14      	ldr	r3, [pc, #80]	; (8009d64 <buttonCheck+0x148>)
 8009d14:	2201      	movs	r2, #1
 8009d16:	735a      	strb	r2, [r3, #13]
		buttonPressed[1] = 0;
 8009d18:	4b11      	ldr	r3, [pc, #68]	; (8009d60 <buttonCheck+0x144>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	605a      	str	r2, [r3, #4]
 8009d1e:	e7d0      	b.n	8009cc2 <buttonCheck+0xa6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8009d20:	2200      	movs	r2, #0
 8009d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d26:	4811      	ldr	r0, [pc, #68]	; (8009d6c <buttonCheck+0x150>)
 8009d28:	f7f8 ff1f 	bl	8002b6a <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <buttonCheck+0x148>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	735a      	strb	r2, [r3, #13]
 8009d32:	e7f1      	b.n	8009d18 <buttonCheck+0xfc>
		if (LED_States[2] == 0)
 8009d34:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <buttonCheck+0x148>)
 8009d36:	7b9b      	ldrb	r3, [r3, #14]
 8009d38:	b933      	cbnz	r3, 8009d48 <buttonCheck+0x12c>
			LED_States[2] = 1;
 8009d3a:	4b0a      	ldr	r3, [pc, #40]	; (8009d64 <buttonCheck+0x148>)
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	739a      	strb	r2, [r3, #14]
		buttonPressed[2] = 0;
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <buttonCheck+0x144>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	609a      	str	r2, [r3, #8]
}
 8009d46:	e7c0      	b.n	8009cca <buttonCheck+0xae>
			LED_States[2] = 0;
 8009d48:	4b06      	ldr	r3, [pc, #24]	; (8009d64 <buttonCheck+0x148>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	739a      	strb	r2, [r3, #14]
 8009d4e:	e7f7      	b.n	8009d40 <buttonCheck+0x124>
 8009d50:	58021800 	.word	0x58021800
 8009d54:	20007694 	.word	0x20007694
 8009d58:	200002b0 	.word	0x200002b0
 8009d5c:	20007684 	.word	0x20007684
 8009d60:	200002ec 	.word	0x200002ec
 8009d64:	200000b0 	.word	0x200000b0
 8009d68:	58020000 	.word	0x58020000
 8009d6c:	58020c00 	.word	0x58020c00

08009d70 <audioFrame>:
{
 8009d70:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
 8009d74:	4605      	mov	r5, r0
	frameCounter2++;
 8009d76:	4937      	ldr	r1, [pc, #220]	; (8009e54 <audioFrame+0xe4>)
 8009d78:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8009d7c:	f112 0b01 	adds.w	fp, r2, #1
 8009d80:	f143 0c00 	adc.w	ip, r3, #0
 8009d84:	e9c1 bc04 	strd	fp, ip, [r1, #16]
	buttonCheck();
 8009d88:	f7ff ff48 	bl	8009c1c <buttonCheck>
	for (i = 0; i < 6; i++)
 8009d8c:	2400      	movs	r4, #0
 8009d8e:	e010      	b.n	8009db2 <audioFrame+0x42>
		tRamp_setDest(&adc[i], (ADC_values[i] * INV_TWO_TO_16));
 8009d90:	4b31      	ldr	r3, [pc, #196]	; (8009e58 <audioFrame+0xe8>)
 8009d92:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d9e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8009e5c <audioFrame+0xec>
 8009da2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009da6:	482e      	ldr	r0, [pc, #184]	; (8009e60 <audioFrame+0xf0>)
 8009da8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8009dac:	f001 fc32 	bl	800b614 <tRamp_setDest>
	for (i = 0; i < 6; i++)
 8009db0:	3401      	adds	r4, #1
 8009db2:	2c05      	cmp	r4, #5
 8009db4:	ddec      	ble.n	8009d90 <audioFrame+0x20>
	if (codecReady)
 8009db6:	4b27      	ldr	r3, [pc, #156]	; (8009e54 <audioFrame+0xe4>)
 8009db8:	7e1b      	ldrb	r3, [r3, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d048      	beq.n	8009e50 <audioFrame+0xe0>
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8009dbe:	2400      	movs	r4, #0
 8009dc0:	e017      	b.n	8009df2 <audioFrame+0x82>
				current_sample = (int32_t)(audioTickR((float) ((audioInBuffer[buffer_offset + i] << 8) * INV_TWO_TO_31), i/2) * TWO_TO_23);
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dca:	1040      	asrs	r0, r0, #1
 8009dcc:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8009e64 <audioFrame+0xf4>
 8009dd0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009dd4:	f7ff ff10 	bl	8009bf8 <audioTickR>
 8009dd8:	eddf 7a23 	vldr	s15, [pc, #140]	; 8009e68 <audioFrame+0xf8>
 8009ddc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009de0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
			audioOutBuffer[buffer_offset + i] = current_sample;
 8009de4:	192a      	adds	r2, r5, r4
 8009de6:	4b21      	ldr	r3, [pc, #132]	; (8009e6c <audioFrame+0xfc>)
 8009de8:	ee10 1a10 	vmov	r1, s0
 8009dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8009df0:	3401      	adds	r4, #1
 8009df2:	2c3f      	cmp	r4, #63	; 0x3f
 8009df4:	dc2c      	bgt.n	8009e50 <audioFrame+0xe0>
			if ((i & 1) == 0)
 8009df6:	f014 0f01 	tst.w	r4, #1
 8009dfa:	d10b      	bne.n	8009e14 <audioFrame+0xa4>
				current_sample = (int32_t)(audioTickR((float) ((audioInBuffer[buffer_offset + i] << 8) * INV_TWO_TO_31), i/2) * TWO_TO_23);
 8009dfc:	192b      	adds	r3, r5, r4
 8009dfe:	4a1b      	ldr	r2, [pc, #108]	; (8009e6c <audioFrame+0xfc>)
 8009e00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e08:	021b      	lsls	r3, r3, #8
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	2c00      	cmp	r4, #0
 8009e0e:	dad8      	bge.n	8009dc2 <audioFrame+0x52>
 8009e10:	1c60      	adds	r0, r4, #1
 8009e12:	e7d6      	b.n	8009dc2 <audioFrame+0x52>
				current_sample = (int32_t)(audioTickL((float) ((audioInBuffer[buffer_offset + i] << 8) * INV_TWO_TO_31), i/2) * TWO_TO_23);
 8009e14:	192b      	adds	r3, r5, r4
 8009e16:	4a15      	ldr	r2, [pc, #84]	; (8009e6c <audioFrame+0xfc>)
 8009e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	4620      	mov	r0, r4
 8009e24:	2c00      	cmp	r4, #0
 8009e26:	db11      	blt.n	8009e4c <audioFrame+0xdc>
 8009e28:	ee07 3a90 	vmov	s15, r3
 8009e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e30:	1040      	asrs	r0, r0, #1
 8009e32:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009e64 <audioFrame+0xf4>
 8009e36:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009e3a:	f7ff fec7 	bl	8009bcc <audioTickL>
 8009e3e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009e68 <audioFrame+0xf8>
 8009e42:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009e46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009e4a:	e7cb      	b.n	8009de4 <audioFrame+0x74>
 8009e4c:	1c60      	adds	r0, r4, #1
 8009e4e:	e7eb      	b.n	8009e28 <audioFrame+0xb8>
}
 8009e50:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 8009e54:	200000b0 	.word	0x200000b0
 8009e58:	30000400 	.word	0x30000400
 8009e5c:	377ffff6 	.word	0x377ffff6
 8009e60:	200002d4 	.word	0x200002d4
 8009e64:	2ffffff6 	.word	0x2ffffff6
 8009e68:	4b000000 	.word	0x4b000000
 8009e6c:	30000000 	.word	0x30000000

08009e70 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8009e70:	4770      	bx	lr

08009e72 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8009e72:	4770      	bx	lr

08009e74 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
  ;
}
 8009e74:	4770      	bx	lr

08009e76 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009e76:	b508      	push	{r3, lr}
	audioFrame(HALF_BUFFER_SIZE);
 8009e78:	2040      	movs	r0, #64	; 0x40
 8009e7a:	f7ff ff79 	bl	8009d70 <audioFrame>
}
 8009e7e:	bd08      	pop	{r3, pc}

08009e80 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009e80:	b508      	push	{r3, lr}
	audioFrame(0);
 8009e82:	2000      	movs	r0, #0
 8009e84:	f7ff ff74 	bl	8009d70 <audioFrame>
}
 8009e88:	bd08      	pop	{r3, pc}
	...

08009e8c <MX_BDMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void) 
{
 8009e8c:	b500      	push	{lr}
 8009e8e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8009e90:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <MX_BDMA_Init+0x34>)
 8009e92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009e96:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8009e9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8009eaa:	2200      	movs	r2, #0
 8009eac:	4611      	mov	r1, r2
 8009eae:	2081      	movs	r0, #129	; 0x81
 8009eb0:	f7f7 fbfa 	bl	80016a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8009eb4:	2081      	movs	r0, #129	; 0x81
 8009eb6:	f7f7 fc29 	bl	800170c <HAL_NVIC_EnableIRQ>

}
 8009eba:	b003      	add	sp, #12
 8009ebc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ec0:	58024400 	.word	0x58024400

08009ec4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ec4:	b500      	push	{lr}
 8009ec6:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	460a      	mov	r2, r1
 8009ece:	4601      	mov	r1, r0
 8009ed0:	4803      	ldr	r0, [pc, #12]	; (8009ee0 <BSP_SD_ReadBlocks+0x1c>)
 8009ed2:	f7fb fee3 	bl	8005c9c <HAL_SD_ReadBlocks>
 8009ed6:	b100      	cbz	r0, 8009eda <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8009ed8:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8009eda:	b003      	add	sp, #12
 8009edc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ee0:	20008244 	.word	0x20008244

08009ee4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ee4:	b500      	push	{lr}
 8009ee6:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	4613      	mov	r3, r2
 8009eec:	460a      	mov	r2, r1
 8009eee:	4601      	mov	r1, r0
 8009ef0:	4803      	ldr	r0, [pc, #12]	; (8009f00 <BSP_SD_WriteBlocks+0x1c>)
 8009ef2:	f7fb ffd1 	bl	8005e98 <HAL_SD_WriteBlocks>
 8009ef6:	b100      	cbz	r0, 8009efa <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8009ef8:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8009efa:	b003      	add	sp, #12
 8009efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f00:	20008244 	.word	0x20008244

08009f04 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009f04:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009f06:	4803      	ldr	r0, [pc, #12]	; (8009f14 <BSP_SD_GetCardState+0x10>)
 8009f08:	f7fc fc14 	bl	8006734 <HAL_SD_GetCardState>
}
 8009f0c:	3804      	subs	r0, #4
 8009f0e:	bf18      	it	ne
 8009f10:	2001      	movne	r0, #1
 8009f12:	bd08      	pop	{r3, pc}
 8009f14:	20008244 	.word	0x20008244

08009f18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009f18:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <BSP_SD_GetCardInfo+0xc>)
 8009f1e:	f7fc fb89 	bl	8006634 <HAL_SD_GetCardInfo>
}
 8009f22:	bd08      	pop	{r3, pc}
 8009f24:	20008244 	.word	0x20008244

08009f28 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009f28:	b500      	push	{lr}
 8009f2a:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009f32:	f000 f8ed 	bl	800a110 <BSP_PlatformIsDetected>
 8009f36:	b910      	cbnz	r0, 8009f3e <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8009f3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009f42:	b003      	add	sp, #12
 8009f44:	f85d fb04 	ldr.w	pc, [sp], #4

08009f48 <BSP_SD_Init>:
{
 8009f48:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009f4a:	f7ff ffed 	bl	8009f28 <BSP_SD_IsDetected>
 8009f4e:	2801      	cmp	r0, #1
 8009f50:	d002      	beq.n	8009f58 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 8009f52:	2402      	movs	r4, #2
}
 8009f54:	4620      	mov	r0, r4
 8009f56:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8009f58:	4807      	ldr	r0, [pc, #28]	; (8009f78 <BSP_SD_Init+0x30>)
 8009f5a:	f7fc fbfe 	bl	800675a <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8009f5e:	4604      	mov	r4, r0
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d1f7      	bne.n	8009f54 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f68:	4803      	ldr	r0, [pc, #12]	; (8009f78 <BSP_SD_Init+0x30>)
 8009f6a:	f7fc fb75 	bl	8006658 <HAL_SD_ConfigWideBusOperation>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d0f0      	beq.n	8009f54 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8009f72:	2401      	movs	r4, #1
 8009f74:	e7ee      	b.n	8009f54 <BSP_SD_Init+0xc>
 8009f76:	bf00      	nop
 8009f78:	20008244 	.word	0x20008244

08009f7c <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8009f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	b083      	sub	sp, #12
 8009f82:	4606      	mov	r6, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8009f84:	2201      	movs	r2, #1
 8009f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f8a:	483f      	ldr	r0, [pc, #252]	; (800a088 <AudioCodec_init+0x10c>)
 8009f8c:	f7f8 fded 	bl	8002b6a <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8009f90:	2002      	movs	r0, #2
 8009f92:	f7f6 fb87 	bl	80006a4 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8009f96:	4c3d      	ldr	r4, [pc, #244]	; (800a08c <AudioCodec_init+0x110>)
 8009f98:	f04f 0a07 	mov.w	sl, #7
 8009f9c:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 8009fa0:	f04f 0b03 	mov.w	fp, #3
 8009fa4:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009fa8:	4d39      	ldr	r5, [pc, #228]	; (800a090 <AudioCodec_init+0x114>)
 8009faa:	882b      	ldrh	r3, [r5, #0]
 8009fac:	686a      	ldr	r2, [r5, #4]
 8009fae:	9200      	str	r2, [sp, #0]
 8009fb0:	4622      	mov	r2, r4
 8009fb2:	2120      	movs	r1, #32
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7f8 ff2d 	bl	8002e14 <HAL_I2C_Master_Transmit>
 8009fba:	4f36      	ldr	r7, [pc, #216]	; (800a094 <AudioCodec_init+0x118>)
 8009fbc:	7038      	strb	r0, [r7, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8009fbe:	f04f 0801 	mov.w	r8, #1
 8009fc2:	f884 8000 	strb.w	r8, [r4]
	myI2cData[1] = 0x41;
 8009fc6:	2341      	movs	r3, #65	; 0x41
 8009fc8:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009fca:	882b      	ldrh	r3, [r5, #0]
 8009fcc:	686a      	ldr	r2, [r5, #4]
 8009fce:	9200      	str	r2, [sp, #0]
 8009fd0:	4622      	mov	r2, r4
 8009fd2:	2120      	movs	r1, #32
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f7f8 ff1d 	bl	8002e14 <HAL_I2C_Master_Transmit>
 8009fda:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8009fdc:	f04f 0902 	mov.w	r9, #2
 8009fe0:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x00;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009fe8:	882b      	ldrh	r3, [r5, #0]
 8009fea:	686a      	ldr	r2, [r5, #4]
 8009fec:	9200      	str	r2, [sp, #0]
 8009fee:	4622      	mov	r2, r4
 8009ff0:	2120      	movs	r1, #32
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f7f8 ff0e 	bl	8002e14 <HAL_I2C_Master_Transmit>
 8009ff8:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8009ffa:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 8009ffe:	2379      	movs	r3, #121	; 0x79
 800a000:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a002:	882b      	ldrh	r3, [r5, #0]
 800a004:	686a      	ldr	r2, [r5, #4]
 800a006:	9200      	str	r2, [sp, #0]
 800a008:	4622      	mov	r2, r4
 800a00a:	2120      	movs	r1, #32
 800a00c:	4630      	mov	r0, r6
 800a00e:	f7f8 ff01 	bl	8002e14 <HAL_I2C_Master_Transmit>
 800a012:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 800a014:	2304      	movs	r3, #4
 800a016:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 800a018:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a01c:	882b      	ldrh	r3, [r5, #0]
 800a01e:	686a      	ldr	r2, [r5, #4]
 800a020:	9200      	str	r2, [sp, #0]
 800a022:	4622      	mov	r2, r4
 800a024:	2120      	movs	r1, #32
 800a026:	4630      	mov	r0, r6
 800a028:	f7f8 fef4 	bl	8002e14 <HAL_I2C_Master_Transmit>
 800a02c:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 800a02e:	2305      	movs	r3, #5
 800a030:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 800a032:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a036:	882b      	ldrh	r3, [r5, #0]
 800a038:	686a      	ldr	r2, [r5, #4]
 800a03a:	9200      	str	r2, [sp, #0]
 800a03c:	4622      	mov	r2, r4
 800a03e:	2120      	movs	r1, #32
 800a040:	4630      	mov	r0, r6
 800a042:	f7f8 fee7 	bl	8002e14 <HAL_I2C_Master_Transmit>
 800a046:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 800a048:	2306      	movs	r3, #6
 800a04a:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 800a04c:	2310      	movs	r3, #16
 800a04e:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a050:	882b      	ldrh	r3, [r5, #0]
 800a052:	686a      	ldr	r2, [r5, #4]
 800a054:	9200      	str	r2, [sp, #0]
 800a056:	4622      	mov	r2, r4
 800a058:	2120      	movs	r1, #32
 800a05a:	4630      	mov	r0, r6
 800a05c:	f7f8 feda 	bl	8002e14 <HAL_I2C_Master_Transmit>
 800a060:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 800a062:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 800a066:	f884 9001 	strb.w	r9, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a06a:	882b      	ldrh	r3, [r5, #0]
 800a06c:	686a      	ldr	r2, [r5, #4]
 800a06e:	9200      	str	r2, [sp, #0]
 800a070:	4622      	mov	r2, r4
 800a072:	2120      	movs	r1, #32
 800a074:	4630      	mov	r0, r6
 800a076:	f7f8 fecd 	bl	8002e14 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 800a07a:	4b07      	ldr	r3, [pc, #28]	; (800a098 <AudioCodec_init+0x11c>)
 800a07c:	f883 8000 	strb.w	r8, [r3]

}
 800a080:	b003      	add	sp, #12
 800a082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a086:	bf00      	nop
 800a088:	58020800 	.word	0x58020800
 800a08c:	200000e0 	.word	0x200000e0
 800a090:	20000008 	.word	0x20000008
 800a094:	20007697 	.word	0x20007697
 800a098:	200000c8 	.word	0x200000c8

0800a09c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800a09c:	b500      	push	{lr}
 800a09e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a0a0:	4b13      	ldr	r3, [pc, #76]	; (800a0f0 <MX_DMA_Init+0x54>)
 800a0a2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800a0a6:	f042 0201 	orr.w	r2, r2, #1
 800a0aa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800a0ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	4611      	mov	r1, r2
 800a0be:	200b      	movs	r0, #11
 800a0c0:	f7f7 faf2 	bl	80016a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a0c4:	200b      	movs	r0, #11
 800a0c6:	f7f7 fb21 	bl	800170c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	200c      	movs	r0, #12
 800a0d0:	f7f7 faea 	bl	80016a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a0d4:	200c      	movs	r0, #12
 800a0d6:	f7f7 fb19 	bl	800170c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4611      	mov	r1, r2
 800a0de:	200d      	movs	r0, #13
 800a0e0:	f7f7 fae2 	bl	80016a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800a0e4:	200d      	movs	r0, #13
 800a0e6:	f7f7 fb11 	bl	800170c <HAL_NVIC_EnableIRQ>

}
 800a0ea:	b003      	add	sp, #12
 800a0ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0f0:	58024400 	.word	0x58024400

0800a0f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a0f4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a0f6:	4903      	ldr	r1, [pc, #12]	; (800a104 <MX_FATFS_Init+0x10>)
 800a0f8:	4803      	ldr	r0, [pc, #12]	; (800a108 <MX_FATFS_Init+0x14>)
 800a0fa:	f7ff fac1 	bl	8009680 <FATFS_LinkDriver>
 800a0fe:	4b03      	ldr	r3, [pc, #12]	; (800a10c <MX_FATFS_Init+0x18>)
 800a100:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a102:	bd08      	pop	{r3, pc}
 800a104:	2000769c 	.word	0x2000769c
 800a108:	0800d0c0 	.word	0x0800d0c0
 800a10c:	20007698 	.word	0x20007698

0800a110 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a110:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a116:	4804      	ldr	r0, [pc, #16]	; (800a128 <BSP_PlatformIsDetected+0x18>)
 800a118:	f7f8 fd20 	bl	8002b5c <HAL_GPIO_ReadPin>
 800a11c:	b108      	cbz	r0, 800a122 <BSP_PlatformIsDetected+0x12>
    {
        status = SD_NOT_PRESENT;
 800a11e:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 800a120:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 800a122:	2001      	movs	r0, #1
 800a124:	e7fc      	b.n	800a120 <BSP_PlatformIsDetected+0x10>
 800a126:	bf00      	nop
 800a128:	58020800 	.word	0x58020800

0800a12c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a12e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a130:	2300      	movs	r3, #0
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	9302      	str	r3, [sp, #8]
 800a136:	9303      	str	r3, [sp, #12]
 800a138:	9304      	str	r3, [sp, #16]
 800a13a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800a13c:	4b27      	ldr	r3, [pc, #156]	; (800a1dc <HAL_FMC_MspInit+0xb0>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	b10b      	cbz	r3, 800a146 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a142:	b007      	add	sp, #28
 800a144:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 800a146:	4b25      	ldr	r3, [pc, #148]	; (800a1dc <HAL_FMC_MspInit+0xb0>)
 800a148:	2201      	movs	r2, #1
 800a14a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800a14c:	4b24      	ldr	r3, [pc, #144]	; (800a1e0 <HAL_FMC_MspInit+0xb4>)
 800a14e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a152:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a156:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800a15a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a15e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800a166:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a16a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a16c:	2602      	movs	r6, #2
 800a16e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a170:	2503      	movs	r5, #3
 800a172:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a174:	240c      	movs	r4, #12
 800a176:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a178:	a901      	add	r1, sp, #4
 800a17a:	481a      	ldr	r0, [pc, #104]	; (800a1e4 <HAL_FMC_MspInit+0xb8>)
 800a17c:	f7f8 fbfe 	bl	800297c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800a180:	230d      	movs	r3, #13
 800a182:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a184:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a186:	2700      	movs	r7, #0
 800a188:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a18a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a18c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a18e:	a901      	add	r1, sp, #4
 800a190:	4815      	ldr	r0, [pc, #84]	; (800a1e8 <HAL_FMC_MspInit+0xbc>)
 800a192:	f7f8 fbf3 	bl	800297c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800a196:	f248 1337 	movw	r3, #33079	; 0x8137
 800a19a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a19c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a19e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1a0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a1a2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a1a4:	a901      	add	r1, sp, #4
 800a1a6:	4811      	ldr	r0, [pc, #68]	; (800a1ec <HAL_FMC_MspInit+0xc0>)
 800a1a8:	f7f8 fbe8 	bl	800297c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800a1ac:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a1b0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1b2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1b6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a1b8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a1ba:	a901      	add	r1, sp, #4
 800a1bc:	480c      	ldr	r0, [pc, #48]	; (800a1f0 <HAL_FMC_MspInit+0xc4>)
 800a1be:	f7f8 fbdd 	bl	800297c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800a1c2:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a1c6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1c8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ca:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1cc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a1ce:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a1d0:	a901      	add	r1, sp, #4
 800a1d2:	4808      	ldr	r0, [pc, #32]	; (800a1f4 <HAL_FMC_MspInit+0xc8>)
 800a1d4:	f7f8 fbd2 	bl	800297c <HAL_GPIO_Init>
 800a1d8:	e7b3      	b.n	800a142 <HAL_FMC_MspInit+0x16>
 800a1da:	bf00      	nop
 800a1dc:	200000e8 	.word	0x200000e8
 800a1e0:	58024400 	.word	0x58024400
 800a1e4:	58021400 	.word	0x58021400
 800a1e8:	58020800 	.word	0x58020800
 800a1ec:	58021800 	.word	0x58021800
 800a1f0:	58021000 	.word	0x58021000
 800a1f4:	58020c00 	.word	0x58020c00

0800a1f8 <MX_FMC_Init>:
{
 800a1f8:	b500      	push	{lr}
 800a1fa:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a1fc:	4817      	ldr	r0, [pc, #92]	; (800a25c <MX_FMC_Init+0x64>)
 800a1fe:	4b18      	ldr	r3, [pc, #96]	; (800a260 <MX_FMC_Init+0x68>)
 800a200:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a202:	2300      	movs	r3, #0
 800a204:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800a206:	2201      	movs	r2, #1
 800a208:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800a20a:	2208      	movs	r2, #8
 800a20c:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a20e:	2210      	movs	r2, #16
 800a210:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a212:	2240      	movs	r2, #64	; 0x40
 800a214:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800a216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a21a:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a21c:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800a21e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800a222:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a228:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a22a:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800a22c:	2302      	movs	r3, #2
 800a22e:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800a230:	2206      	movs	r2, #6
 800a232:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 800a234:	2104      	movs	r1, #4
 800a236:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 800a238:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800a23a:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 800a23c:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800a23e:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a240:	4469      	add	r1, sp
 800a242:	f7fc faeb 	bl	800681c <HAL_SDRAM_Init>
 800a246:	b930      	cbnz	r0, 800a256 <MX_FMC_Init+0x5e>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800a248:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a24c:	f7f6 fa44 	bl	80006d8 <HAL_SetFMCMemorySwappingConfig>
}
 800a250:	b009      	add	sp, #36	; 0x24
 800a252:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800a256:	f000 fabd 	bl	800a7d4 <Error_Handler>
 800a25a:	e7f5      	b.n	800a248 <MX_FMC_Init+0x50>
 800a25c:	20007b00 	.word	0x20007b00
 800a260:	52004140 	.word	0x52004140

0800a264 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800a264:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a266:	f7ff ff61 	bl	800a12c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a26a:	bd08      	pop	{r3, pc}

0800a26c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800a26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a270:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a272:	2400      	movs	r4, #0
 800a274:	9409      	str	r4, [sp, #36]	; 0x24
 800a276:	940a      	str	r4, [sp, #40]	; 0x28
 800a278:	940b      	str	r4, [sp, #44]	; 0x2c
 800a27a:	940c      	str	r4, [sp, #48]	; 0x30
 800a27c:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a27e:	4b85      	ldr	r3, [pc, #532]	; (800a494 <MX_GPIO_Init+0x228>)
 800a280:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a284:	f042 0210 	orr.w	r2, r2, #16
 800a288:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a28c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a290:	f002 0210 	and.w	r2, r2, #16
 800a294:	9201      	str	r2, [sp, #4]
 800a296:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a298:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a29c:	f042 0204 	orr.w	r2, r2, #4
 800a2a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a2a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a2a8:	f002 0204 	and.w	r2, r2, #4
 800a2ac:	9202      	str	r2, [sp, #8]
 800a2ae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a2b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a2b4:	f042 0220 	orr.w	r2, r2, #32
 800a2b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a2bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a2c0:	f002 0220 	and.w	r2, r2, #32
 800a2c4:	9203      	str	r2, [sp, #12]
 800a2c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a2c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a2cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a2d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a2d8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a2dc:	9204      	str	r2, [sp, #16]
 800a2de:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a2e4:	f042 0201 	orr.w	r2, r2, #1
 800a2e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a2ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a2f0:	f002 0201 	and.w	r2, r2, #1
 800a2f4:	9205      	str	r2, [sp, #20]
 800a2f6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a2fc:	f042 0202 	orr.w	r2, r2, #2
 800a300:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a304:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a308:	f002 0202 	and.w	r2, r2, #2
 800a30c:	9206      	str	r2, [sp, #24]
 800a30e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a310:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a318:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a31c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a320:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a324:	9207      	str	r2, [sp, #28]
 800a326:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a328:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a32c:	f042 0208 	orr.w	r2, r2, #8
 800a330:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a338:	f003 0308 	and.w	r3, r3, #8
 800a33c:	9308      	str	r3, [sp, #32]
 800a33e:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 800a340:	4d55      	ldr	r5, [pc, #340]	; (800a498 <MX_GPIO_Init+0x22c>)
 800a342:	4622      	mov	r2, r4
 800a344:	f244 0140 	movw	r1, #16448	; 0x4040
 800a348:	4628      	mov	r0, r5
 800a34a:	f7f8 fc0e 	bl	8002b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 800a34e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800a4a4 <MX_GPIO_Init+0x238>
 800a352:	4622      	mov	r2, r4
 800a354:	f248 1110 	movw	r1, #33040	; 0x8110
 800a358:	4640      	mov	r0, r8
 800a35a:	f7f8 fc06 	bl	8002b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800a35e:	4f4f      	ldr	r7, [pc, #316]	; (800a49c <MX_GPIO_Init+0x230>)
 800a360:	4622      	mov	r2, r4
 800a362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a366:	4638      	mov	r0, r7
 800a368:	f7f8 fbff 	bl	8002b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800a36c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800a4a8 <MX_GPIO_Init+0x23c>
 800a370:	4622      	mov	r2, r4
 800a372:	f44f 7140 	mov.w	r1, #768	; 0x300
 800a376:	4648      	mov	r0, r9
 800a378:	f7f8 fbf7 	bl	8002b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a37c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a380:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a382:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a384:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a386:	a909      	add	r1, sp, #36	; 0x24
 800a388:	4628      	mov	r0, r5
 800a38a:	f7f8 faf7 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 800a38e:	f244 0340 	movw	r3, #16448	; 0x4040
 800a392:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a394:	2601      	movs	r6, #1
 800a396:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a398:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a39a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a39c:	a909      	add	r1, sp, #36	; 0x24
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f7f8 faec 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a3a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3a8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a3aa:	f8df a100 	ldr.w	sl, [pc, #256]	; 800a4ac <MX_GPIO_Init+0x240>
 800a3ae:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3b2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3b4:	a909      	add	r1, sp, #36	; 0x24
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f7f8 fae0 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a3bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a3c0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a3c2:	2503      	movs	r5, #3
 800a3c4:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3c6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a3c8:	a909      	add	r1, sp, #36	; 0x24
 800a3ca:	4835      	ldr	r0, [pc, #212]	; (800a4a0 <MX_GPIO_Init+0x234>)
 800a3cc:	f7f8 fad6 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a3d0:	2304      	movs	r3, #4
 800a3d2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3d4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3d8:	a909      	add	r1, sp, #36	; 0x24
 800a3da:	4640      	mov	r0, r8
 800a3dc:	f7f8 face 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800a3e0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800a3e4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a3e6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3ea:	a909      	add	r1, sp, #36	; 0x24
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	f7f8 fac5 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8;
 800a3f2:	f248 1310 	movw	r3, #33040	; 0x8110
 800a3f6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3f8:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3fa:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3fc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3fe:	a909      	add	r1, sp, #36	; 0x24
 800a400:	4640      	mov	r0, r8
 800a402:	f7f8 fabb 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a40a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a40c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a410:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a412:	a909      	add	r1, sp, #36	; 0x24
 800a414:	4638      	mov	r0, r7
 800a416:	f7f8 fab1 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a41a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a41e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a420:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a422:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a424:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a426:	a909      	add	r1, sp, #36	; 0x24
 800a428:	4638      	mov	r0, r7
 800a42a:	f7f8 faa7 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5 
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800a42e:	f242 0378 	movw	r3, #8312	; 0x2078
 800a432:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a434:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a436:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a438:	a909      	add	r1, sp, #36	; 0x24
 800a43a:	4638      	mov	r0, r7
 800a43c:	f7f8 fa9e 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 800a440:	f243 0308 	movw	r3, #12296	; 0x3008
 800a444:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a446:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a448:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a44a:	f507 6740 	add.w	r7, r7, #3072	; 0xc00
 800a44e:	a909      	add	r1, sp, #36	; 0x24
 800a450:	4638      	mov	r0, r7
 800a452:	f7f8 fa93 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a456:	23c0      	movs	r3, #192	; 0xc0
 800a458:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a45a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a45c:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a45e:	a909      	add	r1, sp, #36	; 0x24
 800a460:	4638      	mov	r0, r7
 800a462:	f7f8 fa8b 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a466:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a46a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a46c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a46e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a470:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a472:	a909      	add	r1, sp, #36	; 0x24
 800a474:	4648      	mov	r0, r9
 800a476:	f7f8 fa81 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 800a47a:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800a47e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a480:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a482:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a484:	a909      	add	r1, sp, #36	; 0x24
 800a486:	4648      	mov	r0, r9
 800a488:	f7f8 fa78 	bl	800297c <HAL_GPIO_Init>

}
 800a48c:	b00e      	add	sp, #56	; 0x38
 800a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a492:	bf00      	nop
 800a494:	58024400 	.word	0x58024400
 800a498:	58020800 	.word	0x58020800
 800a49c:	58020c00 	.word	0x58020c00
 800a4a0:	58021400 	.word	0x58021400
 800a4a4:	58020400 	.word	0x58020400
 800a4a8:	58020000 	.word	0x58020000
 800a4ac:	11110000 	.word	0x11110000

0800a4b0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a4b0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800a4b2:	4812      	ldr	r0, [pc, #72]	; (800a4fc <MX_I2C2_Init+0x4c>)
 800a4b4:	4b12      	ldr	r3, [pc, #72]	; (800a500 <MX_I2C2_Init+0x50>)
 800a4b6:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x505097F4;
 800a4b8:	4b12      	ldr	r3, [pc, #72]	; (800a504 <MX_I2C2_Init+0x54>)
 800a4ba:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a4c4:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a4c6:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a4c8:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a4ca:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a4cc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a4ce:	f7f8 fc43 	bl	8002d58 <HAL_I2C_Init>
 800a4d2:	b950      	cbnz	r0, 800a4ea <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4809      	ldr	r0, [pc, #36]	; (800a4fc <MX_I2C2_Init+0x4c>)
 800a4d8:	f7f8 fd5a 	bl	8002f90 <HAL_I2CEx_ConfigAnalogFilter>
 800a4dc:	b940      	cbnz	r0, 800a4f0 <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a4de:	2100      	movs	r1, #0
 800a4e0:	4806      	ldr	r0, [pc, #24]	; (800a4fc <MX_I2C2_Init+0x4c>)
 800a4e2:	f7f8 fd83 	bl	8002fec <HAL_I2CEx_ConfigDigitalFilter>
 800a4e6:	b930      	cbnz	r0, 800a4f6 <MX_I2C2_Init+0x46>
  {
    Error_Handler();
  }

}
 800a4e8:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a4ea:	f000 f973 	bl	800a7d4 <Error_Handler>
 800a4ee:	e7f1      	b.n	800a4d4 <MX_I2C2_Init+0x24>
    Error_Handler();
 800a4f0:	f000 f970 	bl	800a7d4 <Error_Handler>
 800a4f4:	e7f3      	b.n	800a4de <MX_I2C2_Init+0x2e>
    Error_Handler();
 800a4f6:	f000 f96d 	bl	800a7d4 <Error_Handler>
}
 800a4fa:	e7f5      	b.n	800a4e8 <MX_I2C2_Init+0x38>
 800a4fc:	20007b34 	.word	0x20007b34
 800a500:	40005800 	.word	0x40005800
 800a504:	505097f4 	.word	0x505097f4

0800a508 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a508:	b510      	push	{r4, lr}
 800a50a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a50c:	2300      	movs	r3, #0
 800a50e:	9303      	str	r3, [sp, #12]
 800a510:	9304      	str	r3, [sp, #16]
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	9306      	str	r3, [sp, #24]
 800a516:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 800a518:	6802      	ldr	r2, [r0, #0]
 800a51a:	4b15      	ldr	r3, [pc, #84]	; (800a570 <HAL_I2C_MspInit+0x68>)
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d001      	beq.n	800a524 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a520:	b008      	add	sp, #32
 800a522:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a524:	4c13      	ldr	r4, [pc, #76]	; (800a574 <HAL_I2C_MspInit+0x6c>)
 800a526:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a52a:	f043 0302 	orr.w	r3, r3, #2
 800a52e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a532:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a53e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a542:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a544:	2312      	movs	r3, #18
 800a546:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a548:	2304      	movs	r3, #4
 800a54a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a54c:	a903      	add	r1, sp, #12
 800a54e:	480a      	ldr	r0, [pc, #40]	; (800a578 <HAL_I2C_MspInit+0x70>)
 800a550:	f7f8 fa14 	bl	800297c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a554:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a55c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800a560:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	9b02      	ldr	r3, [sp, #8]
}
 800a56c:	e7d8      	b.n	800a520 <HAL_I2C_MspInit+0x18>
 800a56e:	bf00      	nop
 800a570:	40005800 	.word	0x40005800
 800a574:	58024400 	.word	0x58024400
 800a578:	58020400 	.word	0x58020400

0800a57c <CycleCounterInit>:
}
/* helper function to initialize measuring unit (cycle counter) */
static void CycleCounterInit( void )
{
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800a57c:	4a0f      	ldr	r2, [pc, #60]	; (800a5bc <CycleCounterInit+0x40>)
 800a57e:	68d3      	ldr	r3, [r2, #12]
 800a580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a584:	60d3      	str	r3, [r2, #12]

  /* Unlock DWT registers */
  if ((*(uint32_t*)0xE0001FB4) & 1)
 800a586:	4b0e      	ldr	r3, [pc, #56]	; (800a5c0 <CycleCounterInit+0x44>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f013 0f01 	tst.w	r3, #1
 800a58e:	d002      	beq.n	800a596 <CycleCounterInit+0x1a>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 800a590:	4b0c      	ldr	r3, [pc, #48]	; (800a5c4 <CycleCounterInit+0x48>)
 800a592:	4a0d      	ldr	r2, [pc, #52]	; (800a5c8 <CycleCounterInit+0x4c>)
 800a594:	601a      	str	r2, [r3, #0]

  /* clear the cycle counter */
  DWT->CYCCNT = 0;
 800a596:	4a0d      	ldr	r2, [pc, #52]	; (800a5cc <CycleCounterInit+0x50>)
 800a598:	2300      	movs	r3, #0
 800a59a:	6053      	str	r3, [r2, #4]

  /* start the cycle counter */
  DWT->CTRL = 0x40000001;
 800a59c:	490c      	ldr	r1, [pc, #48]	; (800a5d0 <CycleCounterInit+0x54>)
 800a59e:	6011      	str	r1, [r2, #0]

  for (int i = 0; i < 4; i++)
 800a5a0:	e009      	b.n	800a5b6 <CycleCounterInit+0x3a>
  {
	  cycleCountAverages[i][0] = 0.0f;
 800a5a2:	0059      	lsls	r1, r3, #1
 800a5a4:	4419      	add	r1, r3
 800a5a6:	0088      	lsls	r0, r1, #2
 800a5a8:	4a0a      	ldr	r2, [pc, #40]	; (800a5d4 <CycleCounterInit+0x58>)
 800a5aa:	4402      	add	r2, r0
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	6011      	str	r1, [r2, #0]
	  cycleCountAverages[i][1] = 0.0f;
 800a5b0:	6051      	str	r1, [r2, #4]
	  cycleCountAverages[i][2] = 0.0f;
 800a5b2:	6091      	str	r1, [r2, #8]
  for (int i = 0; i < 4; i++)
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	ddf3      	ble.n	800a5a2 <CycleCounterInit+0x26>
  }
}
 800a5ba:	4770      	bx	lr
 800a5bc:	e000edf0 	.word	0xe000edf0
 800a5c0:	e0001fb4 	.word	0xe0001fb4
 800a5c4:	e0001fb0 	.word	0xe0001fb0
 800a5c8:	c5acce55 	.word	0xc5acce55
 800a5cc:	e0001000 	.word	0xe0001000
 800a5d0:	40000001 	.word	0x40000001
 800a5d4:	20007f80 	.word	0x20007f80

0800a5d8 <HAL_ADC_ConvCpltCallback>:
	if (hadc == &hadc3)
 800a5d8:	4b1f      	ldr	r3, [pc, #124]	; (800a658 <HAL_ADC_ConvCpltCallback+0x80>)
 800a5da:	4283      	cmp	r3, r0
 800a5dc:	d036      	beq.n	800a64c <HAL_ADC_ConvCpltCallback+0x74>
 800a5de:	4770      	bx	lr
				int tempInt = ADC3_values[(i*NUM_EXT_ADC_CHANNELS) + j];
 800a5e0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800a5e4:	441a      	add	r2, r3
 800a5e6:	491d      	ldr	r1, [pc, #116]	; (800a65c <HAL_ADC_ConvCpltCallback+0x84>)
 800a5e8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800a5ec:	ee07 2a90 	vmov	s15, r2
				audioADCInputs[j][currentADC3BufferPos] = ((float)(tempInt - TWO_TO_15) * INV_TWO_TO_15);
 800a5f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5f4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a660 <HAL_ADC_ConvCpltCallback+0x88>
 800a5f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5fc:	4a19      	ldr	r2, [pc, #100]	; (800a664 <HAL_ADC_ConvCpltCallback+0x8c>)
 800a5fe:	6811      	ldr	r1, [r2, #0]
 800a600:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a668 <HAL_ADC_ConvCpltCallback+0x90>
 800a604:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a608:	eb01 21c3 	add.w	r1, r1, r3, lsl #11
 800a60c:	4a17      	ldr	r2, [pc, #92]	; (800a66c <HAL_ADC_ConvCpltCallback+0x94>)
 800a60e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a612:	edc2 7a00 	vstr	s15, [r2]
			for (int j = 0; j < NUM_EXT_ADC_CHANNELS; j++)
 800a616:	3301      	adds	r3, #1
 800a618:	2b02      	cmp	r3, #2
 800a61a:	dde1      	ble.n	800a5e0 <HAL_ADC_ConvCpltCallback+0x8>
			currentADC3BufferPos++;
 800a61c:	4911      	ldr	r1, [pc, #68]	; (800a664 <HAL_ADC_ConvCpltCallback+0x8c>)
 800a61e:	e9d1 2300 	ldrd	r2, r3, [r1]
 800a622:	1c54      	adds	r4, r2, #1
 800a624:	f143 0500 	adc.w	r5, r3, #0
 800a628:	e9c1 4500 	strd	r4, r5, [r1]
			if (currentADC3BufferPos >= 2048)
 800a62c:	2d00      	cmp	r5, #0
 800a62e:	bf08      	it	eq
 800a630:	f5b4 6f00 	cmpeq.w	r4, #2048	; 0x800
 800a634:	d303      	bcc.n	800a63e <HAL_ADC_ConvCpltCallback+0x66>
				currentADC3BufferPos = 0;
 800a636:	2400      	movs	r4, #0
 800a638:	2500      	movs	r5, #0
 800a63a:	e9c1 4500 	strd	r4, r5, [r1]
		for (int i = 0; i < AUDIO_FRAME_SIZE; i++)
 800a63e:	3001      	adds	r0, #1
 800a640:	281f      	cmp	r0, #31
 800a642:	dc01      	bgt.n	800a648 <HAL_ADC_ConvCpltCallback+0x70>
			for (int j = 0; j < NUM_EXT_ADC_CHANNELS; j++)
 800a644:	2300      	movs	r3, #0
 800a646:	e7e7      	b.n	800a618 <HAL_ADC_ConvCpltCallback+0x40>
}
 800a648:	bc30      	pop	{r4, r5}
 800a64a:	4770      	bx	lr
		for (int i = 0; i < AUDIO_FRAME_SIZE; i++)
 800a64c:	2000      	movs	r0, #0
 800a64e:	281f      	cmp	r0, #31
 800a650:	dc01      	bgt.n	800a656 <HAL_ADC_ConvCpltCallback+0x7e>
{
 800a652:	b430      	push	{r4, r5}
 800a654:	e7f6      	b.n	800a644 <HAL_ADC_ConvCpltCallback+0x6c>
 800a656:	4770      	bx	lr
 800a658:	200001d4 	.word	0x200001d4
 800a65c:	38000000 	.word	0x38000000
 800a660:	47000000 	.word	0x47000000
 800a664:	200000d8 	.word	0x200000d8
 800a668:	37fffffc 	.word	0x37fffffc
 800a66c:	20001684 	.word	0x20001684

0800a670 <HAL_ADC_ConvHalfCpltCallback>:
}
 800a670:	4770      	bx	lr
	...

0800a674 <SDRAM_Initialization_sequence>:
{
 800a674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a678:	b087      	sub	sp, #28
    __IO uint32_t tmpmrd = 0;
 800a67a:	2600      	movs	r6, #0
 800a67c:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800a67e:	2501      	movs	r5, #1
 800a680:	9501      	str	r5, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a682:	2710      	movs	r7, #16
 800a684:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 800a686:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800a688:	9604      	str	r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a68a:	4c25      	ldr	r4, [pc, #148]	; (800a720 <SDRAM_Initialization_sequence+0xac>)
 800a68c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a690:	a901      	add	r1, sp, #4
 800a692:	4620      	mov	r0, r4
 800a694:	f7fc f8ea 	bl	800686c <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800a698:	4628      	mov	r0, r5
 800a69a:	f7f6 f803 	bl	80006a4 <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800a69e:	2302      	movs	r3, #2
 800a6a0:	9301      	str	r3, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a6a2:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 800a6a4:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800a6a6:	9604      	str	r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a6a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6ac:	a901      	add	r1, sp, #4
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f7fc f8dc 	bl	800686c <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800a6b4:	f240 2322 	movw	r3, #546	; 0x222
 800a6b8:	9305      	str	r3, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800a6ba:	2304      	movs	r3, #4
 800a6bc:	9301      	str	r3, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a6be:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 800a6c0:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 800a6c2:	9b05      	ldr	r3, [sp, #20]
 800a6c4:	9304      	str	r3, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a6c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6ca:	a901      	add	r1, sp, #4
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f7fc f8cd 	bl	800686c <HAL_SDRAM_SendCommand>
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a6d2:	f04f 0903 	mov.w	r9, #3
 800a6d6:	f8cd 9004 	str.w	r9, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a6da:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 8;
 800a6dc:	f04f 0808 	mov.w	r8, #8
 800a6e0:	f8cd 800c 	str.w	r8, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800a6e4:	9604      	str	r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a6e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6ea:	a901      	add	r1, sp, #4
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7fc f8bd 	bl	800686c <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7f5 ffd6 	bl	80006a4 <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a6f8:	f8cd 9004 	str.w	r9, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a6fc:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 8;
 800a6fe:	f8cd 800c 	str.w	r8, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800a702:	9604      	str	r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a708:	a901      	add	r1, sp, #4
 800a70a:	4620      	mov	r0, r4
 800a70c:	f7fc f8ae 	bl	800686c <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800a710:	f240 5169 	movw	r1, #1385	; 0x569
 800a714:	4620      	mov	r0, r4
 800a716:	f7fc f8cc 	bl	80068b2 <HAL_SDRAM_ProgramRefreshRate>
}
 800a71a:	b007      	add	sp, #28
 800a71c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a720:	20007b00 	.word	0x20007b00

0800a724 <randomNumber>:
float randomNumber(void) {
 800a724:	b500      	push	{lr}
 800a726:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800a728:	a901      	add	r1, sp, #4
 800a72a:	4807      	ldr	r0, [pc, #28]	; (800a748 <randomNumber+0x24>)
 800a72c:	f7fa fccd 	bl	80050ca <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800a730:	eddd 7a01 	vldr	s15, [sp, #4]
 800a734:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800a738:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800a74c <randomNumber+0x28>
 800a73c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a740:	b003      	add	sp, #12
 800a742:	f85d fb04 	ldr.w	pc, [sp], #4
 800a746:	bf00      	nop
 800a748:	20008010 	.word	0x20008010
 800a74c:	2f80000d 	.word	0x2f80000d

0800a750 <MPU_Conf>:
{
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	b084      	sub	sp, #16
	  HAL_MPU_Disable();
 800a754:	f7f6 fffe 	bl	8001754 <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a758:	2401      	movs	r4, #1
 800a75a:	f88d 4000 	strb.w	r4, [sp]
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800a75e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a762:	9301      	str	r3, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800a764:	2311      	movs	r3, #17
 800a766:	f88d 3008 	strb.w	r3, [sp, #8]
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800a76a:	2603      	movs	r6, #3
 800a76c:	f88d 600b 	strb.w	r6, [sp, #11]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800a770:	f88d 400a 	strb.w	r4, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a774:	2500      	movs	r5, #0
 800a776:	f88d 500e 	strb.w	r5, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800a77a:	f88d 500f 	strb.w	r5, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800a77e:	f88d 500d 	strb.w	r5, [sp, #13]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800a782:	f88d 5001 	strb.w	r5, [sp, #1]
	  MPU_InitStruct.SubRegionDisable = 0x00;
 800a786:	f88d 5009 	strb.w	r5, [sp, #9]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a78a:	f88d 400c 	strb.w	r4, [sp, #12]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a78e:	4668      	mov	r0, sp
 800a790:	f7f7 f802 	bl	8001798 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a794:	f88d 4000 	strb.w	r4, [sp]
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 800a798:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800a79c:	9301      	str	r3, [sp, #4]
	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800a79e:	230f      	movs	r3, #15
 800a7a0:	f88d 3008 	strb.w	r3, [sp, #8]
	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800a7a4:	f88d 600b 	strb.w	r6, [sp, #11]
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800a7a8:	f88d 400a 	strb.w	r4, [sp, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800a7ac:	f88d 400e 	strb.w	r4, [sp, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800a7b0:	f88d 400f 	strb.w	r4, [sp, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800a7b4:	f88d 400d 	strb.w	r4, [sp, #13]
	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800a7b8:	f88d 4001 	strb.w	r4, [sp, #1]
	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 800a7bc:	f88d 5009 	strb.w	r5, [sp, #9]
	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800a7c0:	f88d 500c 	strb.w	r5, [sp, #12]
	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a7c4:	4668      	mov	r0, sp
 800a7c6:	f7f6 ffe7 	bl	8001798 <HAL_MPU_ConfigRegion>
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800a7ca:	2004      	movs	r0, #4
 800a7cc:	f7f6 ffd2 	bl	8001774 <HAL_MPU_Enable>
}
 800a7d0:	b004      	add	sp, #16
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}

0800a7d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a7d4:	e7fe      	b.n	800a7d4 <Error_Handler>
	...

0800a7d8 <SystemClock_Config>:
{
 800a7d8:	b500      	push	{lr}
 800a7da:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a7dc:	224c      	movs	r2, #76	; 0x4c
 800a7de:	2100      	movs	r1, #0
 800a7e0:	a839      	add	r0, sp, #228	; 0xe4
 800a7e2:	f001 fa59 	bl	800bc98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	a831      	add	r0, sp, #196	; 0xc4
 800a7ec:	f001 fa54 	bl	800bc98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a7f0:	22bc      	movs	r2, #188	; 0xbc
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	a802      	add	r0, sp, #8
 800a7f6:	f001 fa4f 	bl	800bc98 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a7fa:	2002      	movs	r0, #2
 800a7fc:	f7f8 fc22 	bl	8003044 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a800:	2300      	movs	r3, #0
 800a802:	9301      	str	r3, [sp, #4]
 800a804:	4b3a      	ldr	r3, [pc, #232]	; (800a8f0 <SystemClock_Config+0x118>)
 800a806:	699a      	ldr	r2, [r3, #24]
 800a808:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a80c:	619a      	str	r2, [r3, #24]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a814:	9301      	str	r3, [sp, #4]
 800a816:	4b37      	ldr	r3, [pc, #220]	; (800a8f4 <SystemClock_Config+0x11c>)
 800a818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81a:	f042 0201 	orr.w	r2, r2, #1
 800a81e:	62da      	str	r2, [r3, #44]	; 0x2c
 800a820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a82a:	4b31      	ldr	r3, [pc, #196]	; (800a8f0 <SystemClock_Config+0x118>)
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a832:	d0fa      	beq.n	800a82a <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a834:	4a30      	ldr	r2, [pc, #192]	; (800a8f8 <SystemClock_Config+0x120>)
 800a836:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800a838:	f023 0303 	bic.w	r3, r3, #3
 800a83c:	f043 0302 	orr.w	r3, r3, #2
 800a840:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a842:	2321      	movs	r3, #33	; 0x21
 800a844:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a84a:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a84c:	2301      	movs	r3, #1
 800a84e:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a850:	2302      	movs	r3, #2
 800a852:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a854:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a856:	2205      	movs	r2, #5
 800a858:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a85a:	22c0      	movs	r2, #192	; 0xc0
 800a85c:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a85e:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a860:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a862:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800a864:	2308      	movs	r3, #8
 800a866:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a868:	2300      	movs	r3, #0
 800a86a:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a86c:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a86e:	a839      	add	r0, sp, #228	; 0xe4
 800a870:	f7f8 fc12 	bl	8003098 <HAL_RCC_OscConfig>
 800a874:	2800      	cmp	r0, #0
 800a876:	d135      	bne.n	800a8e4 <SystemClock_Config+0x10c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a878:	233f      	movs	r3, #63	; 0x3f
 800a87a:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a87c:	2303      	movs	r3, #3
 800a87e:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a880:	2300      	movs	r3, #0
 800a882:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a884:	2308      	movs	r3, #8
 800a886:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a888:	2340      	movs	r3, #64	; 0x40
 800a88a:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a88c:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a88e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a892:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a894:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a896:	2104      	movs	r1, #4
 800a898:	a831      	add	r0, sp, #196	; 0xc4
 800a89a:	f7f8 ffeb 	bl	8003874 <HAL_RCC_ClockConfig>
 800a89e:	bb18      	cbnz	r0, 800a8e8 <SystemClock_Config+0x110>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_RNG
 800a8a0:	4b16      	ldr	r3, [pc, #88]	; (800a8fc <SystemClock_Config+0x124>)
 800a8a2:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800a8a4:	2319      	movs	r3, #25
 800a8a6:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800a8a8:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800a8ac:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800a8ae:	2307      	movs	r3, #7
 800a8b0:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800a8b6:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800a8bc:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800a8be:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800a8c0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800a8c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a8c6:	9215      	str	r2, [sp, #84]	; 0x54
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	9217      	str	r2, [sp, #92]	; 0x5c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800a8cc:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800a8ce:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800a8d0:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800a8d2:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800a8d4:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a8d6:	a802      	add	r0, sp, #8
 800a8d8:	f7f9 fa68 	bl	8003dac <HAL_RCCEx_PeriphCLKConfig>
 800a8dc:	b930      	cbnz	r0, 800a8ec <SystemClock_Config+0x114>
}
 800a8de:	b04d      	add	sp, #308	; 0x134
 800a8e0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a8e4:	f7ff ff76 	bl	800a7d4 <Error_Handler>
    Error_Handler();
 800a8e8:	f7ff ff74 	bl	800a7d4 <Error_Handler>
    Error_Handler();
 800a8ec:	f7ff ff72 	bl	800a7d4 <Error_Handler>
 800a8f0:	58024800 	.word	0x58024800
 800a8f4:	58000400 	.word	0x58000400
 800a8f8:	58024400 	.word	0x58024400
 800a8fc:	010b1109 	.word	0x010b1109

0800a900 <main>:
{
 800a900:	b510      	push	{r4, lr}
  MPU_Conf();
 800a902:	f7ff ff25 	bl	800a750 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 800a906:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a90a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a90e:	4b42      	ldr	r3, [pc, #264]	; (800aa18 <main+0x118>)
 800a910:	2100      	movs	r1, #0
 800a912:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a916:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a91a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a91e:	695a      	ldr	r2, [r3, #20]
 800a920:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a924:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a926:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a92a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800a92e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a932:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800a936:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a93a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800a93e:	e00f      	b.n	800a960 <main+0x60>
      } while (ways-- != 0U);
 800a940:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a942:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800a946:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800a94a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800a94e:	4932      	ldr	r1, [pc, #200]	; (800aa18 <main+0x118>)
 800a950:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800a954:	1e53      	subs	r3, r2, #1
 800a956:	2a00      	cmp	r2, #0
 800a958:	d1f2      	bne.n	800a940 <main+0x40>
    } while(sets-- != 0U);
 800a95a:	1e43      	subs	r3, r0, #1
 800a95c:	b118      	cbz	r0, 800a966 <main+0x66>
 800a95e:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a960:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800a964:	e7ed      	b.n	800a942 <main+0x42>
 800a966:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a96a:	694b      	ldr	r3, [r1, #20]
 800a96c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a970:	614b      	str	r3, [r1, #20]
 800a972:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a976:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800a97a:	f7f5 fe53 	bl	8000624 <HAL_Init>
  SystemClock_Config();
 800a97e:	f7ff ff2b 	bl	800a7d8 <SystemClock_Config>
  MX_GPIO_Init();
 800a982:	f7ff fc73 	bl	800a26c <MX_GPIO_Init>
  MX_BDMA_Init();
 800a986:	f7ff fa81 	bl	8009e8c <MX_BDMA_Init>
  MX_DMA_Init();
 800a98a:	f7ff fb87 	bl	800a09c <MX_DMA_Init>
  MX_FMC_Init();
 800a98e:	f7ff fc33 	bl	800a1f8 <MX_FMC_Init>
  MX_ADC1_Init();
 800a992:	f7fe fe7b 	bl	800968c <MX_ADC1_Init>
  MX_ADC3_Init();
 800a996:	f7fe ff19 	bl	80097cc <MX_ADC3_Init>
  MX_I2C2_Init();
 800a99a:	f7ff fd89 	bl	800a4b0 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 800a99e:	f000 f9e9 	bl	800ad74 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800a9a2:	f000 fa61 	bl	800ae68 <MX_SPI1_Init>
  MX_FATFS_Init();
 800a9a6:	f7ff fba5 	bl	800a0f4 <MX_FATFS_Init>
  MX_SAI1_Init();
 800a9aa:	f000 f86f 	bl	800aa8c <MX_SAI1_Init>
  MX_TIM3_Init();
 800a9ae:	f000 fca9 	bl	800b304 <MX_TIM3_Init>
  MX_TIM4_Init();
 800a9b2:	f000 fcfd 	bl	800b3b0 <MX_TIM4_Init>
  MX_TIM7_Init();
 800a9b6:	f000 fb59 	bl	800b06c <MX_TIM7_Init>
  MX_TIM1_Init();
 800a9ba:	f000 fc41 	bl	800b240 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 800a9be:	f000 fd5f 	bl	800b480 <MX_USART6_UART_Init>
  MX_RNG_Init();
 800a9c2:	f000 f837 	bl	800aa34 <MX_RNG_Init>
  CycleCounterInit();
 800a9c6:	f7ff fdd9 	bl	800a57c <CycleCounterInit>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a9d0:	4812      	ldr	r0, [pc, #72]	; (800aa1c <main+0x11c>)
 800a9d2:	f7f8 f8ca 	bl	8002b6a <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800a9d6:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800a9da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800a9de:	eee1 3a10 	vmsr	fpscr, r3
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 800a9e2:	2206      	movs	r2, #6
 800a9e4:	490e      	ldr	r1, [pc, #56]	; (800aa20 <main+0x120>)
 800a9e6:	480f      	ldr	r0, [pc, #60]	; (800aa24 <main+0x124>)
 800a9e8:	f7f6 fb04 	bl	8000ff4 <HAL_ADC_Start_DMA>
 800a9ec:	b108      	cbz	r0, 800a9f2 <main+0xf2>
	  Error_Handler();
 800a9ee:	f7ff fef1 	bl	800a7d4 <Error_Handler>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	2140      	movs	r1, #64	; 0x40
 800a9f6:	4809      	ldr	r0, [pc, #36]	; (800aa1c <main+0x11c>)
 800a9f8:	f7f8 f8b7 	bl	8002b6a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800a9fc:	200a      	movs	r0, #10
 800a9fe:	f7f5 fe51 	bl	80006a4 <HAL_Delay>
  SDRAM_Initialization_sequence();
 800aa02:	f7ff fe37 	bl	800a674 <SDRAM_Initialization_sequence>
  HAL_Delay(100);
 800aa06:	2064      	movs	r0, #100	; 0x64
 800aa08:	f7f5 fe4c 	bl	80006a4 <HAL_Delay>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800aa0c:	4a06      	ldr	r2, [pc, #24]	; (800aa28 <main+0x128>)
 800aa0e:	4907      	ldr	r1, [pc, #28]	; (800aa2c <main+0x12c>)
 800aa10:	4807      	ldr	r0, [pc, #28]	; (800aa30 <main+0x130>)
 800aa12:	f7ff f823 	bl	8009a5c <audioInit>
 800aa16:	e7fe      	b.n	800aa16 <main+0x116>
 800aa18:	e000ed00 	.word	0xe000ed00
 800aa1c:	58020800 	.word	0x58020800
 800aa20:	30000400 	.word	0x30000400
 800aa24:	20000170 	.word	0x20000170
 800aa28:	20008024 	.word	0x20008024
 800aa2c:	200081ac 	.word	0x200081ac
 800aa30:	20007b34 	.word	0x20007b34

0800aa34 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800aa34:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 800aa36:	4806      	ldr	r0, [pc, #24]	; (800aa50 <MX_RNG_Init+0x1c>)
 800aa38:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <MX_RNG_Init+0x20>)
 800aa3a:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800aa40:	f7fa fb08 	bl	8005054 <HAL_RNG_Init>
 800aa44:	b900      	cbnz	r0, 800aa48 <MX_RNG_Init+0x14>
  {
    Error_Handler();
  }

}
 800aa46:	bd08      	pop	{r3, pc}
    Error_Handler();
 800aa48:	f7ff fec4 	bl	800a7d4 <Error_Handler>
}
 800aa4c:	e7fb      	b.n	800aa46 <MX_RNG_Init+0x12>
 800aa4e:	bf00      	nop
 800aa50:	20008010 	.word	0x20008010
 800aa54:	48021800 	.word	0x48021800

0800aa58 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 800aa58:	6802      	ldr	r2, [r0, #0]
 800aa5a:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <HAL_RNG_MspInit+0x2c>)
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d000      	beq.n	800aa62 <HAL_RNG_MspInit+0xa>
 800aa60:	4770      	bx	lr
{
 800aa62:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800aa64:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <HAL_RNG_MspInit+0x30>)
 800aa66:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800aa6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa6e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800aa72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800aa76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7a:	9301      	str	r3, [sp, #4]
 800aa7c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800aa7e:	b002      	add	sp, #8
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	48021800 	.word	0x48021800
 800aa88:	58024400 	.word	0x58024400

0800aa8c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800aa8c:	b508      	push	{r3, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 800aa8e:	4818      	ldr	r0, [pc, #96]	; (800aaf0 <MX_SAI1_Init+0x64>)
 800aa90:	4b18      	ldr	r3, [pc, #96]	; (800aaf4 <MX_SAI1_Init+0x68>)
 800aa92:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800aa94:	2100      	movs	r1, #0
 800aa96:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800aa98:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800aa9a:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800aa9c:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800aaa2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aaa6:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800aaa8:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800aaaa:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800aaac:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800aaae:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800aab0:	2302      	movs	r3, #2
 800aab2:	461a      	mov	r2, r3
 800aab4:	f7fa fe0e 	bl	80056d4 <HAL_SAI_InitProtocol>
 800aab8:	b998      	cbnz	r0, 800aae2 <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800aaba:	480f      	ldr	r0, [pc, #60]	; (800aaf8 <MX_SAI1_Init+0x6c>)
 800aabc:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <MX_SAI1_Init+0x70>)
 800aabe:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800aac0:	2303      	movs	r3, #3
 800aac2:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800aac4:	2301      	movs	r3, #1
 800aac6:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800aac8:	2100      	movs	r1, #0
 800aaca:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800aacc:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800aace:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800aad0:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800aad2:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800aad4:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800aad6:	2302      	movs	r3, #2
 800aad8:	461a      	mov	r2, r3
 800aada:	f7fa fdfb 	bl	80056d4 <HAL_SAI_InitProtocol>
 800aade:	b918      	cbnz	r0, 800aae8 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
  }

}
 800aae0:	bd08      	pop	{r3, pc}
    Error_Handler();
 800aae2:	f7ff fe77 	bl	800a7d4 <Error_Handler>
 800aae6:	e7e8      	b.n	800aaba <MX_SAI1_Init+0x2e>
    Error_Handler();
 800aae8:	f7ff fe74 	bl	800a7d4 <Error_Handler>
}
 800aaec:	e7f8      	b.n	800aae0 <MX_SAI1_Init+0x54>
 800aaee:	bf00      	nop
 800aaf0:	200081ac 	.word	0x200081ac
 800aaf4:	40015804 	.word	0x40015804
 800aaf8:	20008024 	.word	0x20008024
 800aafc:	40015824 	.word	0x40015824

0800ab00 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	b088      	sub	sp, #32
 800ab06:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800ab08:	6802      	ldr	r2, [r0, #0]
 800ab0a:	4b55      	ldr	r3, [pc, #340]	; (800ac60 <HAL_SAI_MspInit+0x160>)
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d006      	beq.n	800ab1e <HAL_SAI_MspInit+0x1e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800ab10:	6822      	ldr	r2, [r4, #0]
 800ab12:	4b54      	ldr	r3, [pc, #336]	; (800ac64 <HAL_SAI_MspInit+0x164>)
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d05a      	beq.n	800abce <HAL_SAI_MspInit+0xce>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 800ab18:	b008      	add	sp, #32
 800ab1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SAI1_client == 0)
 800ab1e:	4b52      	ldr	r3, [pc, #328]	; (800ac68 <HAL_SAI_MspInit+0x168>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	b963      	cbnz	r3, 800ab3e <HAL_SAI_MspInit+0x3e>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800ab24:	4a51      	ldr	r2, [pc, #324]	; (800ac6c <HAL_SAI_MspInit+0x16c>)
 800ab26:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800ab2a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800ab2e:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800ab32:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800ab36:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800ab3a:	9201      	str	r2, [sp, #4]
 800ab3c:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 800ab3e:	3301      	adds	r3, #1
 800ab40:	4a49      	ldr	r2, [pc, #292]	; (800ac68 <HAL_SAI_MspInit+0x168>)
 800ab42:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 800ab44:	2324      	movs	r3, #36	; 0x24
 800ab46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab48:	2602      	movs	r6, #2
 800ab4a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab4c:	2500      	movs	r5, #0
 800ab4e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab50:	2303      	movs	r3, #3
 800ab52:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800ab54:	f04f 0806 	mov.w	r8, #6
 800ab58:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ab5c:	4f44      	ldr	r7, [pc, #272]	; (800ac70 <HAL_SAI_MspInit+0x170>)
 800ab5e:	a903      	add	r1, sp, #12
 800ab60:	4638      	mov	r0, r7
 800ab62:	f7f7 ff0b 	bl	800297c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800ab66:	2350      	movs	r3, #80	; 0x50
 800ab68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab6a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab6c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ab6e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800ab70:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ab74:	a903      	add	r1, sp, #12
 800ab76:	4638      	mov	r0, r7
 800ab78:	f7f7 ff00 	bl	800297c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800ab7c:	483d      	ldr	r0, [pc, #244]	; (800ac74 <HAL_SAI_MspInit+0x174>)
 800ab7e:	4b3e      	ldr	r3, [pc, #248]	; (800ac78 <HAL_SAI_MspInit+0x178>)
 800ab80:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800ab82:	2357      	movs	r3, #87	; 0x57
 800ab84:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab86:	2340      	movs	r3, #64	; 0x40
 800ab88:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab8a:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800ab8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab90:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ab92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab96:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ab98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab9c:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800ab9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aba2:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800aba4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800aba8:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800abaa:	2304      	movs	r3, #4
 800abac:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800abae:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800abb0:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800abb2:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800abb4:	f7f7 f82e 	bl	8001c14 <HAL_DMA_Init>
 800abb8:	b930      	cbnz	r0, 800abc8 <HAL_SAI_MspInit+0xc8>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800abba:	4b2e      	ldr	r3, [pc, #184]	; (800ac74 <HAL_SAI_MspInit+0x174>)
 800abbc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800abc0:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800abc2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800abc6:	e7a3      	b.n	800ab10 <HAL_SAI_MspInit+0x10>
      Error_Handler();
 800abc8:	f7ff fe04 	bl	800a7d4 <Error_Handler>
 800abcc:	e7f5      	b.n	800abba <HAL_SAI_MspInit+0xba>
      if (SAI1_client == 0)
 800abce:	4b26      	ldr	r3, [pc, #152]	; (800ac68 <HAL_SAI_MspInit+0x168>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	b963      	cbnz	r3, 800abee <HAL_SAI_MspInit+0xee>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800abd4:	4a25      	ldr	r2, [pc, #148]	; (800ac6c <HAL_SAI_MspInit+0x16c>)
 800abd6:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800abda:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800abde:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800abe2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800abe6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800abea:	9202      	str	r2, [sp, #8]
 800abec:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 800abee:	3301      	adds	r3, #1
 800abf0:	4a1d      	ldr	r2, [pc, #116]	; (800ac68 <HAL_SAI_MspInit+0x168>)
 800abf2:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800abf4:	2308      	movs	r3, #8
 800abf6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abf8:	2302      	movs	r3, #2
 800abfa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abfc:	2500      	movs	r5, #0
 800abfe:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ac00:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800ac02:	2306      	movs	r3, #6
 800ac04:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ac06:	a903      	add	r1, sp, #12
 800ac08:	4819      	ldr	r0, [pc, #100]	; (800ac70 <HAL_SAI_MspInit+0x170>)
 800ac0a:	f7f7 feb7 	bl	800297c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 800ac0e:	481b      	ldr	r0, [pc, #108]	; (800ac7c <HAL_SAI_MspInit+0x17c>)
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <HAL_SAI_MspInit+0x180>)
 800ac12:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800ac14:	2358      	movs	r3, #88	; 0x58
 800ac16:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac18:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac1a:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800ac1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac20:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ac22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac26:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ac28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac2c:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800ac2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac32:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac34:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800ac38:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ac3a:	2304      	movs	r3, #4
 800ac3c:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800ac3e:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800ac40:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ac42:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800ac44:	f7f6 ffe6 	bl	8001c14 <HAL_DMA_Init>
 800ac48:	b930      	cbnz	r0, 800ac58 <HAL_SAI_MspInit+0x158>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800ac4a:	4b0c      	ldr	r3, [pc, #48]	; (800ac7c <HAL_SAI_MspInit+0x17c>)
 800ac4c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ac50:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800ac52:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800ac56:	e75f      	b.n	800ab18 <HAL_SAI_MspInit+0x18>
      Error_Handler();
 800ac58:	f7ff fdbc 	bl	800a7d4 <Error_Handler>
 800ac5c:	e7f5      	b.n	800ac4a <HAL_SAI_MspInit+0x14a>
 800ac5e:	bf00      	nop
 800ac60:	40015804 	.word	0x40015804
 800ac64:	40015824 	.word	0x40015824
 800ac68:	200000f0 	.word	0x200000f0
 800ac6c:	58024400 	.word	0x58024400
 800ac70:	58021000 	.word	0x58021000
 800ac74:	200080bc 	.word	0x200080bc
 800ac78:	40020028 	.word	0x40020028
 800ac7c:	20008134 	.word	0x20008134
 800ac80:	40020040 	.word	0x40020040

0800ac84 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ac84:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800ac86:	4b07      	ldr	r3, [pc, #28]	; (800aca4 <SD_CheckStatus+0x20>)
 800ac88:	2201      	movs	r2, #1
 800ac8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ac8c:	f7ff f93a 	bl	8009f04 <BSP_SD_GetCardState>
 800ac90:	b920      	cbnz	r0, 800ac9c <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800ac92:	4a04      	ldr	r2, [pc, #16]	; (800aca4 <SD_CheckStatus+0x20>)
 800ac94:	7813      	ldrb	r3, [r2, #0]
 800ac96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ac9a:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800ac9c:	4b01      	ldr	r3, [pc, #4]	; (800aca4 <SD_CheckStatus+0x20>)
 800ac9e:	7818      	ldrb	r0, [r3, #0]
}
 800aca0:	bd08      	pop	{r3, pc}
 800aca2:	bf00      	nop
 800aca4:	20000010 	.word	0x20000010

0800aca8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aca8:	b510      	push	{r4, lr}
 800acaa:	4604      	mov	r4, r0
Stat = STA_NOINIT;  
 800acac:	4b07      	ldr	r3, [pc, #28]	; (800accc <SD_initialize+0x24>)
 800acae:	2201      	movs	r2, #1
 800acb0:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800acb2:	f7ff f949 	bl	8009f48 <BSP_SD_Init>
 800acb6:	b110      	cbz	r0, 800acbe <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800acb8:	4b04      	ldr	r3, [pc, #16]	; (800accc <SD_initialize+0x24>)
 800acba:	7818      	ldrb	r0, [r3, #0]
}
 800acbc:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7ff ffe0 	bl	800ac84 <SD_CheckStatus>
 800acc4:	4b01      	ldr	r3, [pc, #4]	; (800accc <SD_initialize+0x24>)
 800acc6:	7018      	strb	r0, [r3, #0]
 800acc8:	e7f6      	b.n	800acb8 <SD_initialize+0x10>
 800acca:	bf00      	nop
 800accc:	20000010 	.word	0x20000010

0800acd0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800acd0:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800acd2:	f7ff ffd7 	bl	800ac84 <SD_CheckStatus>
}
 800acd6:	bd08      	pop	{r3, pc}

0800acd8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800acd8:	b508      	push	{r3, lr}
 800acda:	4608      	mov	r0, r1
 800acdc:	4611      	mov	r1, r2
 800acde:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ace0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ace4:	f7ff f8ee 	bl	8009ec4 <BSP_SD_ReadBlocks>
 800ace8:	b920      	cbnz	r0, 800acf4 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800acea:	f7ff f90b 	bl	8009f04 <BSP_SD_GetCardState>
 800acee:	2800      	cmp	r0, #0
 800acf0:	d1fb      	bne.n	800acea <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800acf2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800acf4:	2001      	movs	r0, #1
 800acf6:	e7fc      	b.n	800acf2 <SD_read+0x1a>

0800acf8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800acf8:	b508      	push	{r3, lr}
 800acfa:	4608      	mov	r0, r1
 800acfc:	4611      	mov	r1, r2
 800acfe:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ad00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad04:	f7ff f8ee 	bl	8009ee4 <BSP_SD_WriteBlocks>
 800ad08:	b920      	cbnz	r0, 800ad14 <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ad0a:	f7ff f8fb 	bl	8009f04 <BSP_SD_GetCardState>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d1fb      	bne.n	800ad0a <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800ad12:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800ad14:	2001      	movs	r0, #1
 800ad16:	e7fc      	b.n	800ad12 <SD_write+0x1a>

0800ad18 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad18:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <SD_ioctl+0x58>)
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	f013 0f01 	tst.w	r3, #1
 800ad20:	d121      	bne.n	800ad66 <SD_ioctl+0x4e>
{
 800ad22:	b510      	push	{r4, lr}
 800ad24:	b08a      	sub	sp, #40	; 0x28
 800ad26:	4614      	mov	r4, r2

  switch (cmd)
 800ad28:	2903      	cmp	r1, #3
 800ad2a:	d81e      	bhi.n	800ad6a <SD_ioctl+0x52>
 800ad2c:	e8df f001 	tbb	[pc, r1]
 800ad30:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ad34:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 800ad36:	b00a      	add	sp, #40	; 0x28
 800ad38:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ad3a:	a801      	add	r0, sp, #4
 800ad3c:	f7ff f8ec 	bl	8009f18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ad40:	9b07      	ldr	r3, [sp, #28]
 800ad42:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800ad44:	2000      	movs	r0, #0
    break;
 800ad46:	e7f6      	b.n	800ad36 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800ad48:	a801      	add	r0, sp, #4
 800ad4a:	f7ff f8e5 	bl	8009f18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ad4e:	9b08      	ldr	r3, [sp, #32]
 800ad50:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800ad52:	2000      	movs	r0, #0
    break;
 800ad54:	e7ef      	b.n	800ad36 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800ad56:	a801      	add	r0, sp, #4
 800ad58:	f7ff f8de 	bl	8009f18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ad5c:	9b08      	ldr	r3, [sp, #32]
 800ad5e:	0a5b      	lsrs	r3, r3, #9
 800ad60:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800ad62:	2000      	movs	r0, #0
    break;
 800ad64:	e7e7      	b.n	800ad36 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad66:	2003      	movs	r0, #3
}
 800ad68:	4770      	bx	lr
    res = RES_PARERR;
 800ad6a:	2004      	movs	r0, #4
 800ad6c:	e7e3      	b.n	800ad36 <SD_ioctl+0x1e>
 800ad6e:	bf00      	nop
 800ad70:	20000010 	.word	0x20000010

0800ad74 <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 800ad74:	4b06      	ldr	r3, [pc, #24]	; (800ad90 <MX_SDMMC1_SD_Init+0x1c>)
 800ad76:	4a07      	ldr	r2, [pc, #28]	; (800ad94 <MX_SDMMC1_SD_Init+0x20>)
 800ad78:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ad7e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800ad80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ad84:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ad86:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800ad88:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	619a      	str	r2, [r3, #24]

}
 800ad8e:	4770      	bx	lr
 800ad90:	20008244 	.word	0x20008244
 800ad94:	52007000 	.word	0x52007000

0800ad98 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800ad98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad9e:	2300      	movs	r3, #0
 800ada0:	9303      	str	r3, [sp, #12]
 800ada2:	9304      	str	r3, [sp, #16]
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	9306      	str	r3, [sp, #24]
 800ada8:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 800adaa:	6802      	ldr	r2, [r0, #0]
 800adac:	4b2a      	ldr	r3, [pc, #168]	; (800ae58 <HAL_SD_MspInit+0xc0>)
 800adae:	429a      	cmp	r2, r3
 800adb0:	d002      	beq.n	800adb8 <HAL_SD_MspInit+0x20>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800adb2:	b008      	add	sp, #32
 800adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800adb8:	4b28      	ldr	r3, [pc, #160]	; (800ae5c <HAL_SD_MspInit+0xc4>)
 800adba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800adbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800adc2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800adc6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800adca:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800adce:	9200      	str	r2, [sp, #0]
 800add0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800add2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800add6:	f042 0204 	orr.w	r2, r2, #4
 800adda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800adde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ade2:	f002 0204 	and.w	r2, r2, #4
 800ade6:	9201      	str	r2, [sp, #4]
 800ade8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800adea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800adee:	f042 0208 	orr.w	r2, r2, #8
 800adf2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800adf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800adfa:	f003 0308 	and.w	r3, r3, #8
 800adfe:	9302      	str	r3, [sp, #8]
 800ae00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800ae02:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ae06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae08:	2602      	movs	r6, #2
 800ae0a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae0c:	2701      	movs	r7, #1
 800ae0e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae10:	2503      	movs	r5, #3
 800ae12:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ae14:	240c      	movs	r4, #12
 800ae16:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae18:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800ae64 <HAL_SD_MspInit+0xcc>
 800ae1c:	eb0d 0104 	add.w	r1, sp, r4
 800ae20:	4640      	mov	r0, r8
 800ae22:	f7f7 fdab 	bl	800297c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800ae26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae2c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae32:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ae34:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae36:	eb0d 0104 	add.w	r1, sp, r4
 800ae3a:	4640      	mov	r0, r8
 800ae3c:	f7f7 fd9e 	bl	800297c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ae40:	2304      	movs	r3, #4
 800ae42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae44:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae46:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae48:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ae4a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae4c:	eb0d 0104 	add.w	r1, sp, r4
 800ae50:	4803      	ldr	r0, [pc, #12]	; (800ae60 <HAL_SD_MspInit+0xc8>)
 800ae52:	f7f7 fd93 	bl	800297c <HAL_GPIO_Init>
}
 800ae56:	e7ac      	b.n	800adb2 <HAL_SD_MspInit+0x1a>
 800ae58:	52007000 	.word	0x52007000
 800ae5c:	58024400 	.word	0x58024400
 800ae60:	58020c00 	.word	0x58020c00
 800ae64:	58020800 	.word	0x58020800

0800ae68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ae68:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 800ae6a:	4813      	ldr	r0, [pc, #76]	; (800aeb8 <MX_SPI1_Init+0x50>)
 800ae6c:	4b13      	ldr	r3, [pc, #76]	; (800aebc <MX_SPI1_Init+0x54>)
 800ae6e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ae70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ae74:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ae76:	2300      	movs	r3, #0
 800ae78:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ae7a:	2207      	movs	r2, #7
 800ae7c:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ae7e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ae80:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800ae82:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ae86:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800ae88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ae8c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ae8e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ae90:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae92:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800ae94:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ae96:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800ae98:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800ae9a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ae9c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ae9e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800aea0:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800aea2:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800aea4:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800aea6:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800aea8:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800aeaa:	f7fb fd25 	bl	80068f8 <HAL_SPI_Init>
 800aeae:	b900      	cbnz	r0, 800aeb2 <MX_SPI1_Init+0x4a>
  {
    Error_Handler();
  }

}
 800aeb0:	bd08      	pop	{r3, pc}
    Error_Handler();
 800aeb2:	f7ff fc8f 	bl	800a7d4 <Error_Handler>
}
 800aeb6:	e7fb      	b.n	800aeb0 <MX_SPI1_Init+0x48>
 800aeb8:	200082c4 	.word	0x200082c4
 800aebc:	40013000 	.word	0x40013000

0800aec0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800aec0:	b530      	push	{r4, r5, lr}
 800aec2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aec4:	2300      	movs	r3, #0
 800aec6:	9303      	str	r3, [sp, #12]
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	9305      	str	r3, [sp, #20]
 800aecc:	9306      	str	r3, [sp, #24]
 800aece:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 800aed0:	6802      	ldr	r2, [r0, #0]
 800aed2:	4b20      	ldr	r3, [pc, #128]	; (800af54 <HAL_SPI_MspInit+0x94>)
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d001      	beq.n	800aedc <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800aed8:	b009      	add	sp, #36	; 0x24
 800aeda:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800aedc:	4b1e      	ldr	r3, [pc, #120]	; (800af58 <HAL_SPI_MspInit+0x98>)
 800aede:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800aee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aee6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800aeea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800aeee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800aef2:	9200      	str	r2, [sp, #0]
 800aef4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aef6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aefa:	f042 0208 	orr.w	r2, r2, #8
 800aefe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800af02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800af06:	f002 0208 	and.w	r2, r2, #8
 800af0a:	9201      	str	r2, [sp, #4]
 800af0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800af0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800af12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800af1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af22:	9302      	str	r3, [sp, #8]
 800af24:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800af26:	2380      	movs	r3, #128	; 0x80
 800af28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af2a:	2502      	movs	r5, #2
 800af2c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800af2e:	2405      	movs	r4, #5
 800af30:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800af32:	a903      	add	r1, sp, #12
 800af34:	4809      	ldr	r0, [pc, #36]	; (800af5c <HAL_SPI_MspInit+0x9c>)
 800af36:	f7f7 fd21 	bl	800297c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800af3a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800af3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af40:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af42:	2300      	movs	r3, #0
 800af44:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af46:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800af48:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800af4a:	a903      	add	r1, sp, #12
 800af4c:	4804      	ldr	r0, [pc, #16]	; (800af60 <HAL_SPI_MspInit+0xa0>)
 800af4e:	f7f7 fd15 	bl	800297c <HAL_GPIO_Init>
}
 800af52:	e7c1      	b.n	800aed8 <HAL_SPI_MspInit+0x18>
 800af54:	40013000 	.word	0x40013000
 800af58:	58024400 	.word	0x58024400
 800af5c:	58020c00 	.word	0x58020c00
 800af60:	58021800 	.word	0x58021800

0800af64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af64:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af66:	4b07      	ldr	r3, [pc, #28]	; (800af84 <HAL_MspInit+0x20>)
 800af68:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800af6c:	f042 0202 	orr.w	r2, r2, #2
 800af70:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800af74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af78:	f003 0302 	and.w	r3, r3, #2
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800af80:	b002      	add	sp, #8
 800af82:	4770      	bx	lr
 800af84:	58024400 	.word	0x58024400

0800af88 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800af88:	4770      	bx	lr

0800af8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af8a:	e7fe      	b.n	800af8a <HardFault_Handler>

0800af8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af8c:	e7fe      	b.n	800af8c <MemManage_Handler>

0800af8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af8e:	e7fe      	b.n	800af8e <BusFault_Handler>

0800af90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af90:	e7fe      	b.n	800af90 <UsageFault_Handler>

0800af92 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800af92:	4770      	bx	lr

0800af94 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af94:	4770      	bx	lr

0800af96 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800af96:	4770      	bx	lr

0800af98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800af98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800af9a:	f7f5 fb71 	bl	8000680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800af9e:	bd08      	pop	{r3, pc}

0800afa0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800afa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800afa2:	4802      	ldr	r0, [pc, #8]	; (800afac <DMA1_Stream0_IRQHandler+0xc>)
 800afa4:	f7f7 f94c 	bl	8002240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800afa8:	bd08      	pop	{r3, pc}
 800afaa:	bf00      	nop
 800afac:	20000238 	.word	0x20000238

0800afb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800afb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800afb2:	4802      	ldr	r0, [pc, #8]	; (800afbc <DMA1_Stream1_IRQHandler+0xc>)
 800afb4:	f7f7 f944 	bl	8002240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800afb8:	bd08      	pop	{r3, pc}
 800afba:	bf00      	nop
 800afbc:	200080bc 	.word	0x200080bc

0800afc0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800afc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800afc2:	4802      	ldr	r0, [pc, #8]	; (800afcc <DMA1_Stream2_IRQHandler+0xc>)
 800afc4:	f7f7 f93c 	bl	8002240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800afc8:	bd08      	pop	{r3, pc}
 800afca:	bf00      	nop
 800afcc:	20008134 	.word	0x20008134

0800afd0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800afd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800afd2:	4802      	ldr	r0, [pc, #8]	; (800afdc <ADC_IRQHandler+0xc>)
 800afd4:	f7f5 fb92 	bl	80006fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800afd8:	bd08      	pop	{r3, pc}
 800afda:	bf00      	nop
 800afdc:	20000170 	.word	0x20000170

0800afe0 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800afe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800afe2:	4802      	ldr	r0, [pc, #8]	; (800afec <BDMA_Channel0_IRQHandler+0xc>)
 800afe4:	f7f7 f92c 	bl	8002240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800afe8:	bd08      	pop	{r3, pc}
 800afea:	bf00      	nop
 800afec:	200000f8 	.word	0x200000f8

0800aff0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800aff0:	4a18      	ldr	r2, [pc, #96]	; (800b054 <SystemInit+0x64>)
 800aff2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800aff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800affa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800affe:	4b16      	ldr	r3, [pc, #88]	; (800b058 <SystemInit+0x68>)
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	f042 0201 	orr.w	r2, r2, #1
 800b006:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b008:	2200      	movs	r2, #0
 800b00a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b00c:	6818      	ldr	r0, [r3, #0]
 800b00e:	4913      	ldr	r1, [pc, #76]	; (800b05c <SystemInit+0x6c>)
 800b010:	4001      	ands	r1, r0
 800b012:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b014:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b016:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b018:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800b01a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800b01c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800b01e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800b022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b024:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800b026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b028:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b02a:	6819      	ldr	r1, [r3, #0]
 800b02c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800b030:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b032:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b034:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <SystemInit+0x70>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <SystemInit+0x74>)
 800b03a:	4013      	ands	r3, r2
 800b03c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b040:	d202      	bcs.n	800b048 <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <SystemInit+0x78>)
 800b044:	2201      	movs	r2, #1
 800b046:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b048:	4b02      	ldr	r3, [pc, #8]	; (800b054 <SystemInit+0x64>)
 800b04a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b04e:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	e000ed00 	.word	0xe000ed00
 800b058:	58024400 	.word	0x58024400
 800b05c:	eaf6ed7f 	.word	0xeaf6ed7f
 800b060:	5c001000 	.word	0x5c001000
 800b064:	ffff0000 	.word	0xffff0000
 800b068:	51008108 	.word	0x51008108

0800b06c <MX_TIM7_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b06c:	b500      	push	{lr}
 800b06e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b070:	2300      	movs	r3, #0
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	9302      	str	r3, [sp, #8]
 800b076:	9303      	str	r3, [sp, #12]

  htim7.Instance = TIM7;
 800b078:	480d      	ldr	r0, [pc, #52]	; (800b0b0 <MX_TIM7_Init+0x44>)
 800b07a:	4a0e      	ldr	r2, [pc, #56]	; (800b0b4 <MX_TIM7_Init+0x48>)
 800b07c:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 800b07e:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b080:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 0;
 800b082:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b084:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b086:	f7fb fed3 	bl	8006e30 <HAL_TIM_Base_Init>
 800b08a:	b950      	cbnz	r0, 800b0a2 <MX_TIM7_Init+0x36>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b08c:	2300      	movs	r3, #0
 800b08e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b090:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b092:	a901      	add	r1, sp, #4
 800b094:	4806      	ldr	r0, [pc, #24]	; (800b0b0 <MX_TIM7_Init+0x44>)
 800b096:	f7fc f86d 	bl	8007174 <HAL_TIMEx_MasterConfigSynchronization>
 800b09a:	b928      	cbnz	r0, 800b0a8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }

}
 800b09c:	b005      	add	sp, #20
 800b09e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800b0a2:	f7ff fb97 	bl	800a7d4 <Error_Handler>
 800b0a6:	e7f1      	b.n	800b08c <MX_TIM7_Init+0x20>
    Error_Handler();
 800b0a8:	f7ff fb94 	bl	800a7d4 <Error_Handler>
}
 800b0ac:	e7f6      	b.n	800b09c <MX_TIM7_Init+0x30>
 800b0ae:	bf00      	nop
 800b0b0:	2000840c 	.word	0x2000840c
 800b0b4:	40001400 	.word	0x40001400

0800b0b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 800b0b8:	6802      	ldr	r2, [r0, #0]
 800b0ba:	4b0a      	ldr	r3, [pc, #40]	; (800b0e4 <HAL_TIM_PWM_MspInit+0x2c>)
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d000      	beq.n	800b0c2 <HAL_TIM_PWM_MspInit+0xa>
 800b0c0:	4770      	bx	lr
{
 800b0c2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b0c4:	4b08      	ldr	r3, [pc, #32]	; (800b0e8 <HAL_TIM_PWM_MspInit+0x30>)
 800b0c6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b0ca:	f042 0201 	orr.w	r2, r2, #1
 800b0ce:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800b0d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800b0de:	b002      	add	sp, #8
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	58024400 	.word	0x58024400

0800b0ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b0ec:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM3)
 800b0ee:	6803      	ldr	r3, [r0, #0]
 800b0f0:	4a1a      	ldr	r2, [pc, #104]	; (800b15c <HAL_TIM_Base_MspInit+0x70>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d007      	beq.n	800b106 <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 800b0f6:	4a1a      	ldr	r2, [pc, #104]	; (800b160 <HAL_TIM_Base_MspInit+0x74>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d012      	beq.n	800b122 <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 800b0fc:	4a19      	ldr	r2, [pc, #100]	; (800b164 <HAL_TIM_Base_MspInit+0x78>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d01d      	beq.n	800b13e <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b102:	b004      	add	sp, #16
 800b104:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b106:	4b18      	ldr	r3, [pc, #96]	; (800b168 <HAL_TIM_Base_MspInit+0x7c>)
 800b108:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800b10c:	f042 0202 	orr.w	r2, r2, #2
 800b110:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800b114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b118:	f003 0302 	and.w	r3, r3, #2
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	9b01      	ldr	r3, [sp, #4]
 800b120:	e7ef      	b.n	800b102 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b122:	4b11      	ldr	r3, [pc, #68]	; (800b168 <HAL_TIM_Base_MspInit+0x7c>)
 800b124:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800b128:	f042 0204 	orr.w	r2, r2, #4
 800b12c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800b130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b134:	f003 0304 	and.w	r3, r3, #4
 800b138:	9302      	str	r3, [sp, #8]
 800b13a:	9b02      	ldr	r3, [sp, #8]
 800b13c:	e7e1      	b.n	800b102 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b13e:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <HAL_TIM_Base_MspInit+0x7c>)
 800b140:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800b144:	f042 0220 	orr.w	r2, r2, #32
 800b148:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800b14c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b150:	f003 0320 	and.w	r3, r3, #32
 800b154:	9303      	str	r3, [sp, #12]
 800b156:	9b03      	ldr	r3, [sp, #12]
}
 800b158:	e7d3      	b.n	800b102 <HAL_TIM_Base_MspInit+0x16>
 800b15a:	bf00      	nop
 800b15c:	40000400 	.word	0x40000400
 800b160:	40000800 	.word	0x40000800
 800b164:	40001400 	.word	0x40001400
 800b168:	58024400 	.word	0x58024400

0800b16c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b16c:	b500      	push	{lr}
 800b16e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b170:	2300      	movs	r3, #0
 800b172:	9303      	str	r3, [sp, #12]
 800b174:	9304      	str	r3, [sp, #16]
 800b176:	9305      	str	r3, [sp, #20]
 800b178:	9306      	str	r3, [sp, #24]
 800b17a:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 800b17c:	6803      	ldr	r3, [r0, #0]
 800b17e:	4a2a      	ldr	r2, [pc, #168]	; (800b228 <HAL_TIM_MspPostInit+0xbc>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d008      	beq.n	800b196 <HAL_TIM_MspPostInit+0x2a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 800b184:	4a29      	ldr	r2, [pc, #164]	; (800b22c <HAL_TIM_MspPostInit+0xc0>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d01e      	beq.n	800b1c8 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 800b18a:	4a29      	ldr	r2, [pc, #164]	; (800b230 <HAL_TIM_MspPostInit+0xc4>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d032      	beq.n	800b1f6 <HAL_TIM_MspPostInit+0x8a>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800b190:	b009      	add	sp, #36	; 0x24
 800b192:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b196:	4b27      	ldr	r3, [pc, #156]	; (800b234 <HAL_TIM_MspPostInit+0xc8>)
 800b198:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b19c:	f042 0201 	orr.w	r2, r2, #1
 800b1a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b1a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b1b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1b6:	2302      	movs	r3, #2
 800b1b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1be:	a903      	add	r1, sp, #12
 800b1c0:	481d      	ldr	r0, [pc, #116]	; (800b238 <HAL_TIM_MspPostInit+0xcc>)
 800b1c2:	f7f7 fbdb 	bl	800297c <HAL_GPIO_Init>
 800b1c6:	e7e3      	b.n	800b190 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b1c8:	4b1a      	ldr	r3, [pc, #104]	; (800b234 <HAL_TIM_MspPostInit+0xc8>)
 800b1ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b1ce:	f042 0202 	orr.w	r2, r2, #2
 800b1d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b1d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1da:	f003 0302 	and.w	r3, r3, #2
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b1e2:	2320      	movs	r3, #32
 800b1e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b1ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b1ec:	a903      	add	r1, sp, #12
 800b1ee:	4813      	ldr	r0, [pc, #76]	; (800b23c <HAL_TIM_MspPostInit+0xd0>)
 800b1f0:	f7f7 fbc4 	bl	800297c <HAL_GPIO_Init>
 800b1f4:	e7cc      	b.n	800b190 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b1f6:	4b0f      	ldr	r3, [pc, #60]	; (800b234 <HAL_TIM_MspPostInit+0xc8>)
 800b1f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b1fc:	f042 0202 	orr.w	r2, r2, #2
 800b200:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	9302      	str	r3, [sp, #8]
 800b20e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800b210:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800b214:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b216:	2302      	movs	r3, #2
 800b218:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b21a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b21c:	a903      	add	r1, sp, #12
 800b21e:	4807      	ldr	r0, [pc, #28]	; (800b23c <HAL_TIM_MspPostInit+0xd0>)
 800b220:	f7f7 fbac 	bl	800297c <HAL_GPIO_Init>
}
 800b224:	e7b4      	b.n	800b190 <HAL_TIM_MspPostInit+0x24>
 800b226:	bf00      	nop
 800b228:	40010000 	.word	0x40010000
 800b22c:	40000400 	.word	0x40000400
 800b230:	40000800 	.word	0x40000800
 800b234:	58024400 	.word	0x58024400
 800b238:	58020000 	.word	0x58020000
 800b23c:	58020400 	.word	0x58020400

0800b240 <MX_TIM1_Init>:
{
 800b240:	b510      	push	{r4, lr}
 800b242:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b244:	2400      	movs	r4, #0
 800b246:	9413      	str	r4, [sp, #76]	; 0x4c
 800b248:	9414      	str	r4, [sp, #80]	; 0x50
 800b24a:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b24c:	940c      	str	r4, [sp, #48]	; 0x30
 800b24e:	940d      	str	r4, [sp, #52]	; 0x34
 800b250:	940e      	str	r4, [sp, #56]	; 0x38
 800b252:	940f      	str	r4, [sp, #60]	; 0x3c
 800b254:	9410      	str	r4, [sp, #64]	; 0x40
 800b256:	9411      	str	r4, [sp, #68]	; 0x44
 800b258:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b25a:	222c      	movs	r2, #44	; 0x2c
 800b25c:	4621      	mov	r1, r4
 800b25e:	a801      	add	r0, sp, #4
 800b260:	f000 fd1a 	bl	800bc98 <memset>
  htim1.Instance = TIM1;
 800b264:	4825      	ldr	r0, [pc, #148]	; (800b2fc <MX_TIM1_Init+0xbc>)
 800b266:	4b26      	ldr	r3, [pc, #152]	; (800b300 <MX_TIM1_Init+0xc0>)
 800b268:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800b26a:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b26c:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 800b26e:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b270:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800b272:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b274:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800b276:	f7fb fdf4 	bl	8006e62 <HAL_TIM_PWM_Init>
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d132      	bne.n	800b2e4 <MX_TIM1_Init+0xa4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b27e:	2300      	movs	r3, #0
 800b280:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b282:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b284:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b286:	a913      	add	r1, sp, #76	; 0x4c
 800b288:	481c      	ldr	r0, [pc, #112]	; (800b2fc <MX_TIM1_Init+0xbc>)
 800b28a:	f7fb ff73 	bl	8007174 <HAL_TIMEx_MasterConfigSynchronization>
 800b28e:	2800      	cmp	r0, #0
 800b290:	d12b      	bne.n	800b2ea <MX_TIM1_Init+0xaa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b292:	2360      	movs	r3, #96	; 0x60
 800b294:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b29a:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b29c:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b29e:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b2a0:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b2a2:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	a90c      	add	r1, sp, #48	; 0x30
 800b2a8:	4814      	ldr	r0, [pc, #80]	; (800b2fc <MX_TIM1_Init+0xbc>)
 800b2aa:	f7fb fe3d 	bl	8006f28 <HAL_TIM_PWM_ConfigChannel>
 800b2ae:	b9f8      	cbnz	r0, 800b2f0 <MX_TIM1_Init+0xb0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b2b4:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b2b6:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b2b8:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b2ba:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b2bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b2c0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800b2c2:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800b2c4:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800b2c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b2ca:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800b2cc:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b2ce:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800b2d0:	a901      	add	r1, sp, #4
 800b2d2:	480a      	ldr	r0, [pc, #40]	; (800b2fc <MX_TIM1_Init+0xbc>)
 800b2d4:	f7fb ff9a 	bl	800720c <HAL_TIMEx_ConfigBreakDeadTime>
 800b2d8:	b968      	cbnz	r0, 800b2f6 <MX_TIM1_Init+0xb6>
  HAL_TIM_MspPostInit(&htim1);
 800b2da:	4808      	ldr	r0, [pc, #32]	; (800b2fc <MX_TIM1_Init+0xbc>)
 800b2dc:	f7ff ff46 	bl	800b16c <HAL_TIM_MspPostInit>
}
 800b2e0:	b016      	add	sp, #88	; 0x58
 800b2e2:	bd10      	pop	{r4, pc}
    Error_Handler();
 800b2e4:	f7ff fa76 	bl	800a7d4 <Error_Handler>
 800b2e8:	e7c9      	b.n	800b27e <MX_TIM1_Init+0x3e>
    Error_Handler();
 800b2ea:	f7ff fa73 	bl	800a7d4 <Error_Handler>
 800b2ee:	e7d0      	b.n	800b292 <MX_TIM1_Init+0x52>
    Error_Handler();
 800b2f0:	f7ff fa70 	bl	800a7d4 <Error_Handler>
 800b2f4:	e7dc      	b.n	800b2b0 <MX_TIM1_Init+0x70>
    Error_Handler();
 800b2f6:	f7ff fa6d 	bl	800a7d4 <Error_Handler>
 800b2fa:	e7ee      	b.n	800b2da <MX_TIM1_Init+0x9a>
 800b2fc:	200083cc 	.word	0x200083cc
 800b300:	40010000 	.word	0x40010000

0800b304 <MX_TIM3_Init>:
{
 800b304:	b500      	push	{lr}
 800b306:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b308:	2300      	movs	r3, #0
 800b30a:	930a      	str	r3, [sp, #40]	; 0x28
 800b30c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b30e:	930c      	str	r3, [sp, #48]	; 0x30
 800b310:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b312:	9307      	str	r3, [sp, #28]
 800b314:	9308      	str	r3, [sp, #32]
 800b316:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	9301      	str	r3, [sp, #4]
 800b31c:	9302      	str	r3, [sp, #8]
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	9304      	str	r3, [sp, #16]
 800b322:	9305      	str	r3, [sp, #20]
 800b324:	9306      	str	r3, [sp, #24]
  htim3.Instance = TIM3;
 800b326:	4820      	ldr	r0, [pc, #128]	; (800b3a8 <MX_TIM3_Init+0xa4>)
 800b328:	4a20      	ldr	r2, [pc, #128]	; (800b3ac <MX_TIM3_Init+0xa8>)
 800b32a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 800b32c:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b32e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 0;
 800b330:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b332:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b334:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b336:	f7fb fd7b 	bl	8006e30 <HAL_TIM_Base_Init>
 800b33a:	bb30      	cbnz	r0, 800b38a <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b33c:	a90e      	add	r1, sp, #56	; 0x38
 800b33e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b342:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b346:	4818      	ldr	r0, [pc, #96]	; (800b3a8 <MX_TIM3_Init+0xa4>)
 800b348:	f7fb fe94 	bl	8007074 <HAL_TIM_ConfigClockSource>
 800b34c:	bb00      	cbnz	r0, 800b390 <MX_TIM3_Init+0x8c>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b34e:	4816      	ldr	r0, [pc, #88]	; (800b3a8 <MX_TIM3_Init+0xa4>)
 800b350:	f7fb fd87 	bl	8006e62 <HAL_TIM_PWM_Init>
 800b354:	b9f8      	cbnz	r0, 800b396 <MX_TIM3_Init+0x92>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b356:	2300      	movs	r3, #0
 800b358:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b35a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b35c:	a907      	add	r1, sp, #28
 800b35e:	4812      	ldr	r0, [pc, #72]	; (800b3a8 <MX_TIM3_Init+0xa4>)
 800b360:	f7fb ff08 	bl	8007174 <HAL_TIMEx_MasterConfigSynchronization>
 800b364:	b9d0      	cbnz	r0, 800b39c <MX_TIM3_Init+0x98>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b366:	2360      	movs	r3, #96	; 0x60
 800b368:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b36e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b370:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b372:	2204      	movs	r2, #4
 800b374:	4669      	mov	r1, sp
 800b376:	480c      	ldr	r0, [pc, #48]	; (800b3a8 <MX_TIM3_Init+0xa4>)
 800b378:	f7fb fdd6 	bl	8006f28 <HAL_TIM_PWM_ConfigChannel>
 800b37c:	b988      	cbnz	r0, 800b3a2 <MX_TIM3_Init+0x9e>
  HAL_TIM_MspPostInit(&htim3);
 800b37e:	480a      	ldr	r0, [pc, #40]	; (800b3a8 <MX_TIM3_Init+0xa4>)
 800b380:	f7ff fef4 	bl	800b16c <HAL_TIM_MspPostInit>
}
 800b384:	b00f      	add	sp, #60	; 0x3c
 800b386:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800b38a:	f7ff fa23 	bl	800a7d4 <Error_Handler>
 800b38e:	e7d5      	b.n	800b33c <MX_TIM3_Init+0x38>
    Error_Handler();
 800b390:	f7ff fa20 	bl	800a7d4 <Error_Handler>
 800b394:	e7db      	b.n	800b34e <MX_TIM3_Init+0x4a>
    Error_Handler();
 800b396:	f7ff fa1d 	bl	800a7d4 <Error_Handler>
 800b39a:	e7dc      	b.n	800b356 <MX_TIM3_Init+0x52>
    Error_Handler();
 800b39c:	f7ff fa1a 	bl	800a7d4 <Error_Handler>
 800b3a0:	e7e1      	b.n	800b366 <MX_TIM3_Init+0x62>
    Error_Handler();
 800b3a2:	f7ff fa17 	bl	800a7d4 <Error_Handler>
 800b3a6:	e7ea      	b.n	800b37e <MX_TIM3_Init+0x7a>
 800b3a8:	2000838c 	.word	0x2000838c
 800b3ac:	40000400 	.word	0x40000400

0800b3b0 <MX_TIM4_Init>:
{
 800b3b0:	b500      	push	{lr}
 800b3b2:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b3b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b3bc:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b3be:	9307      	str	r3, [sp, #28]
 800b3c0:	9308      	str	r3, [sp, #32]
 800b3c2:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	9302      	str	r3, [sp, #8]
 800b3ca:	9303      	str	r3, [sp, #12]
 800b3cc:	9304      	str	r3, [sp, #16]
 800b3ce:	9305      	str	r3, [sp, #20]
 800b3d0:	9306      	str	r3, [sp, #24]
  htim4.Instance = TIM4;
 800b3d2:	4829      	ldr	r0, [pc, #164]	; (800b478 <MX_TIM4_Init+0xc8>)
 800b3d4:	4a29      	ldr	r2, [pc, #164]	; (800b47c <MX_TIM4_Init+0xcc>)
 800b3d6:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 800b3d8:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b3da:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 800b3dc:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b3de:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b3e0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b3e2:	f7fb fd25 	bl	8006e30 <HAL_TIM_Base_Init>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d131      	bne.n	800b44e <MX_TIM4_Init+0x9e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b3ea:	a90e      	add	r1, sp, #56	; 0x38
 800b3ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3f0:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b3f4:	4820      	ldr	r0, [pc, #128]	; (800b478 <MX_TIM4_Init+0xc8>)
 800b3f6:	f7fb fe3d 	bl	8007074 <HAL_TIM_ConfigClockSource>
 800b3fa:	bb58      	cbnz	r0, 800b454 <MX_TIM4_Init+0xa4>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800b3fc:	481e      	ldr	r0, [pc, #120]	; (800b478 <MX_TIM4_Init+0xc8>)
 800b3fe:	f7fb fd30 	bl	8006e62 <HAL_TIM_PWM_Init>
 800b402:	bb50      	cbnz	r0, 800b45a <MX_TIM4_Init+0xaa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b404:	2300      	movs	r3, #0
 800b406:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b408:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b40a:	a907      	add	r1, sp, #28
 800b40c:	481a      	ldr	r0, [pc, #104]	; (800b478 <MX_TIM4_Init+0xc8>)
 800b40e:	f7fb feb1 	bl	8007174 <HAL_TIMEx_MasterConfigSynchronization>
 800b412:	bb28      	cbnz	r0, 800b460 <MX_TIM4_Init+0xb0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b414:	2360      	movs	r3, #96	; 0x60
 800b416:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800b418:	2200      	movs	r2, #0
 800b41a:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b41c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b41e:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b420:	4669      	mov	r1, sp
 800b422:	4815      	ldr	r0, [pc, #84]	; (800b478 <MX_TIM4_Init+0xc8>)
 800b424:	f7fb fd80 	bl	8006f28 <HAL_TIM_PWM_ConfigChannel>
 800b428:	b9e8      	cbnz	r0, 800b466 <MX_TIM4_Init+0xb6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b42a:	2204      	movs	r2, #4
 800b42c:	4669      	mov	r1, sp
 800b42e:	4812      	ldr	r0, [pc, #72]	; (800b478 <MX_TIM4_Init+0xc8>)
 800b430:	f7fb fd7a 	bl	8006f28 <HAL_TIM_PWM_ConfigChannel>
 800b434:	b9d0      	cbnz	r0, 800b46c <MX_TIM4_Init+0xbc>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b436:	220c      	movs	r2, #12
 800b438:	4669      	mov	r1, sp
 800b43a:	480f      	ldr	r0, [pc, #60]	; (800b478 <MX_TIM4_Init+0xc8>)
 800b43c:	f7fb fd74 	bl	8006f28 <HAL_TIM_PWM_ConfigChannel>
 800b440:	b9b8      	cbnz	r0, 800b472 <MX_TIM4_Init+0xc2>
  HAL_TIM_MspPostInit(&htim4);
 800b442:	480d      	ldr	r0, [pc, #52]	; (800b478 <MX_TIM4_Init+0xc8>)
 800b444:	f7ff fe92 	bl	800b16c <HAL_TIM_MspPostInit>
}
 800b448:	b00f      	add	sp, #60	; 0x3c
 800b44a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800b44e:	f7ff f9c1 	bl	800a7d4 <Error_Handler>
 800b452:	e7ca      	b.n	800b3ea <MX_TIM4_Init+0x3a>
    Error_Handler();
 800b454:	f7ff f9be 	bl	800a7d4 <Error_Handler>
 800b458:	e7d0      	b.n	800b3fc <MX_TIM4_Init+0x4c>
    Error_Handler();
 800b45a:	f7ff f9bb 	bl	800a7d4 <Error_Handler>
 800b45e:	e7d1      	b.n	800b404 <MX_TIM4_Init+0x54>
    Error_Handler();
 800b460:	f7ff f9b8 	bl	800a7d4 <Error_Handler>
 800b464:	e7d6      	b.n	800b414 <MX_TIM4_Init+0x64>
    Error_Handler();
 800b466:	f7ff f9b5 	bl	800a7d4 <Error_Handler>
 800b46a:	e7de      	b.n	800b42a <MX_TIM4_Init+0x7a>
    Error_Handler();
 800b46c:	f7ff f9b2 	bl	800a7d4 <Error_Handler>
 800b470:	e7e1      	b.n	800b436 <MX_TIM4_Init+0x86>
    Error_Handler();
 800b472:	f7ff f9af 	bl	800a7d4 <Error_Handler>
 800b476:	e7e4      	b.n	800b442 <MX_TIM4_Init+0x92>
 800b478:	2000834c 	.word	0x2000834c
 800b47c:	40000800 	.word	0x40000800

0800b480 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800b480:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 800b482:	4817      	ldr	r0, [pc, #92]	; (800b4e0 <MX_USART6_UART_Init+0x60>)
 800b484:	4b17      	ldr	r3, [pc, #92]	; (800b4e4 <MX_USART6_UART_Init+0x64>)
 800b486:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 800b488:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800b48c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800b48e:	2300      	movs	r3, #0
 800b490:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800b492:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800b494:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800b496:	2204      	movs	r2, #4
 800b498:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b49a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800b49c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b49e:	6203      	str	r3, [r0, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b4a0:	6243      	str	r3, [r0, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b4a2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800b4a4:	f7fd fb63 	bl	8008b6e <HAL_UART_Init>
 800b4a8:	b970      	cbnz	r0, 800b4c8 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	480c      	ldr	r0, [pc, #48]	; (800b4e0 <MX_USART6_UART_Init+0x60>)
 800b4ae:	f7fd fbea 	bl	8008c86 <HAL_UARTEx_SetTxFifoThreshold>
 800b4b2:	b960      	cbnz	r0, 800b4ce <MX_USART6_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	480a      	ldr	r0, [pc, #40]	; (800b4e0 <MX_USART6_UART_Init+0x60>)
 800b4b8:	f7fd fc0a 	bl	8008cd0 <HAL_UARTEx_SetRxFifoThreshold>
 800b4bc:	b950      	cbnz	r0, 800b4d4 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800b4be:	4808      	ldr	r0, [pc, #32]	; (800b4e0 <MX_USART6_UART_Init+0x60>)
 800b4c0:	f7fd fbc2 	bl	8008c48 <HAL_UARTEx_DisableFifoMode>
 800b4c4:	b948      	cbnz	r0, 800b4da <MX_USART6_UART_Init+0x5a>
  {
    Error_Handler();
  }

}
 800b4c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b4c8:	f7ff f984 	bl	800a7d4 <Error_Handler>
 800b4cc:	e7ed      	b.n	800b4aa <MX_USART6_UART_Init+0x2a>
    Error_Handler();
 800b4ce:	f7ff f981 	bl	800a7d4 <Error_Handler>
 800b4d2:	e7ef      	b.n	800b4b4 <MX_USART6_UART_Init+0x34>
    Error_Handler();
 800b4d4:	f7ff f97e 	bl	800a7d4 <Error_Handler>
 800b4d8:	e7f1      	b.n	800b4be <MX_USART6_UART_Init+0x3e>
    Error_Handler();
 800b4da:	f7ff f97b 	bl	800a7d4 <Error_Handler>
}
 800b4de:	e7f2      	b.n	800b4c6 <MX_USART6_UART_Init+0x46>
 800b4e0:	2000844c 	.word	0x2000844c
 800b4e4:	40011400 	.word	0x40011400

0800b4e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b4e8:	b530      	push	{r4, r5, lr}
 800b4ea:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9303      	str	r3, [sp, #12]
 800b4f0:	9304      	str	r3, [sp, #16]
 800b4f2:	9305      	str	r3, [sp, #20]
 800b4f4:	9306      	str	r3, [sp, #24]
 800b4f6:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 800b4f8:	6802      	ldr	r2, [r0, #0]
 800b4fa:	4b20      	ldr	r3, [pc, #128]	; (800b57c <HAL_UART_MspInit+0x94>)
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d001      	beq.n	800b504 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800b500:	b009      	add	sp, #36	; 0x24
 800b502:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 800b504:	4b1e      	ldr	r3, [pc, #120]	; (800b580 <HAL_UART_MspInit+0x98>)
 800b506:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b50a:	f042 0220 	orr.w	r2, r2, #32
 800b50e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800b512:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b516:	f002 0220 	and.w	r2, r2, #32
 800b51a:	9200      	str	r2, [sp, #0]
 800b51c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b51e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b522:	f042 0204 	orr.w	r2, r2, #4
 800b526:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b52a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b52e:	f002 0204 	and.w	r2, r2, #4
 800b532:	9201      	str	r2, [sp, #4]
 800b534:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b536:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b53a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b53e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54a:	9302      	str	r3, [sp, #8]
 800b54c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800b54e:	2380      	movs	r3, #128	; 0x80
 800b550:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b552:	2502      	movs	r5, #2
 800b554:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800b556:	2407      	movs	r4, #7
 800b558:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b55a:	a903      	add	r1, sp, #12
 800b55c:	4809      	ldr	r0, [pc, #36]	; (800b584 <HAL_UART_MspInit+0x9c>)
 800b55e:	f7f7 fa0d 	bl	800297c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800b562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b566:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b568:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b56e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800b570:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b572:	a903      	add	r1, sp, #12
 800b574:	4804      	ldr	r0, [pc, #16]	; (800b588 <HAL_UART_MspInit+0xa0>)
 800b576:	f7f7 fa01 	bl	800297c <HAL_GPIO_Init>
}
 800b57a:	e7c1      	b.n	800b500 <HAL_UART_MspInit+0x18>
 800b57c:	40011400 	.word	0x40011400
 800b580:	58024400 	.word	0x58024400
 800b584:	58020800 	.word	0x58020800
 800b588:	58021800 	.word	0x58021800

0800b58c <tRamp_initToPool>:
    
    leaf_free(ramp);
}

void    tRamp_initToPool    (tRamp* const r, float time, int samples_per_tick, tMempool* const mp)
{
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	ed2d 8b02 	vpush	{d8}
 800b592:	4605      	mov	r5, r0
 800b594:	eeb0 8a40 	vmov.f32	s16, s0
 800b598:	460c      	mov	r4, r1
    _tMempool* m = *mp;
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 800b59a:	6811      	ldr	r1, [r2, #0]
 800b59c:	201c      	movs	r0, #28
 800b59e:	f000 fa87 	bl	800bab0 <mpool_alloc>
 800b5a2:	6028      	str	r0, [r5, #0]
    
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 800b5a4:	4b18      	ldr	r3, [pc, #96]	; (800b608 <tRamp_initToPool+0x7c>)
 800b5a6:	ed93 7a00 	vldr	s14, [r3]
 800b5aa:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b60c <tRamp_initToPool+0x80>
 800b5ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ba:	edc0 7a01 	vstr	s15, [r0, #4]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 800b5be:	ee07 4a10 	vmov	s14, r4
 800b5c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 800b5ca:	edc0 6a02 	vstr	s13, [r0, #8]
    ramp->curr = 0.0f;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60c3      	str	r3, [r0, #12]
    ramp->dest = 0.0f;
 800b5d2:	6103      	str	r3, [r0, #16]
    
    if (time < ramp->minimum_time)
 800b5d4:	eef4 6ac8 	vcmpe.f32	s13, s16
 800b5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5dc:	dc11      	bgt.n	800b602 <tRamp_initToPool+0x76>
    {
        ramp->time = ramp->minimum_time;
    }
    else
    {
        ramp->time = time;
 800b5de:	ed80 8a05 	vstr	s16, [r0, #20]
    }
    
    ramp->samples_per_tick = samples_per_tick;
 800b5e2:	6184      	str	r4, [r0, #24]
    ramp->inc = ((ramp->dest - ramp->curr) / ramp->time * ramp->inv_sr_ms) * (float)ramp->samples_per_tick;
 800b5e4:	ed90 6a05 	vldr	s12, [r0, #20]
 800b5e8:	eddf 5a09 	vldr	s11, [pc, #36]	; 800b610 <tRamp_initToPool+0x84>
 800b5ec:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800b5f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f8:	edc0 7a00 	vstr	s15, [r0]
}
 800b5fc:	ecbd 8b02 	vpop	{d8}
 800b600:	bd38      	pop	{r3, r4, r5, pc}
        ramp->time = ramp->minimum_time;
 800b602:	edc0 6a05 	vstr	s13, [r0, #20]
 800b606:	e7ec      	b.n	800b5e2 <tRamp_initToPool+0x56>
 800b608:	200084d8 	.word	0x200084d8
 800b60c:	3a83126f 	.word	0x3a83126f
 800b610:	00000000 	.word	0x00000000

0800b614 <tRamp_setDest>:
    r->inc = ((r->dest-r->curr)/r->time * r->inv_sr_ms) * ((float)r->samples_per_tick);
}

void     tRamp_setDest(tRamp* const ramp, float dest)
{
    _tRamp* r = *ramp;
 800b614:	6803      	ldr	r3, [r0, #0]
    r->dest = dest;
 800b616:	ed83 0a04 	vstr	s0, [r3, #16]
    r->inc = ((r->dest-r->curr)/r->time * r->inv_sr_ms) * ((float)r->samples_per_tick);
 800b61a:	edd3 7a03 	vldr	s15, [r3, #12]
 800b61e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b622:	ed93 7a05 	vldr	s14, [r3, #20]
 800b626:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800b62a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b62e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b632:	ed93 7a06 	vldr	s14, [r3, #24]
 800b636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b63a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b63e:	edc3 7a00 	vstr	s15, [r3]
}
 800b642:	4770      	bx	lr

0800b644 <tVZFilter_BandwidthToR>:
	f->type = type;
	tVZFilter_calcCoeffs(vf);
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
 800b644:	b510      	push	{r4, lr}
 800b646:	ed2d 8b02 	vpush	{d8}
	_tVZFilter* f = *vf;
 800b64a:	6804      	ldr	r4, [r0, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800b64c:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800b650:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b654:	ee60 0a60 	vnmul.f32	s1, s0, s1
 800b658:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b65c:	f000 fbc0 	bl	800bde0 <powf>
 800b660:	ee28 0a00 	vmul.f32	s0, s16, s0
  float gl = tanf(PI*fl*leaf.invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800b664:	ed9f 8a11 	vldr	s16, [pc, #68]	; 800b6ac <tVZFilter_BandwidthToR+0x68>
 800b668:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b66c:	4b10      	ldr	r3, [pc, #64]	; (800b6b0 <tVZFilter_BandwidthToR+0x6c>)
 800b66e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b672:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b676:	f000 fcf1 	bl	800c05c <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800b67a:	edd4 7a03 	vldr	s15, [r4, #12]
 800b67e:	ee80 7a27 	vdiv.f32	s14, s0, s15
							   // unwarped: r = pow(2, -B/2) -> approximation for low
							   // center-frequencies
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800b682:	ee27 0a07 	vmul.f32	s0, s14, s14
 800b686:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b68a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b68e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b692:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800b696:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b69a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b69e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b6a2:	f000 fd71 	bl	800c188 <sqrtf>
}
 800b6a6:	ecbd 8b02 	vpop	{d8}
 800b6aa:	bd10      	pop	{r4, pc}
 800b6ac:	40490fdb 	.word	0x40490fdb
 800b6b0:	200084d8 	.word	0x200084d8

0800b6b4 <tVZFilter_calcCoeffs>:
{
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	ed2d 8b04 	vpush	{d8-d9}
 800b6ba:	4605      	mov	r5, r0
	_tVZFilter* f = *vf;
 800b6bc:	6804      	ldr	r4, [r0, #0]
	f->g = tanf(PI * f->fc * leaf.invSampleRate);  // embedded integrator gain (Fig 3.11)
 800b6be:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800b6c2:	eddf 7ac2 	vldr	s15, [pc, #776]	; 800b9cc <tVZFilter_calcCoeffs+0x318>
 800b6c6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b6ca:	4bc1      	ldr	r3, [pc, #772]	; (800b9d0 <tVZFilter_calcCoeffs+0x31c>)
 800b6cc:	ed93 0a01 	vldr	s0, [r3, #4]
 800b6d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b6d4:	f000 fcc2 	bl	800c05c <tanf>
 800b6d8:	ed84 0a03 	vstr	s0, [r4, #12]
	  switch( f->type )
 800b6dc:	7823      	ldrb	r3, [r4, #0]
 800b6de:	2b0a      	cmp	r3, #10
 800b6e0:	d81a      	bhi.n	800b718 <tVZFilter_calcCoeffs+0x64>
 800b6e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b6e6:	003c      	.short	0x003c
 800b6e8:	004a002e 	.word	0x004a002e
 800b6ec:	00670058 	.word	0x00670058
 800b6f0:	00b90077 	.word	0x00b90077
 800b6f4:	011b00e1 	.word	0x011b00e1
 800b6f8:	0109000b 	.word	0x0109000b
		  f->R2 = 1.0f / f->G;  // can we use an arbitrary value here, for example R2 = 1?
 800b6fc:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800b700:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b704:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b708:	ed84 7a04 	vstr	s14, [r4, #16]
		  f->cL = 1.0f;
 800b70c:	edc4 7a06 	vstr	s15, [r4, #24]
		  f->cB = f->R2;
 800b710:	ed84 7a07 	vstr	s14, [r4, #28]
		  f->cH = 1.0f;
 800b714:	edc4 7a08 	vstr	s15, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800b718:	edd4 7a04 	vldr	s15, [r4, #16]
 800b71c:	ed94 7a03 	vldr	s14, [r4, #12]
 800b720:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b72c:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b730:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b738:	ed84 7a05 	vstr	s14, [r4, #20]
}
 800b73c:	ecbd 8b04 	vpop	{d8-d9}
 800b740:	bd38      	pop	{r3, r4, r5, pc}
			f->R2 = 1.0f / f->G;
 800b742:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800b746:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b74a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b74e:	ed84 7a04 	vstr	s14, [r4, #16]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800b752:	edc4 7a06 	vstr	s15, [r4, #24]
 800b756:	2300      	movs	r3, #0
 800b758:	61e3      	str	r3, [r4, #28]
 800b75a:	6223      	str	r3, [r4, #32]
		break;
 800b75c:	e7dc      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
			f->R2 = 1.0f / f->G;
 800b75e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800b762:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b766:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b76a:	ed84 7a04 	vstr	s14, [r4, #16]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800b76e:	2300      	movs	r3, #0
 800b770:	61a3      	str	r3, [r4, #24]
 800b772:	61e3      	str	r3, [r4, #28]
 800b774:	edc4 7a08 	vstr	s15, [r4, #32]
		break;
 800b778:	e7ce      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
			f->R2 = 1.0f / f->G;
 800b77a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800b77e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b782:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b786:	ed84 7a04 	vstr	s14, [r4, #16]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800b78a:	2300      	movs	r3, #0
 800b78c:	61a3      	str	r3, [r4, #24]
 800b78e:	edc4 7a07 	vstr	s15, [r4, #28]
 800b792:	6223      	str	r3, [r4, #32]
		break;
 800b794:	e7c0      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800b796:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 800b79a:	4628      	mov	r0, r5
 800b79c:	f7ff ff52 	bl	800b644 <tVZFilter_BandwidthToR>
 800b7a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b7a4:	ed84 0a04 	vstr	s0, [r4, #16]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	61a3      	str	r3, [r4, #24]
 800b7ac:	ed84 0a07 	vstr	s0, [r4, #28]
 800b7b0:	6223      	str	r3, [r4, #32]
		break;
 800b7b2:	e7b1      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800b7b4:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	f7ff ff43 	bl	800b644 <tVZFilter_BandwidthToR>
 800b7be:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b7c2:	ed84 0a04 	vstr	s0, [r4, #16]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800b7c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b7ca:	61a3      	str	r3, [r4, #24]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	61e2      	str	r2, [r4, #28]
 800b7d0:	6223      	str	r3, [r4, #32]
		break;
 800b7d2:	e7a1      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800b7d4:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 800b7d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b7dc:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800b7e0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b7e4:	f000 fafc 	bl	800bde0 <powf>
 800b7e8:	ee28 0a00 	vmul.f32	s0, s16, s0
			float wl = tanf(PI*fl*leaf.invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800b7ec:	ed9f 8a77 	vldr	s16, [pc, #476]	; 800b9cc <tVZFilter_calcCoeffs+0x318>
 800b7f0:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b7f4:	4b76      	ldr	r3, [pc, #472]	; (800b9d0 <tVZFilter_calcCoeffs+0x31c>)
 800b7f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800b7fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b7fe:	f000 fc2d 	bl	800c05c <tanf>
			float r  = f->g/wl;
 800b802:	edd4 7a03 	vldr	s15, [r4, #12]
 800b806:	ee87 0a80 	vdiv.f32	s0, s15, s0
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800b80a:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800b80e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b812:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b816:	ee37 7a08 	vadd.f32	s14, s14, s16
 800b81a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b81e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b822:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b826:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800b82a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b82e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b832:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800b836:	f000 fca7 	bl	800c188 <sqrtf>
 800b83a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b83e:	ed84 0a04 	vstr	s0, [r4, #16]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800b842:	ed84 8a06 	vstr	s16, [r4, #24]
 800b846:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800b84a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b84e:	ed84 0a07 	vstr	s0, [r4, #28]
 800b852:	ed84 8a08 	vstr	s16, [r4, #32]
		break;
 800b856:	e75f      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
			float A = sqrtf(f->G);
 800b858:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800b85c:	f000 fc94 	bl	800c188 <sqrtf>
 800b860:	eeb0 8a40 	vmov.f32	s16, s0
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800b864:	f000 fc90 	bl	800c188 <sqrtf>
 800b868:	edd4 7a03 	vldr	s15, [r4, #12]
 800b86c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b870:	ed84 0a03 	vstr	s0, [r4, #12]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800b874:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800b878:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800b9d4 <tVZFilter_calcCoeffs+0x320>
 800b87c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b880:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b884:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b888:	f000 fc12 	bl	800c0b0 <sinhf>
 800b88c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b890:	ed84 0a04 	vstr	s0, [r4, #16]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800b894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b896:	61a3      	str	r3, [r4, #24]
 800b898:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b89c:	ed84 0a07 	vstr	s0, [r4, #28]
 800b8a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b8a4:	6223      	str	r3, [r4, #32]
		break;
 800b8a6:	e737      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
		  float A = sqrtf(f->G);
 800b8a8:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800b8ac:	f000 fc6c 	bl	800c188 <sqrtf>
 800b8b0:	eeb0 8a40 	vmov.f32	s16, s0
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800b8b4:	f000 fc68 	bl	800c188 <sqrtf>
 800b8b8:	edd4 7a03 	vldr	s15, [r4, #12]
 800b8bc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b8c0:	ed84 0a03 	vstr	s0, [r4, #12]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800b8c4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800b8c8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800b9d4 <tVZFilter_calcCoeffs+0x320>
 800b8cc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b8d0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b8d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b8d8:	f000 fbea 	bl	800c0b0 <sinhf>
 800b8dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b8e0:	ed84 0a04 	vstr	s0, [r4, #16]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800b8e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b8e8:	61a3      	str	r3, [r4, #24]
 800b8ea:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b8ee:	ed84 0a07 	vstr	s0, [r4, #28]
 800b8f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b8f4:	6223      	str	r3, [r4, #32]
		break;
 800b8f6:	e70f      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800b8f8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f7ff fea1 	bl	800b644 <tVZFilter_BandwidthToR>
 800b902:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b906:	ed84 0a04 	vstr	s0, [r4, #16]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800b90a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b90e:	61a3      	str	r3, [r4, #24]
 800b910:	eeb1 0a40 	vneg.f32	s0, s0
 800b914:	ed84 0a07 	vstr	s0, [r4, #28]
 800b918:	6223      	str	r3, [r4, #32]
		break;
 800b91a:	e6fd      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
			f->R2 = 1.0f / f->G;
 800b91c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800b920:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b924:	eec8 7a87 	vdiv.f32	s15, s17, s14
 800b928:	edc4 7a04 	vstr	s15, [r4, #16]
		  float x  = 2.0f*f->m-1.0f;
 800b92c:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
 800b930:	ee38 8a08 	vadd.f32	s16, s16, s16
 800b934:	ee38 8a68 	vsub.f32	s16, s16, s17
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800b938:	ed9f 9a27 	vldr	s18, [pc, #156]	; 800b9d8 <tVZFilter_calcCoeffs+0x324>
 800b93c:	eef0 0a49 	vmov.f32	s1, s18
 800b940:	eeb1 0a48 	vneg.f32	s0, s16
 800b944:	f000 f874 	bl	800ba30 <maximum>
 800b948:	ed84 0a06 	vstr	s0, [r4, #24]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800b94c:	eef0 0a49 	vmov.f32	s1, s18
 800b950:	eeb0 0a48 	vmov.f32	s0, s16
 800b954:	f000 f877 	bl	800ba46 <minimum>
 800b958:	ed84 0a08 	vstr	s0, [r4, #32]
		  f->cB = 1.0f-x*x;
 800b95c:	ee28 8a08 	vmul.f32	s16, s16, s16
 800b960:	ee38 8ac8 	vsub.f32	s16, s17, s16
 800b964:	ed84 8a07 	vstr	s16, [r4, #28]
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800b968:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
 800b96c:	edd4 7a04 	vldr	s15, [r4, #16]
 800b970:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b974:	edd4 7a06 	vldr	s15, [r4, #24]
 800b978:	ee67 8aa7 	vmul.f32	s17, s15, s15
 800b97c:	ee28 8a08 	vmul.f32	s16, s16, s16
 800b980:	ee38 8a88 	vadd.f32	s16, s17, s16
 800b984:	ee60 6a00 	vmul.f32	s13, s0, s0
 800b988:	ee38 8a26 	vadd.f32	s16, s16, s13
 800b98c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b990:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b994:	ee38 0a40 	vsub.f32	s0, s16, s0
 800b998:	ee87 0a00 	vdiv.f32	s0, s14, s0
 800b99c:	f000 fbf4 	bl	800c188 <sqrtf>
 800b9a0:	ee29 0a00 	vmul.f32	s0, s18, s0
		  f->cL *= s; f->cB *= s; f->cH *= s;
 800b9a4:	edd4 7a06 	vldr	s15, [r4, #24]
 800b9a8:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b9ac:	edc4 7a06 	vstr	s15, [r4, #24]
 800b9b0:	edd4 7a07 	vldr	s15, [r4, #28]
 800b9b4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b9b8:	edc4 7a07 	vstr	s15, [r4, #28]
 800b9bc:	edd4 7a08 	vldr	s15, [r4, #32]
 800b9c0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b9c4:	ed84 0a08 	vstr	s0, [r4, #32]
		break;
 800b9c8:	e6a6      	b.n	800b718 <tVZFilter_calcCoeffs+0x64>
 800b9ca:	bf00      	nop
 800b9cc:	40490fdb 	.word	0x40490fdb
 800b9d0:	200084d8 	.word	0x200084d8
 800b9d4:	3f317218 	.word	0x3f317218
 800b9d8:	00000000 	.word	0x00000000

0800b9dc <tVZFilter_initToPool>:
{
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	ed2d 8b02 	vpush	{d8}
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	460d      	mov	r5, r1
 800b9e6:	eef0 8a40 	vmov.f32	s17, s0
 800b9ea:	eeb0 8a60 	vmov.f32	s16, s1
	 _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800b9ee:	6811      	ldr	r1, [r2, #0]
 800b9f0:	2038      	movs	r0, #56	; 0x38
 800b9f2:	f000 f85d 	bl	800bab0 <mpool_alloc>
 800b9f6:	6020      	str	r0, [r4, #0]
	f->fc   = freq;
 800b9f8:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
	f->type = type;
 800b9fc:	7005      	strb	r5, [r0, #0]
	f->G    = ONE_OVER_SQRT2;
 800b9fe:	4b07      	ldr	r3, [pc, #28]	; (800ba1c <tVZFilter_initToPool+0x40>)
 800ba00:	62c3      	str	r3, [r0, #44]	; 0x2c
	f->B    = bandWidth;
 800ba02:	ed80 8a0c 	vstr	s16, [r0, #48]	; 0x30
	f->m    = 0.0f;
 800ba06:	2300      	movs	r3, #0
 800ba08:	6343      	str	r3, [r0, #52]	; 0x34
	f->s1 = 0.0f;
 800ba0a:	6043      	str	r3, [r0, #4]
	f->s2 = 0.0f;
 800ba0c:	6083      	str	r3, [r0, #8]
	tVZFilter_calcCoeffs(vf);
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f7ff fe50 	bl	800b6b4 <tVZFilter_calcCoeffs>
}
 800ba14:	ecbd 8b02 	vpop	{d8}
 800ba18:	bd38      	pop	{r3, r4, r5, pc}
 800ba1a:	bf00      	nop
 800ba1c:	3f3504f3 	.word	0x3f3504f3

0800ba20 <tVZFilter_init>:
{
 800ba20:	b508      	push	{r3, lr}
	tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf.mempool);
 800ba22:	4a02      	ldr	r2, [pc, #8]	; (800ba2c <tVZFilter_init+0xc>)
 800ba24:	f7ff ffda 	bl	800b9dc <tVZFilter_initToPool>
}
 800ba28:	bd08      	pop	{r3, pc}
 800ba2a:	bf00      	nop
 800ba2c:	200084f0 	.word	0x200084f0

0800ba30 <maximum>:
}


float maximum (float num1, float num2)
{
	return (num1 > num2 ) ? num1 : num2;
 800ba30:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800ba34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba38:	dc02      	bgt.n	800ba40 <maximum+0x10>
}
 800ba3a:	eeb0 0a60 	vmov.f32	s0, s1
 800ba3e:	4770      	bx	lr
	return (num1 > num2 ) ? num1 : num2;
 800ba40:	eef0 0a40 	vmov.f32	s1, s0
 800ba44:	e7f9      	b.n	800ba3a <maximum+0xa>

0800ba46 <minimum>:

float minimum (float num1, float num2)
{
	return (num1 < num2 ) ? num1 : num2;
 800ba46:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	d402      	bmi.n	800ba56 <minimum+0x10>
}
 800ba50:	eeb0 0a60 	vmov.f32	s0, s1
 800ba54:	4770      	bx	lr
	return (num1 < num2 ) ? num1 : num2;
 800ba56:	eef0 0a40 	vmov.f32	s1, s0
 800ba5a:	e7f9      	b.n	800ba50 <minimum+0xa>

0800ba5c <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 800ba5c:	b410      	push	{r4}
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 800ba5e:	4c0e      	ldr	r4, [pc, #56]	; (800ba98 <mpool_create+0x3c>)
 800ba60:	2310      	movs	r3, #16
 800ba62:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    pool->mpool = (void*)memory;
 800ba64:	6010      	str	r0, [r2, #0]
    pool->usize  = 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	6053      	str	r3, [r2, #4]
    pool->msize  = size;
 800ba6a:	6091      	str	r1, [r2, #8]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800ba6c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800ba6e:	1b09      	subs	r1, r1, r4
}

static inline mpool_node_t* create_node(void* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + leaf.header_size;
 800ba70:	4404      	add	r4, r0
 800ba72:	6004      	str	r4, [r0, #0]
    node->next = next;
 800ba74:	6043      	str	r3, [r0, #4]
    node->prev = prev;
 800ba76:	6083      	str	r3, [r0, #8]
    node->size = size;
 800ba78:	60c1      	str	r1, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800ba7a:	60d0      	str	r0, [r2, #12]
    for (int i = 0; i < pool->head->size; i++)
 800ba7c:	e005      	b.n	800ba8a <mpool_create+0x2e>
        memory[i+leaf.header_size]=0;
 800ba7e:	4906      	ldr	r1, [pc, #24]	; (800ba98 <mpool_create+0x3c>)
 800ba80:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ba82:	4419      	add	r1, r3
 800ba84:	2400      	movs	r4, #0
 800ba86:	5444      	strb	r4, [r0, r1]
    for (int i = 0; i < pool->head->size; i++)
 800ba88:	3301      	adds	r3, #1
 800ba8a:	68d1      	ldr	r1, [r2, #12]
 800ba8c:	68c9      	ldr	r1, [r1, #12]
 800ba8e:	4299      	cmp	r1, r3
 800ba90:	d8f5      	bhi.n	800ba7e <mpool_create+0x22>
}
 800ba92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	200084d8 	.word	0x200084d8

0800ba9c <leaf_pool_init>:
{
 800ba9c:	b510      	push	{r4, lr}
    mpool_create(memory, size, &leaf._mempool);
 800ba9e:	4c03      	ldr	r4, [pc, #12]	; (800baac <leaf_pool_init+0x10>)
 800baa0:	4622      	mov	r2, r4
 800baa2:	f7ff ffdb 	bl	800ba5c <mpool_create>
    leaf.mempool = &leaf._mempool;
 800baa6:	f844 4c04 	str.w	r4, [r4, #-4]
}
 800baaa:	bd10      	pop	{r4, pc}
 800baac:	200084f4 	.word	0x200084f4

0800bab0 <mpool_alloc>:
    if (pool->head == NULL) return NULL;
 800bab0:	68cb      	ldr	r3, [r1, #12]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d049      	beq.n	800bb4a <mpool_alloc+0x9a>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800bab6:	3007      	adds	r0, #7
 800bab8:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 800babc:	68da      	ldr	r2, [r3, #12]
 800babe:	4282      	cmp	r2, r0
 800bac0:	d204      	bcs.n	800bacc <mpool_alloc+0x1c>
        node_to_alloc = node_to_alloc->next;
 800bac2:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL) return NULL;
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1f9      	bne.n	800babc <mpool_alloc+0xc>
 800bac8:	2000      	movs	r0, #0
}
 800baca:	4770      	bx	lr
{
 800bacc:	b4f0      	push	{r4, r5, r6, r7}
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800bace:	1a15      	subs	r5, r2, r0
    node_to_alloc->size = size_to_alloc;
 800bad0:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 800bad2:	4c1f      	ldr	r4, [pc, #124]	; (800bb50 <mpool_alloc+0xa0>)
 800bad4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800bad6:	42ac      	cmp	r4, r5
 800bad8:	d229      	bcs.n	800bb2e <mpool_alloc+0x7e>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800bada:	680e      	ldr	r6, [r1, #0]
 800badc:	1b9a      	subs	r2, r3, r6
        offset += leaf.header_size + node_to_alloc->size;
 800bade:	4420      	add	r0, r4
 800bae0:	4410      	add	r0, r2
        new_node = create_node(&pool->mpool[offset],
 800bae2:	1832      	adds	r2, r6, r0
                               node_to_alloc->next,
 800bae4:	f8d3 c004 	ldr.w	ip, [r3, #4]
                               node_to_alloc->prev,
 800bae8:	689f      	ldr	r7, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800baea:	1b2d      	subs	r5, r5, r4
    node->pool = block_location + leaf.header_size;
 800baec:	4414      	add	r4, r2
 800baee:	5034      	str	r4, [r6, r0]
    node->next = next;
 800baf0:	f8c2 c004 	str.w	ip, [r2, #4]
    node->prev = prev;
 800baf4:	6097      	str	r7, [r2, #8]
    node->size = size;
 800baf6:	60d5      	str	r5, [r2, #12]
    if (pool->head == node_to_alloc)
 800baf8:	68c8      	ldr	r0, [r1, #12]
 800bafa:	4298      	cmp	r0, r3
 800bafc:	d01a      	beq.n	800bb34 <mpool_alloc+0x84>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	b10a      	cbz	r2, 800bb06 <mpool_alloc+0x56>
    {
        // Close the link
        node->next->prev = node->prev;
 800bb02:	6898      	ldr	r0, [r3, #8]
 800bb04:	6090      	str	r0, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800bb06:	689a      	ldr	r2, [r3, #8]
 800bb08:	b10a      	cbz	r2, 800bb0e <mpool_alloc+0x5e>
    {
        // Close the link
        node->prev->next = node->next;
 800bb0a:	6858      	ldr	r0, [r3, #4]
 800bb0c:	6050      	str	r0, [r2, #4]
    }
    
    node->next = NULL;
 800bb0e:	2200      	movs	r2, #0
 800bb10:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800bb12:	609a      	str	r2, [r3, #8]
    pool->usize += leaf.header_size + node_to_alloc->size;
 800bb14:	4c0e      	ldr	r4, [pc, #56]	; (800bb50 <mpool_alloc+0xa0>)
 800bb16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb18:	68d8      	ldr	r0, [r3, #12]
 800bb1a:	4410      	add	r0, r2
 800bb1c:	684a      	ldr	r2, [r1, #4]
 800bb1e:	4402      	add	r2, r0
 800bb20:	604a      	str	r2, [r1, #4]
    if (leaf.clearOnAllocation > 0)
 800bb22:	6962      	ldr	r2, [r4, #20]
 800bb24:	2a00      	cmp	r2, #0
 800bb26:	dd0d      	ble.n	800bb44 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 800bb28:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	e007      	b.n	800bb3e <mpool_alloc+0x8e>
        node_to_alloc->size += leftover;
 800bb2e:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	e7e1      	b.n	800baf8 <mpool_alloc+0x48>
        pool->head = new_node;
 800bb34:	60ca      	str	r2, [r1, #12]
 800bb36:	e7e2      	b.n	800bafe <mpool_alloc+0x4e>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800bb38:	2100      	movs	r1, #0
 800bb3a:	5481      	strb	r1, [r0, r2]
 800bb3c:	3201      	adds	r2, #1
 800bb3e:	68d9      	ldr	r1, [r3, #12]
 800bb40:	4291      	cmp	r1, r2
 800bb42:	d8f9      	bhi.n	800bb38 <mpool_alloc+0x88>
    return node_to_alloc->pool;
 800bb44:	6818      	ldr	r0, [r3, #0]
}
 800bb46:	bcf0      	pop	{r4, r5, r6, r7}
 800bb48:	4770      	bx	lr
    if (pool->head == NULL) return NULL;
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	200084d8 	.word	0x200084d8

0800bb54 <tMempool_initToPool>:
{
    tMempool_freeFromPool(mp, &leaf.mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 800bb54:	b570      	push	{r4, r5, r6, lr}
 800bb56:	4606      	mov	r6, r0
 800bb58:	460c      	mov	r4, r1
 800bb5a:	4615      	mov	r5, r2
    _tMempool* mm = *mem;
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800bb5c:	6819      	ldr	r1, [r3, #0]
 800bb5e:	2010      	movs	r0, #16
 800bb60:	f7ff ffa6 	bl	800bab0 <mpool_alloc>
 800bb64:	4602      	mov	r2, r0
 800bb66:	6030      	str	r0, [r6, #0]
    
    mpool_create (memory, size, m);
 800bb68:	4629      	mov	r1, r5
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f7ff ff76 	bl	800ba5c <mpool_create>
}
 800bb70:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb74 <tMempool_init>:
{
 800bb74:	b508      	push	{r3, lr}
    tMempool_initToPool(mp, memory, size, &leaf.mempool);
 800bb76:	4b02      	ldr	r3, [pc, #8]	; (800bb80 <tMempool_init+0xc>)
 800bb78:	f7ff ffec 	bl	800bb54 <tMempool_initToPool>
}
 800bb7c:	bd08      	pop	{r3, pc}
 800bb7e:	bf00      	nop
 800bb80:	200084f0 	.word	0x200084f0

0800bb84 <tNoise_initToPool>:
{
    tNoise_freeFromPool(ns, &leaf.mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4605      	mov	r5, r0
 800bb88:	460c      	mov	r4, r1
    _tMempool* m = *mp;
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 800bb8a:	6811      	ldr	r1, [r2, #0]
 800bb8c:	2014      	movs	r0, #20
 800bb8e:	f7ff ff8f 	bl	800bab0 <mpool_alloc>
 800bb92:	6028      	str	r0, [r5, #0]
    
    n->type = type;
 800bb94:	7004      	strb	r4, [r0, #0]
    n->rand = leaf.random;
 800bb96:	4b02      	ldr	r3, [pc, #8]	; (800bba0 <tNoise_initToPool+0x1c>)
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	6103      	str	r3, [r0, #16]
}
 800bb9c:	bd38      	pop	{r3, r4, r5, pc}
 800bb9e:	bf00      	nop
 800bba0:	200084d8 	.word	0x200084d8

0800bba4 <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	ed2d 8b02 	vpush	{d8}
 800bbaa:	eeb0 8a40 	vmov.f32	s16, s0
 800bbae:	4605      	mov	r5, r0
 800bbb0:	4608      	mov	r0, r1
 800bbb2:	461c      	mov	r4, r3
    leaf_pool_init(memory, memorysize);
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	f7ff ff71 	bl	800ba9c <leaf_pool_init>
    
    leaf.sampleRate = sr;
 800bbba:	4b0b      	ldr	r3, [pc, #44]	; (800bbe8 <LEAF_init+0x44>)
 800bbbc:	ed83 8a00 	vstr	s16, [r3]

    leaf.blockSize = blocksize;
 800bbc0:	609d      	str	r5, [r3, #8]
    
    leaf.invSampleRate = 1.0f/sr;
 800bbc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbc6:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800bbca:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 800bbce:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800bbec <LEAF_init+0x48>
 800bbd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbd6:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf.random = random;
 800bbda:	611c      	str	r4, [r3, #16]
    
    leaf.clearOnAllocation = 0;
 800bbdc:	2200      	movs	r2, #0
 800bbde:	615a      	str	r2, [r3, #20]
}
 800bbe0:	ecbd 8b02 	vpop	{d8}
 800bbe4:	bd38      	pop	{r3, r4, r5, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200084d8 	.word	0x200084d8
 800bbec:	40c90fdb 	.word	0x40c90fdb

0800bbf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bbf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bc28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bbf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bbf6:	e003      	b.n	800bc00 <LoopCopyDataInit>

0800bbf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bbf8:	4b0c      	ldr	r3, [pc, #48]	; (800bc2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bbfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bbfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bbfe:	3104      	adds	r1, #4

0800bc00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bc00:	480b      	ldr	r0, [pc, #44]	; (800bc30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bc02:	4b0c      	ldr	r3, [pc, #48]	; (800bc34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bc04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bc06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bc08:	d3f6      	bcc.n	800bbf8 <CopyDataInit>
  ldr  r2, =_sbss
 800bc0a:	4a0b      	ldr	r2, [pc, #44]	; (800bc38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bc0c:	e002      	b.n	800bc14 <LoopFillZerobss>

0800bc0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bc0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bc10:	f842 3b04 	str.w	r3, [r2], #4

0800bc14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bc14:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bc16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bc18:	d3f9      	bcc.n	800bc0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bc1a:	f7ff f9e9 	bl	800aff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bc1e:	f000 f817 	bl	800bc50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bc22:	f7fe fe6d 	bl	800a900 <main>
  bx  lr    
 800bc26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bc28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bc2c:	0800d744 	.word	0x0800d744
  ldr  r0, =_sdata
 800bc30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bc34:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800bc38:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800bc3c:	20008508 	.word	0x20008508

0800bc40 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bc40:	e7fe      	b.n	800bc40 <ADC3_IRQHandler>
	...

0800bc44 <__errno>:
 800bc44:	4b01      	ldr	r3, [pc, #4]	; (800bc4c <__errno+0x8>)
 800bc46:	6818      	ldr	r0, [r3, #0]
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	2000001c 	.word	0x2000001c

0800bc50 <__libc_init_array>:
 800bc50:	b570      	push	{r4, r5, r6, lr}
 800bc52:	4e0d      	ldr	r6, [pc, #52]	; (800bc88 <__libc_init_array+0x38>)
 800bc54:	4c0d      	ldr	r4, [pc, #52]	; (800bc8c <__libc_init_array+0x3c>)
 800bc56:	1ba4      	subs	r4, r4, r6
 800bc58:	10a4      	asrs	r4, r4, #2
 800bc5a:	2500      	movs	r5, #0
 800bc5c:	42a5      	cmp	r5, r4
 800bc5e:	d109      	bne.n	800bc74 <__libc_init_array+0x24>
 800bc60:	4e0b      	ldr	r6, [pc, #44]	; (800bc90 <__libc_init_array+0x40>)
 800bc62:	4c0c      	ldr	r4, [pc, #48]	; (800bc94 <__libc_init_array+0x44>)
 800bc64:	f001 fa14 	bl	800d090 <_init>
 800bc68:	1ba4      	subs	r4, r4, r6
 800bc6a:	10a4      	asrs	r4, r4, #2
 800bc6c:	2500      	movs	r5, #0
 800bc6e:	42a5      	cmp	r5, r4
 800bc70:	d105      	bne.n	800bc7e <__libc_init_array+0x2e>
 800bc72:	bd70      	pop	{r4, r5, r6, pc}
 800bc74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc78:	4798      	blx	r3
 800bc7a:	3501      	adds	r5, #1
 800bc7c:	e7ee      	b.n	800bc5c <__libc_init_array+0xc>
 800bc7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc82:	4798      	blx	r3
 800bc84:	3501      	adds	r5, #1
 800bc86:	e7f2      	b.n	800bc6e <__libc_init_array+0x1e>
 800bc88:	0800d73c 	.word	0x0800d73c
 800bc8c:	0800d73c 	.word	0x0800d73c
 800bc90:	0800d73c 	.word	0x0800d73c
 800bc94:	0800d740 	.word	0x0800d740

0800bc98 <memset>:
 800bc98:	4402      	add	r2, r0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d100      	bne.n	800bca2 <memset+0xa>
 800bca0:	4770      	bx	lr
 800bca2:	f803 1b01 	strb.w	r1, [r3], #1
 800bca6:	e7f9      	b.n	800bc9c <memset+0x4>

0800bca8 <expf>:
 800bca8:	ee10 2a10 	vmov	r2, s0
 800bcac:	f240 412a 	movw	r1, #1066	; 0x42a
 800bcb0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800bcb4:	428b      	cmp	r3, r1
 800bcb6:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800bcba:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800bcbe:	d92e      	bls.n	800bd1e <expf+0x76>
 800bcc0:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800bcc4:	d061      	beq.n	800bd8a <expf+0xe2>
 800bcc6:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800bcca:	d304      	bcc.n	800bcd6 <expf+0x2e>
 800bccc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bcd0:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800bcd4:	4770      	bx	lr
 800bcd6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800bd90 <expf+0xe8>
 800bcda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce2:	dd04      	ble.n	800bcee <expf+0x46>
 800bce4:	2000      	movs	r0, #0
 800bce6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800bcea:	f000 bfc7 	b.w	800cc7c <__math_oflowf>
 800bcee:	eddf 7a29 	vldr	s15, [pc, #164]	; 800bd94 <expf+0xec>
 800bcf2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bcf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfa:	d504      	bpl.n	800bd06 <expf+0x5e>
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800bd02:	f000 bfaf 	b.w	800cc64 <__math_uflowf>
 800bd06:	eddf 7a24 	vldr	s15, [pc, #144]	; 800bd98 <expf+0xf0>
 800bd0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd12:	d504      	bpl.n	800bd1e <expf+0x76>
 800bd14:	2000      	movs	r0, #0
 800bd16:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800bd1a:	f000 bfa9 	b.w	800cc70 <__math_may_uflowf>
 800bd1e:	491f      	ldr	r1, [pc, #124]	; (800bd9c <expf+0xf4>)
 800bd20:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bd24:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800bd28:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800bd2c:	eeb0 4b47 	vmov.f64	d4, d7
 800bd30:	eea5 4b06 	vfma.f64	d4, d5, d6
 800bd34:	ec55 4b14 	vmov	r4, r5, d4
 800bd38:	ee34 7b47 	vsub.f64	d7, d4, d7
 800bd3c:	f004 021f 	and.w	r2, r4, #31
 800bd40:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800bd44:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bd48:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800bd4c:	e9d2 4500 	ldrd	r4, r5, [r2]
 800bd50:	eea6 0b07 	vfma.f64	d0, d6, d7
 800bd54:	ee14 0a10 	vmov	r0, s8
 800bd58:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800bd5c:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 800bd60:	f04f 0b00 	mov.w	fp, #0
 800bd64:	eb1b 0204 	adds.w	r2, fp, r4
 800bd68:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800bd6c:	eb4c 0305 	adc.w	r3, ip, r5
 800bd70:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bd74:	ee27 7b07 	vmul.f64	d7, d7, d7
 800bd78:	eea6 0b07 	vfma.f64	d0, d6, d7
 800bd7c:	ec43 2b17 	vmov	d7, r2, r3
 800bd80:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd84:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bd88:	e7a2      	b.n	800bcd0 <expf+0x28>
 800bd8a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800bda0 <expf+0xf8>
 800bd8e:	e79f      	b.n	800bcd0 <expf+0x28>
 800bd90:	42b17217 	.word	0x42b17217
 800bd94:	c2cff1b4 	.word	0xc2cff1b4
 800bd98:	c2ce8ecf 	.word	0xc2ce8ecf
 800bd9c:	0800d0e8 	.word	0x0800d0e8
 800bda0:	00000000 	.word	0x00000000

0800bda4 <fabsf>:
 800bda4:	ee10 3a10 	vmov	r3, s0
 800bda8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdac:	ee00 3a10 	vmov	s0, r3
 800bdb0:	4770      	bx	lr

0800bdb2 <checkint>:
 800bdb2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bdb6:	2b7e      	cmp	r3, #126	; 0x7e
 800bdb8:	dd10      	ble.n	800bddc <checkint+0x2a>
 800bdba:	2b96      	cmp	r3, #150	; 0x96
 800bdbc:	dc0c      	bgt.n	800bdd8 <checkint+0x26>
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800bdc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc8:	1e5a      	subs	r2, r3, #1
 800bdca:	4202      	tst	r2, r0
 800bdcc:	d106      	bne.n	800bddc <checkint+0x2a>
 800bdce:	4203      	tst	r3, r0
 800bdd0:	bf0c      	ite	eq
 800bdd2:	2002      	moveq	r0, #2
 800bdd4:	2001      	movne	r0, #1
 800bdd6:	4770      	bx	lr
 800bdd8:	2002      	movs	r0, #2
 800bdda:	4770      	bx	lr
 800bddc:	2000      	movs	r0, #0
 800bdde:	4770      	bx	lr

0800bde0 <powf>:
 800bde0:	ee10 1a10 	vmov	r1, s0
 800bde4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800bde8:	ee10 4a90 	vmov	r4, s1
 800bdec:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800bdf0:	0062      	lsls	r2, r4, #1
 800bdf2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bdf6:	eef0 4a60 	vmov.f32	s9, s1
 800bdfa:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800bdfe:	4b92      	ldr	r3, [pc, #584]	; (800c048 <powf+0x268>)
 800be00:	d255      	bcs.n	800beae <powf+0xce>
 800be02:	4298      	cmp	r0, r3
 800be04:	d855      	bhi.n	800beb2 <powf+0xd2>
 800be06:	2000      	movs	r0, #0
 800be08:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800be0c:	4a8f      	ldr	r2, [pc, #572]	; (800c04c <powf+0x26c>)
 800be0e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 800be12:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800be16:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800be1a:	0ddb      	lsrs	r3, r3, #23
 800be1c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800be20:	05db      	lsls	r3, r3, #23
 800be22:	ed94 6b00 	vldr	d6, [r4]
 800be26:	1ac9      	subs	r1, r1, r3
 800be28:	ee07 1a90 	vmov	s15, r1
 800be2c:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 800be30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800be34:	eea6 2b07 	vfma.f64	d2, d6, d7
 800be38:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 800be3c:	ee22 6b02 	vmul.f64	d6, d2, d2
 800be40:	eea2 7b05 	vfma.f64	d7, d2, d5
 800be44:	15db      	asrs	r3, r3, #23
 800be46:	ed94 5b02 	vldr	d5, [r4, #8]
 800be4a:	ee00 3a10 	vmov	s0, r3
 800be4e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800be52:	ee30 0b05 	vadd.f64	d0, d0, d5
 800be56:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 800be5a:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 800be5e:	eea2 0b05 	vfma.f64	d0, d2, d5
 800be62:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 800be66:	eea2 5b03 	vfma.f64	d5, d2, d3
 800be6a:	eea6 0b05 	vfma.f64	d0, d6, d5
 800be6e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800be72:	eea7 0b06 	vfma.f64	d0, d7, d6
 800be76:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 800be7a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800be7e:	ee10 3a90 	vmov	r3, s1
 800be82:	2500      	movs	r5, #0
 800be84:	0bda      	lsrs	r2, r3, #15
 800be86:	2300      	movs	r3, #0
 800be88:	b292      	uxth	r2, r2
 800be8a:	f248 04be 	movw	r4, #32958	; 0x80be
 800be8e:	429d      	cmp	r5, r3
 800be90:	bf08      	it	eq
 800be92:	4294      	cmpeq	r4, r2
 800be94:	f080 8094 	bcs.w	800bfc0 <powf+0x1e0>
 800be98:	ed9f 7b65 	vldr	d7, [pc, #404]	; 800c030 <powf+0x250>
 800be9c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea4:	dd76      	ble.n	800bf94 <powf+0x1b4>
 800bea6:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800beaa:	f000 bee7 	b.w	800cc7c <__math_oflowf>
 800beae:	4298      	cmp	r0, r3
 800beb0:	d92d      	bls.n	800bf0e <powf+0x12e>
 800beb2:	b952      	cbnz	r2, 800beca <powf+0xea>
 800beb4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800bebe:	f240 80ae 	bls.w	800c01e <powf+0x23e>
 800bec2:	ee30 0a24 	vadd.f32	s0, s0, s9
 800bec6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800beca:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800bece:	d105      	bne.n	800bedc <powf+0xfc>
 800bed0:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800bed4:	0064      	lsls	r4, r4, #1
 800bed6:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800beda:	e7f0      	b.n	800bebe <powf+0xde>
 800bedc:	004b      	lsls	r3, r1, #1
 800bede:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800bee2:	d8ee      	bhi.n	800bec2 <powf+0xe2>
 800bee4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800bee8:	d1eb      	bne.n	800bec2 <powf+0xe2>
 800beea:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800beee:	f000 8096 	beq.w	800c01e <powf+0x23e>
 800bef2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bef6:	ea6f 0404 	mvn.w	r4, r4
 800befa:	bf34      	ite	cc
 800befc:	2300      	movcc	r3, #0
 800befe:	2301      	movcs	r3, #1
 800bf00:	0fe4      	lsrs	r4, r4, #31
 800bf02:	42a3      	cmp	r3, r4
 800bf04:	f040 808e 	bne.w	800c024 <powf+0x244>
 800bf08:	ee24 0aa4 	vmul.f32	s0, s9, s9
 800bf0c:	e7db      	b.n	800bec6 <powf+0xe6>
 800bf0e:	004d      	lsls	r5, r1, #1
 800bf10:	1e6a      	subs	r2, r5, #1
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d91b      	bls.n	800bf4e <powf+0x16e>
 800bf16:	2900      	cmp	r1, #0
 800bf18:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bf1c:	da0e      	bge.n	800bf3c <powf+0x15c>
 800bf1e:	ee10 0a90 	vmov	r0, s1
 800bf22:	f7ff ff46 	bl	800bdb2 <checkint>
 800bf26:	2801      	cmp	r0, #1
 800bf28:	d108      	bne.n	800bf3c <powf+0x15c>
 800bf2a:	eeb1 0a40 	vneg.f32	s0, s0
 800bf2e:	b93d      	cbnz	r5, 800bf40 <powf+0x160>
 800bf30:	2c00      	cmp	r4, #0
 800bf32:	dac8      	bge.n	800bec6 <powf+0xe6>
 800bf34:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800bf38:	f000 bea6 	b.w	800cc88 <__math_divzerof>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	e7f6      	b.n	800bf2e <powf+0x14e>
 800bf40:	2c00      	cmp	r4, #0
 800bf42:	dac0      	bge.n	800bec6 <powf+0xe6>
 800bf44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bf48:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bf4c:	e7bb      	b.n	800bec6 <powf+0xe6>
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	da1e      	bge.n	800bf90 <powf+0x1b0>
 800bf52:	ee10 0a90 	vmov	r0, s1
 800bf56:	f7ff ff2c 	bl	800bdb2 <checkint>
 800bf5a:	b918      	cbnz	r0, 800bf64 <powf+0x184>
 800bf5c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800bf60:	f000 bea2 	b.w	800cca8 <__math_invalidf>
 800bf64:	2801      	cmp	r0, #1
 800bf66:	bf0c      	ite	eq
 800bf68:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bf6c:	2000      	movne	r0, #0
 800bf6e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bf72:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800bf76:	f4bf af47 	bcs.w	800be08 <powf+0x28>
 800bf7a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c050 <powf+0x270>
 800bf7e:	ee20 0a20 	vmul.f32	s0, s0, s1
 800bf82:	ee10 3a10 	vmov	r3, s0
 800bf86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf8a:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800bf8e:	e73b      	b.n	800be08 <powf+0x28>
 800bf90:	2000      	movs	r0, #0
 800bf92:	e7ee      	b.n	800bf72 <powf+0x192>
 800bf94:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800c038 <powf+0x258>
 800bf98:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa0:	d803      	bhi.n	800bfaa <powf+0x1ca>
 800bfa2:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800bfa6:	f000 be5d 	b.w	800cc64 <__math_uflowf>
 800bfaa:	ed9f 7b25 	vldr	d7, [pc, #148]	; 800c040 <powf+0x260>
 800bfae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb6:	d503      	bpl.n	800bfc0 <powf+0x1e0>
 800bfb8:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800bfbc:	f000 be58 	b.w	800cc70 <__math_may_uflowf>
 800bfc0:	4924      	ldr	r1, [pc, #144]	; (800c054 <powf+0x274>)
 800bfc2:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 800bfc6:	ee30 6b07 	vadd.f64	d6, d0, d7
 800bfca:	ec55 4b16 	vmov	r4, r5, d6
 800bfce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bfd2:	f004 021f 	and.w	r2, r4, #31
 800bfd6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bfda:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 800bfde:	ee30 0b47 	vsub.f64	d0, d0, d7
 800bfe2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bfe6:	e9d2 6700 	ldrd	r6, r7, [r2]
 800bfea:	eea0 7b06 	vfma.f64	d7, d0, d6
 800bfee:	1824      	adds	r4, r4, r0
 800bff0:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800bff4:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 800bff8:	2000      	movs	r0, #0
 800bffa:	1982      	adds	r2, r0, r6
 800bffc:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 800c000:	eb41 0307 	adc.w	r3, r1, r7
 800c004:	eea0 6b05 	vfma.f64	d6, d0, d5
 800c008:	ee20 0b00 	vmul.f64	d0, d0, d0
 800c00c:	eea6 7b00 	vfma.f64	d7, d6, d0
 800c010:	ec43 2b16 	vmov	d6, r2, r3
 800c014:	ee27 0b06 	vmul.f64	d0, d7, d6
 800c018:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c01c:	e753      	b.n	800bec6 <powf+0xe6>
 800c01e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c022:	e750      	b.n	800bec6 <powf+0xe6>
 800c024:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c058 <powf+0x278>
 800c028:	e74d      	b.n	800bec6 <powf+0xe6>
 800c02a:	bf00      	nop
 800c02c:	f3af 8000 	nop.w
 800c030:	ffd1d571 	.word	0xffd1d571
 800c034:	405fffff 	.word	0x405fffff
 800c038:	00000000 	.word	0x00000000
 800c03c:	c062c000 	.word	0xc062c000
 800c040:	00000000 	.word	0x00000000
 800c044:	c062a000 	.word	0xc062a000
 800c048:	fefffffe 	.word	0xfefffffe
 800c04c:	0800d230 	.word	0x0800d230
 800c050:	4b000000 	.word	0x4b000000
 800c054:	0800d0e8 	.word	0x0800d0e8
 800c058:	00000000 	.word	0x00000000

0800c05c <tanf>:
 800c05c:	ee10 3a10 	vmov	r3, s0
 800c060:	b507      	push	{r0, r1, r2, lr}
 800c062:	4a10      	ldr	r2, [pc, #64]	; (800c0a4 <tanf+0x48>)
 800c064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c068:	4293      	cmp	r3, r2
 800c06a:	dc05      	bgt.n	800c078 <tanf+0x1c>
 800c06c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800c0a8 <tanf+0x4c>
 800c070:	2001      	movs	r0, #1
 800c072:	f000 fcf9 	bl	800ca68 <__kernel_tanf>
 800c076:	e004      	b.n	800c082 <tanf+0x26>
 800c078:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c07c:	db04      	blt.n	800c088 <tanf+0x2c>
 800c07e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c082:	b003      	add	sp, #12
 800c084:	f85d fb04 	ldr.w	pc, [sp], #4
 800c088:	4668      	mov	r0, sp
 800c08a:	f000 f8cd 	bl	800c228 <__ieee754_rem_pio2f>
 800c08e:	0040      	lsls	r0, r0, #1
 800c090:	f000 0002 	and.w	r0, r0, #2
 800c094:	f1c0 0001 	rsb	r0, r0, #1
 800c098:	eddd 0a01 	vldr	s1, [sp, #4]
 800c09c:	ed9d 0a00 	vldr	s0, [sp]
 800c0a0:	e7e7      	b.n	800c072 <tanf+0x16>
 800c0a2:	bf00      	nop
 800c0a4:	3f490fda 	.word	0x3f490fda
	...

0800c0b0 <sinhf>:
 800c0b0:	b530      	push	{r4, r5, lr}
 800c0b2:	ed2d 8b02 	vpush	{d8}
 800c0b6:	4c32      	ldr	r4, [pc, #200]	; (800c180 <sinhf+0xd0>)
 800c0b8:	b08b      	sub	sp, #44	; 0x2c
 800c0ba:	eef0 8a40 	vmov.f32	s17, s0
 800c0be:	f000 f9df 	bl	800c480 <__ieee754_sinhf>
 800c0c2:	f994 3000 	ldrsb.w	r3, [r4]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	eeb0 8a40 	vmov.f32	s16, s0
 800c0cc:	d030      	beq.n	800c130 <sinhf+0x80>
 800c0ce:	f000 ff27 	bl	800cf20 <finitef>
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	bb60      	cbnz	r0, 800c130 <sinhf+0x80>
 800c0d6:	eeb0 0a68 	vmov.f32	s0, s17
 800c0da:	f000 ff21 	bl	800cf20 <finitef>
 800c0de:	b338      	cbz	r0, 800c130 <sinhf+0x80>
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	4b27      	ldr	r3, [pc, #156]	; (800c184 <sinhf+0xd4>)
 800c0e6:	9301      	str	r3, [sp, #4]
 800c0e8:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 800c0ec:	f994 3000 	ldrsb.w	r3, [r4]
 800c0f0:	9508      	str	r5, [sp, #32]
 800c0f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c0f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0fa:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c0fe:	b9eb      	cbnz	r3, 800c13c <sinhf+0x8c>
 800c100:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800c160 <sinhf+0xb0>
 800c104:	ed9f 6b18 	vldr	d6, [pc, #96]	; 800c168 <sinhf+0xb8>
 800c108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10c:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800c110:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c114:	4668      	mov	r0, sp
 800c116:	f000 fdd6 	bl	800ccc6 <matherr>
 800c11a:	b1d8      	cbz	r0, 800c154 <sinhf+0xa4>
 800c11c:	9b08      	ldr	r3, [sp, #32]
 800c11e:	b11b      	cbz	r3, 800c128 <sinhf+0x78>
 800c120:	f7ff fd90 	bl	800bc44 <__errno>
 800c124:	9b08      	ldr	r3, [sp, #32]
 800c126:	6003      	str	r3, [r0, #0]
 800c128:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c12c:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 800c130:	eeb0 0a48 	vmov.f32	s0, s16
 800c134:	b00b      	add	sp, #44	; 0x2c
 800c136:	ecbd 8b02 	vpop	{d8}
 800c13a:	bd30      	pop	{r4, r5, pc}
 800c13c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800c170 <sinhf+0xc0>
 800c140:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800c178 <sinhf+0xc8>
 800c144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c148:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c152:	d1df      	bne.n	800c114 <sinhf+0x64>
 800c154:	f7ff fd76 	bl	800bc44 <__errno>
 800c158:	2322      	movs	r3, #34	; 0x22
 800c15a:	6003      	str	r3, [r0, #0]
 800c15c:	e7de      	b.n	800c11c <sinhf+0x6c>
 800c15e:	bf00      	nop
 800c160:	e0000000 	.word	0xe0000000
 800c164:	47efffff 	.word	0x47efffff
 800c168:	e0000000 	.word	0xe0000000
 800c16c:	c7efffff 	.word	0xc7efffff
 800c170:	00000000 	.word	0x00000000
 800c174:	7ff00000 	.word	0x7ff00000
 800c178:	00000000 	.word	0x00000000
 800c17c:	fff00000 	.word	0xfff00000
 800c180:	20000080 	.word	0x20000080
 800c184:	0800d358 	.word	0x0800d358

0800c188 <sqrtf>:
 800c188:	b500      	push	{lr}
 800c18a:	ed2d 8b02 	vpush	{d8}
 800c18e:	b08b      	sub	sp, #44	; 0x2c
 800c190:	eeb0 8a40 	vmov.f32	s16, s0
 800c194:	f000 f9e2 	bl	800c55c <__ieee754_sqrtf>
 800c198:	4b21      	ldr	r3, [pc, #132]	; (800c220 <sqrtf+0x98>)
 800c19a:	f993 3000 	ldrsb.w	r3, [r3]
 800c19e:	1c5a      	adds	r2, r3, #1
 800c1a0:	d028      	beq.n	800c1f4 <sqrtf+0x6c>
 800c1a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1aa:	d623      	bvs.n	800c1f4 <sqrtf+0x6c>
 800c1ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b4:	d51e      	bpl.n	800c1f4 <sqrtf+0x6c>
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800c1bc:	9200      	str	r2, [sp, #0]
 800c1be:	4a19      	ldr	r2, [pc, #100]	; (800c224 <sqrtf+0x9c>)
 800c1c0:	9201      	str	r2, [sp, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	9208      	str	r2, [sp, #32]
 800c1c6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c1ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c1ce:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800c218 <sqrtf+0x90>
 800c1d2:	b9a3      	cbnz	r3, 800c1fe <sqrtf+0x76>
 800c1d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1d8:	4668      	mov	r0, sp
 800c1da:	f000 fd74 	bl	800ccc6 <matherr>
 800c1de:	b1a0      	cbz	r0, 800c20a <sqrtf+0x82>
 800c1e0:	9b08      	ldr	r3, [sp, #32]
 800c1e2:	b11b      	cbz	r3, 800c1ec <sqrtf+0x64>
 800c1e4:	f7ff fd2e 	bl	800bc44 <__errno>
 800c1e8:	9b08      	ldr	r3, [sp, #32]
 800c1ea:	6003      	str	r3, [r0, #0]
 800c1ec:	ed9d 0b06 	vldr	d0, [sp, #24]
 800c1f0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c1f4:	b00b      	add	sp, #44	; 0x2c
 800c1f6:	ecbd 8b02 	vpop	{d8}
 800c1fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800c204:	ed8d 6b06 	vstr	d6, [sp, #24]
 800c208:	d1e6      	bne.n	800c1d8 <sqrtf+0x50>
 800c20a:	f7ff fd1b 	bl	800bc44 <__errno>
 800c20e:	2321      	movs	r3, #33	; 0x21
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	e7e5      	b.n	800c1e0 <sqrtf+0x58>
 800c214:	f3af 8000 	nop.w
	...
 800c220:	20000080 	.word	0x20000080
 800c224:	0800d35e 	.word	0x0800d35e

0800c228 <__ieee754_rem_pio2f>:
 800c228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c22a:	ee10 6a10 	vmov	r6, s0
 800c22e:	4b86      	ldr	r3, [pc, #536]	; (800c448 <__ieee754_rem_pio2f+0x220>)
 800c230:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800c234:	429c      	cmp	r4, r3
 800c236:	b087      	sub	sp, #28
 800c238:	4605      	mov	r5, r0
 800c23a:	dc05      	bgt.n	800c248 <__ieee754_rem_pio2f+0x20>
 800c23c:	2300      	movs	r3, #0
 800c23e:	ed85 0a00 	vstr	s0, [r5]
 800c242:	6043      	str	r3, [r0, #4]
 800c244:	2000      	movs	r0, #0
 800c246:	e020      	b.n	800c28a <__ieee754_rem_pio2f+0x62>
 800c248:	4b80      	ldr	r3, [pc, #512]	; (800c44c <__ieee754_rem_pio2f+0x224>)
 800c24a:	429c      	cmp	r4, r3
 800c24c:	dc38      	bgt.n	800c2c0 <__ieee754_rem_pio2f+0x98>
 800c24e:	2e00      	cmp	r6, #0
 800c250:	f024 040f 	bic.w	r4, r4, #15
 800c254:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800c450 <__ieee754_rem_pio2f+0x228>
 800c258:	4b7e      	ldr	r3, [pc, #504]	; (800c454 <__ieee754_rem_pio2f+0x22c>)
 800c25a:	dd18      	ble.n	800c28e <__ieee754_rem_pio2f+0x66>
 800c25c:	429c      	cmp	r4, r3
 800c25e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c262:	bf09      	itett	eq
 800c264:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800c458 <__ieee754_rem_pio2f+0x230>
 800c268:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800c45c <__ieee754_rem_pio2f+0x234>
 800c26c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c270:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800c460 <__ieee754_rem_pio2f+0x238>
 800c274:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c278:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c27c:	edc0 6a00 	vstr	s13, [r0]
 800c280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c284:	edc0 7a01 	vstr	s15, [r0, #4]
 800c288:	2001      	movs	r0, #1
 800c28a:	b007      	add	sp, #28
 800c28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c28e:	429c      	cmp	r4, r3
 800c290:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c294:	bf09      	itett	eq
 800c296:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800c458 <__ieee754_rem_pio2f+0x230>
 800c29a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800c45c <__ieee754_rem_pio2f+0x234>
 800c29e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c2a2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800c460 <__ieee754_rem_pio2f+0x238>
 800c2a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c2aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c2ae:	edc0 6a00 	vstr	s13, [r0]
 800c2b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2b6:	edc0 7a01 	vstr	s15, [r0, #4]
 800c2ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2be:	e7e4      	b.n	800c28a <__ieee754_rem_pio2f+0x62>
 800c2c0:	4b68      	ldr	r3, [pc, #416]	; (800c464 <__ieee754_rem_pio2f+0x23c>)
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	dc71      	bgt.n	800c3aa <__ieee754_rem_pio2f+0x182>
 800c2c6:	f7ff fd6d 	bl	800bda4 <fabsf>
 800c2ca:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c468 <__ieee754_rem_pio2f+0x240>
 800c2ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c2d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c2d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2da:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800c2de:	ee17 0a90 	vmov	r0, s15
 800c2e2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c450 <__ieee754_rem_pio2f+0x228>
 800c2e6:	eeb1 7a46 	vneg.f32	s14, s12
 800c2ea:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c2ee:	281f      	cmp	r0, #31
 800c2f0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c45c <__ieee754_rem_pio2f+0x234>
 800c2f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c2f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c2fc:	ee16 3a90 	vmov	r3, s13
 800c300:	dc1c      	bgt.n	800c33c <__ieee754_rem_pio2f+0x114>
 800c302:	1e47      	subs	r7, r0, #1
 800c304:	4959      	ldr	r1, [pc, #356]	; (800c46c <__ieee754_rem_pio2f+0x244>)
 800c306:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c30a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800c30e:	428a      	cmp	r2, r1
 800c310:	d014      	beq.n	800c33c <__ieee754_rem_pio2f+0x114>
 800c312:	602b      	str	r3, [r5, #0]
 800c314:	ed95 7a00 	vldr	s14, [r5]
 800c318:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c322:	ed85 0a01 	vstr	s0, [r5, #4]
 800c326:	dab0      	bge.n	800c28a <__ieee754_rem_pio2f+0x62>
 800c328:	eeb1 7a47 	vneg.f32	s14, s14
 800c32c:	eeb1 0a40 	vneg.f32	s0, s0
 800c330:	ed85 7a00 	vstr	s14, [r5]
 800c334:	ed85 0a01 	vstr	s0, [r5, #4]
 800c338:	4240      	negs	r0, r0
 800c33a:	e7a6      	b.n	800c28a <__ieee754_rem_pio2f+0x62>
 800c33c:	15e4      	asrs	r4, r4, #23
 800c33e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c342:	1aa2      	subs	r2, r4, r2
 800c344:	2a08      	cmp	r2, #8
 800c346:	dde4      	ble.n	800c312 <__ieee754_rem_pio2f+0xea>
 800c348:	eddf 7a43 	vldr	s15, [pc, #268]	; 800c458 <__ieee754_rem_pio2f+0x230>
 800c34c:	eef0 6a40 	vmov.f32	s13, s0
 800c350:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c354:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c358:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c35c:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c460 <__ieee754_rem_pio2f+0x238>
 800c360:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800c364:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800c368:	eef0 7a40 	vmov.f32	s15, s0
 800c36c:	ee15 3a90 	vmov	r3, s11
 800c370:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c374:	1aa4      	subs	r4, r4, r2
 800c376:	2c19      	cmp	r4, #25
 800c378:	dc04      	bgt.n	800c384 <__ieee754_rem_pio2f+0x15c>
 800c37a:	edc5 5a00 	vstr	s11, [r5]
 800c37e:	eeb0 0a66 	vmov.f32	s0, s13
 800c382:	e7c7      	b.n	800c314 <__ieee754_rem_pio2f+0xec>
 800c384:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c470 <__ieee754_rem_pio2f+0x248>
 800c388:	eeb0 0a66 	vmov.f32	s0, s13
 800c38c:	eea7 0a25 	vfma.f32	s0, s14, s11
 800c390:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c394:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c398:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c474 <__ieee754_rem_pio2f+0x24c>
 800c39c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800c3a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c3a4:	ed85 7a00 	vstr	s14, [r5]
 800c3a8:	e7b4      	b.n	800c314 <__ieee754_rem_pio2f+0xec>
 800c3aa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c3ae:	db06      	blt.n	800c3be <__ieee754_rem_pio2f+0x196>
 800c3b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c3b4:	edc0 7a01 	vstr	s15, [r0, #4]
 800c3b8:	edc0 7a00 	vstr	s15, [r0]
 800c3bc:	e742      	b.n	800c244 <__ieee754_rem_pio2f+0x1c>
 800c3be:	15e2      	asrs	r2, r4, #23
 800c3c0:	3a86      	subs	r2, #134	; 0x86
 800c3c2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800c3c6:	ee07 3a90 	vmov	s15, r3
 800c3ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c3ce:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c478 <__ieee754_rem_pio2f+0x250>
 800c3d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c3d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3da:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c3de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c3e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c3ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3ee:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c3f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3fe:	edcd 7a05 	vstr	s15, [sp, #20]
 800c402:	d11e      	bne.n	800c442 <__ieee754_rem_pio2f+0x21a>
 800c404:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c40c:	bf0c      	ite	eq
 800c40e:	2301      	moveq	r3, #1
 800c410:	2302      	movne	r3, #2
 800c412:	491a      	ldr	r1, [pc, #104]	; (800c47c <__ieee754_rem_pio2f+0x254>)
 800c414:	9101      	str	r1, [sp, #4]
 800c416:	2102      	movs	r1, #2
 800c418:	9100      	str	r1, [sp, #0]
 800c41a:	a803      	add	r0, sp, #12
 800c41c:	4629      	mov	r1, r5
 800c41e:	f000 f8a1 	bl	800c564 <__kernel_rem_pio2f>
 800c422:	2e00      	cmp	r6, #0
 800c424:	f6bf af31 	bge.w	800c28a <__ieee754_rem_pio2f+0x62>
 800c428:	edd5 7a00 	vldr	s15, [r5]
 800c42c:	eef1 7a67 	vneg.f32	s15, s15
 800c430:	edc5 7a00 	vstr	s15, [r5]
 800c434:	edd5 7a01 	vldr	s15, [r5, #4]
 800c438:	eef1 7a67 	vneg.f32	s15, s15
 800c43c:	edc5 7a01 	vstr	s15, [r5, #4]
 800c440:	e77a      	b.n	800c338 <__ieee754_rem_pio2f+0x110>
 800c442:	2303      	movs	r3, #3
 800c444:	e7e5      	b.n	800c412 <__ieee754_rem_pio2f+0x1ea>
 800c446:	bf00      	nop
 800c448:	3f490fd8 	.word	0x3f490fd8
 800c44c:	4016cbe3 	.word	0x4016cbe3
 800c450:	3fc90f80 	.word	0x3fc90f80
 800c454:	3fc90fd0 	.word	0x3fc90fd0
 800c458:	37354400 	.word	0x37354400
 800c45c:	37354443 	.word	0x37354443
 800c460:	2e85a308 	.word	0x2e85a308
 800c464:	43490f80 	.word	0x43490f80
 800c468:	3f22f984 	.word	0x3f22f984
 800c46c:	0800d364 	.word	0x0800d364
 800c470:	2e85a300 	.word	0x2e85a300
 800c474:	248d3132 	.word	0x248d3132
 800c478:	43800000 	.word	0x43800000
 800c47c:	0800d3e4 	.word	0x0800d3e4

0800c480 <__ieee754_sinhf>:
 800c480:	b510      	push	{r4, lr}
 800c482:	ee10 3a10 	vmov	r3, s0
 800c486:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c48a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c48e:	ed2d 8b02 	vpush	{d8}
 800c492:	eef0 7a40 	vmov.f32	s15, s0
 800c496:	db06      	blt.n	800c4a6 <__ieee754_sinhf+0x26>
 800c498:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c49c:	ecbd 8b02 	vpop	{d8}
 800c4a0:	eeb0 0a67 	vmov.f32	s0, s15
 800c4a4:	bd10      	pop	{r4, pc}
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	4b28      	ldr	r3, [pc, #160]	; (800c54c <__ieee754_sinhf+0xcc>)
 800c4aa:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800c4ae:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800c4b2:	fe28 8a88 	vselge.f32	s16, s17, s16
 800c4b6:	429c      	cmp	r4, r3
 800c4b8:	dc2a      	bgt.n	800c510 <__ieee754_sinhf+0x90>
 800c4ba:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800c4be:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c4c2:	da08      	bge.n	800c4d6 <__ieee754_sinhf+0x56>
 800c4c4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c550 <__ieee754_sinhf+0xd0>
 800c4c8:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c4cc:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800c4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d4:	dce2      	bgt.n	800c49c <__ieee754_sinhf+0x1c>
 800c4d6:	eeb0 0a67 	vmov.f32	s0, s15
 800c4da:	f7ff fc63 	bl	800bda4 <fabsf>
 800c4de:	f000 fbf5 	bl	800cccc <expm1f>
 800c4e2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c4e6:	bfbb      	ittet	lt
 800c4e8:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800c4ec:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800c4f0:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800c4f4:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800c4f8:	bfad      	iteet	ge
 800c4fa:	eec0 7a28 	vdivge.f32	s15, s0, s17
 800c4fe:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800c502:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800c506:	ee77 7a80 	vaddge.f32	s15, s15, s0
 800c50a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800c50e:	e7c5      	b.n	800c49c <__ieee754_sinhf+0x1c>
 800c510:	4b10      	ldr	r3, [pc, #64]	; (800c554 <__ieee754_sinhf+0xd4>)
 800c512:	429c      	cmp	r4, r3
 800c514:	dc06      	bgt.n	800c524 <__ieee754_sinhf+0xa4>
 800c516:	f7ff fc45 	bl	800bda4 <fabsf>
 800c51a:	f7ff fbc5 	bl	800bca8 <expf>
 800c51e:	ee60 7a08 	vmul.f32	s15, s0, s16
 800c522:	e7bb      	b.n	800c49c <__ieee754_sinhf+0x1c>
 800c524:	4b0c      	ldr	r3, [pc, #48]	; (800c558 <__ieee754_sinhf+0xd8>)
 800c526:	429c      	cmp	r4, r3
 800c528:	dc0a      	bgt.n	800c540 <__ieee754_sinhf+0xc0>
 800c52a:	f7ff fc3b 	bl	800bda4 <fabsf>
 800c52e:	ee20 0a28 	vmul.f32	s0, s0, s17
 800c532:	f7ff fbb9 	bl	800bca8 <expf>
 800c536:	ee68 7a00 	vmul.f32	s15, s16, s0
 800c53a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c53e:	e7ad      	b.n	800c49c <__ieee754_sinhf+0x1c>
 800c540:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800c550 <__ieee754_sinhf+0xd0>
 800c544:	ee60 7a07 	vmul.f32	s15, s0, s14
 800c548:	e7a8      	b.n	800c49c <__ieee754_sinhf+0x1c>
 800c54a:	bf00      	nop
 800c54c:	41afffff 	.word	0x41afffff
 800c550:	7cf0bdc2 	.word	0x7cf0bdc2
 800c554:	42b17217 	.word	0x42b17217
 800c558:	42b2d4fc 	.word	0x42b2d4fc

0800c55c <__ieee754_sqrtf>:
 800c55c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c560:	4770      	bx	lr
	...

0800c564 <__kernel_rem_pio2f>:
 800c564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c568:	ed2d 8b04 	vpush	{d8-d9}
 800c56c:	b0d7      	sub	sp, #348	; 0x15c
 800c56e:	469b      	mov	fp, r3
 800c570:	460e      	mov	r6, r1
 800c572:	4bbe      	ldr	r3, [pc, #760]	; (800c86c <__kernel_rem_pio2f+0x308>)
 800c574:	9964      	ldr	r1, [sp, #400]	; 0x190
 800c576:	9002      	str	r0, [sp, #8]
 800c578:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c57c:	9865      	ldr	r0, [sp, #404]	; 0x194
 800c57e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800c87c <__kernel_rem_pio2f+0x318>
 800c582:	1ed1      	subs	r1, r2, #3
 800c584:	2308      	movs	r3, #8
 800c586:	fb91 f1f3 	sdiv	r1, r1, r3
 800c58a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800c58e:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800c592:	1c4c      	adds	r4, r1, #1
 800c594:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800c598:	eba1 050a 	sub.w	r5, r1, sl
 800c59c:	aa1a      	add	r2, sp, #104	; 0x68
 800c59e:	eb09 070a 	add.w	r7, r9, sl
 800c5a2:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800c5a6:	4696      	mov	lr, r2
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	42bb      	cmp	r3, r7
 800c5ac:	dd0f      	ble.n	800c5ce <__kernel_rem_pio2f+0x6a>
 800c5ae:	af42      	add	r7, sp, #264	; 0x108
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	454a      	cmp	r2, r9
 800c5b4:	dc27      	bgt.n	800c606 <__kernel_rem_pio2f+0xa2>
 800c5b6:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800c5ba:	eb0b 0302 	add.w	r3, fp, r2
 800c5be:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800c5c2:	9d02      	ldr	r5, [sp, #8]
 800c5c4:	eddf 7aad 	vldr	s15, [pc, #692]	; 800c87c <__kernel_rem_pio2f+0x318>
 800c5c8:	f04f 0c00 	mov.w	ip, #0
 800c5cc:	e015      	b.n	800c5fa <__kernel_rem_pio2f+0x96>
 800c5ce:	42dd      	cmn	r5, r3
 800c5d0:	bf5d      	ittte	pl
 800c5d2:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800c5d6:	ee07 2a90 	vmovpl	s15, r2
 800c5da:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c5de:	eef0 7a47 	vmovmi.f32	s15, s14
 800c5e2:	ecee 7a01 	vstmia	lr!, {s15}
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	e7df      	b.n	800c5aa <__kernel_rem_pio2f+0x46>
 800c5ea:	ecf5 6a01 	vldmia	r5!, {s13}
 800c5ee:	ed33 7a01 	vldmdb	r3!, {s14}
 800c5f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c5f6:	f10c 0c01 	add.w	ip, ip, #1
 800c5fa:	45d4      	cmp	ip, sl
 800c5fc:	ddf5      	ble.n	800c5ea <__kernel_rem_pio2f+0x86>
 800c5fe:	ece7 7a01 	vstmia	r7!, {s15}
 800c602:	3201      	adds	r2, #1
 800c604:	e7d5      	b.n	800c5b2 <__kernel_rem_pio2f+0x4e>
 800c606:	ab06      	add	r3, sp, #24
 800c608:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800c878 <__kernel_rem_pio2f+0x314>
 800c612:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800c874 <__kernel_rem_pio2f+0x310>
 800c616:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800c61a:	9303      	str	r3, [sp, #12]
 800c61c:	464d      	mov	r5, r9
 800c61e:	ab56      	add	r3, sp, #344	; 0x158
 800c620:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800c624:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c628:	3f01      	subs	r7, #1
 800c62a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c62e:	00bf      	lsls	r7, r7, #2
 800c630:	ab56      	add	r3, sp, #344	; 0x158
 800c632:	19da      	adds	r2, r3, r7
 800c634:	3a4c      	subs	r2, #76	; 0x4c
 800c636:	2300      	movs	r3, #0
 800c638:	1ae9      	subs	r1, r5, r3
 800c63a:	2900      	cmp	r1, #0
 800c63c:	dc4c      	bgt.n	800c6d8 <__kernel_rem_pio2f+0x174>
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 fcba 	bl	800cfb8 <scalbnf>
 800c644:	eeb0 8a40 	vmov.f32	s16, s0
 800c648:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c64c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c650:	f000 fc70 	bl	800cf34 <floorf>
 800c654:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c658:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c65c:	2c00      	cmp	r4, #0
 800c65e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c662:	edcd 7a01 	vstr	s15, [sp, #4]
 800c666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c66a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c66e:	dd48      	ble.n	800c702 <__kernel_rem_pio2f+0x19e>
 800c670:	1e69      	subs	r1, r5, #1
 800c672:	ab06      	add	r3, sp, #24
 800c674:	f1c4 0008 	rsb	r0, r4, #8
 800c678:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800c67c:	9a01      	ldr	r2, [sp, #4]
 800c67e:	fa4c f300 	asr.w	r3, ip, r0
 800c682:	441a      	add	r2, r3
 800c684:	4083      	lsls	r3, r0
 800c686:	9201      	str	r2, [sp, #4]
 800c688:	ebac 0203 	sub.w	r2, ip, r3
 800c68c:	ab06      	add	r3, sp, #24
 800c68e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800c692:	f1c4 0307 	rsb	r3, r4, #7
 800c696:	fa42 f803 	asr.w	r8, r2, r3
 800c69a:	f1b8 0f00 	cmp.w	r8, #0
 800c69e:	dd41      	ble.n	800c724 <__kernel_rem_pio2f+0x1c0>
 800c6a0:	9b01      	ldr	r3, [sp, #4]
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	9301      	str	r3, [sp, #4]
 800c6a8:	4601      	mov	r1, r0
 800c6aa:	4285      	cmp	r5, r0
 800c6ac:	dc6d      	bgt.n	800c78a <__kernel_rem_pio2f+0x226>
 800c6ae:	2c00      	cmp	r4, #0
 800c6b0:	dd04      	ble.n	800c6bc <__kernel_rem_pio2f+0x158>
 800c6b2:	2c01      	cmp	r4, #1
 800c6b4:	d07e      	beq.n	800c7b4 <__kernel_rem_pio2f+0x250>
 800c6b6:	2c02      	cmp	r4, #2
 800c6b8:	f000 8086 	beq.w	800c7c8 <__kernel_rem_pio2f+0x264>
 800c6bc:	f1b8 0f02 	cmp.w	r8, #2
 800c6c0:	d130      	bne.n	800c724 <__kernel_rem_pio2f+0x1c0>
 800c6c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c6c6:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c6ca:	b359      	cbz	r1, 800c724 <__kernel_rem_pio2f+0x1c0>
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f000 fc73 	bl	800cfb8 <scalbnf>
 800c6d2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c6d6:	e025      	b.n	800c724 <__kernel_rem_pio2f+0x1c0>
 800c6d8:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c6dc:	a806      	add	r0, sp, #24
 800c6de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6e6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c6ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c6ee:	ee10 1a10 	vmov	r1, s0
 800c6f2:	ed32 0a01 	vldmdb	r2!, {s0}
 800c6f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800c6fa:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c6fe:	3301      	adds	r3, #1
 800c700:	e79a      	b.n	800c638 <__kernel_rem_pio2f+0xd4>
 800c702:	d106      	bne.n	800c712 <__kernel_rem_pio2f+0x1ae>
 800c704:	1e6b      	subs	r3, r5, #1
 800c706:	aa06      	add	r2, sp, #24
 800c708:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c70c:	ea4f 2822 	mov.w	r8, r2, asr #8
 800c710:	e7c3      	b.n	800c69a <__kernel_rem_pio2f+0x136>
 800c712:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c716:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c71e:	da31      	bge.n	800c784 <__kernel_rem_pio2f+0x220>
 800c720:	f04f 0800 	mov.w	r8, #0
 800c724:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72c:	f040 80a8 	bne.w	800c880 <__kernel_rem_pio2f+0x31c>
 800c730:	1e6b      	subs	r3, r5, #1
 800c732:	4618      	mov	r0, r3
 800c734:	2200      	movs	r2, #0
 800c736:	4548      	cmp	r0, r9
 800c738:	da4d      	bge.n	800c7d6 <__kernel_rem_pio2f+0x272>
 800c73a:	2a00      	cmp	r2, #0
 800c73c:	f000 8087 	beq.w	800c84e <__kernel_rem_pio2f+0x2ea>
 800c740:	aa06      	add	r2, sp, #24
 800c742:	3c08      	subs	r4, #8
 800c744:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c748:	2900      	cmp	r1, #0
 800c74a:	f000 808d 	beq.w	800c868 <__kernel_rem_pio2f+0x304>
 800c74e:	4620      	mov	r0, r4
 800c750:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c754:	9302      	str	r3, [sp, #8]
 800c756:	f000 fc2f 	bl	800cfb8 <scalbnf>
 800c75a:	9b02      	ldr	r3, [sp, #8]
 800c75c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c878 <__kernel_rem_pio2f+0x314>
 800c760:	0099      	lsls	r1, r3, #2
 800c762:	aa42      	add	r2, sp, #264	; 0x108
 800c764:	1850      	adds	r0, r2, r1
 800c766:	1d05      	adds	r5, r0, #4
 800c768:	461c      	mov	r4, r3
 800c76a:	2c00      	cmp	r4, #0
 800c76c:	f280 80b8 	bge.w	800c8e0 <__kernel_rem_pio2f+0x37c>
 800c770:	2500      	movs	r5, #0
 800c772:	1b5c      	subs	r4, r3, r5
 800c774:	2c00      	cmp	r4, #0
 800c776:	f2c0 80d8 	blt.w	800c92a <__kernel_rem_pio2f+0x3c6>
 800c77a:	4f3d      	ldr	r7, [pc, #244]	; (800c870 <__kernel_rem_pio2f+0x30c>)
 800c77c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800c87c <__kernel_rem_pio2f+0x318>
 800c780:	2400      	movs	r4, #0
 800c782:	e0c6      	b.n	800c912 <__kernel_rem_pio2f+0x3ae>
 800c784:	f04f 0802 	mov.w	r8, #2
 800c788:	e78a      	b.n	800c6a0 <__kernel_rem_pio2f+0x13c>
 800c78a:	ab06      	add	r3, sp, #24
 800c78c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c790:	b949      	cbnz	r1, 800c7a6 <__kernel_rem_pio2f+0x242>
 800c792:	b12b      	cbz	r3, 800c7a0 <__kernel_rem_pio2f+0x23c>
 800c794:	aa06      	add	r2, sp, #24
 800c796:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c79a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c79e:	2301      	movs	r3, #1
 800c7a0:	3001      	adds	r0, #1
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	e781      	b.n	800c6aa <__kernel_rem_pio2f+0x146>
 800c7a6:	aa06      	add	r2, sp, #24
 800c7a8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c7ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	e7f5      	b.n	800c7a0 <__kernel_rem_pio2f+0x23c>
 800c7b4:	1e68      	subs	r0, r5, #1
 800c7b6:	ab06      	add	r3, sp, #24
 800c7b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7c0:	aa06      	add	r2, sp, #24
 800c7c2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c7c6:	e779      	b.n	800c6bc <__kernel_rem_pio2f+0x158>
 800c7c8:	1e68      	subs	r0, r5, #1
 800c7ca:	ab06      	add	r3, sp, #24
 800c7cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c7d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7d4:	e7f4      	b.n	800c7c0 <__kernel_rem_pio2f+0x25c>
 800c7d6:	a906      	add	r1, sp, #24
 800c7d8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c7dc:	3801      	subs	r0, #1
 800c7de:	430a      	orrs	r2, r1
 800c7e0:	e7a9      	b.n	800c736 <__kernel_rem_pio2f+0x1d2>
 800c7e2:	f10c 0c01 	add.w	ip, ip, #1
 800c7e6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c7ea:	2a00      	cmp	r2, #0
 800c7ec:	d0f9      	beq.n	800c7e2 <__kernel_rem_pio2f+0x27e>
 800c7ee:	eb0b 0305 	add.w	r3, fp, r5
 800c7f2:	aa1a      	add	r2, sp, #104	; 0x68
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	1898      	adds	r0, r3, r2
 800c7f8:	3004      	adds	r0, #4
 800c7fa:	1c69      	adds	r1, r5, #1
 800c7fc:	3704      	adds	r7, #4
 800c7fe:	2200      	movs	r2, #0
 800c800:	4465      	add	r5, ip
 800c802:	9005      	str	r0, [sp, #20]
 800c804:	428d      	cmp	r5, r1
 800c806:	f6ff af0a 	blt.w	800c61e <__kernel_rem_pio2f+0xba>
 800c80a:	a81a      	add	r0, sp, #104	; 0x68
 800c80c:	eb02 0c03 	add.w	ip, r2, r3
 800c810:	4484      	add	ip, r0
 800c812:	9803      	ldr	r0, [sp, #12]
 800c814:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c818:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800c81c:	9001      	str	r0, [sp, #4]
 800c81e:	ee07 0a90 	vmov	s15, r0
 800c822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c826:	9805      	ldr	r0, [sp, #20]
 800c828:	edcc 7a00 	vstr	s15, [ip]
 800c82c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c87c <__kernel_rem_pio2f+0x318>
 800c830:	eb00 0802 	add.w	r8, r0, r2
 800c834:	f04f 0c00 	mov.w	ip, #0
 800c838:	45d4      	cmp	ip, sl
 800c83a:	dd0c      	ble.n	800c856 <__kernel_rem_pio2f+0x2f2>
 800c83c:	eb02 0c07 	add.w	ip, r2, r7
 800c840:	a842      	add	r0, sp, #264	; 0x108
 800c842:	4484      	add	ip, r0
 800c844:	edcc 7a01 	vstr	s15, [ip, #4]
 800c848:	3101      	adds	r1, #1
 800c84a:	3204      	adds	r2, #4
 800c84c:	e7da      	b.n	800c804 <__kernel_rem_pio2f+0x2a0>
 800c84e:	9b04      	ldr	r3, [sp, #16]
 800c850:	f04f 0c01 	mov.w	ip, #1
 800c854:	e7c7      	b.n	800c7e6 <__kernel_rem_pio2f+0x282>
 800c856:	ecfe 6a01 	vldmia	lr!, {s13}
 800c85a:	ed38 7a01 	vldmdb	r8!, {s14}
 800c85e:	f10c 0c01 	add.w	ip, ip, #1
 800c862:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c866:	e7e7      	b.n	800c838 <__kernel_rem_pio2f+0x2d4>
 800c868:	3b01      	subs	r3, #1
 800c86a:	e769      	b.n	800c740 <__kernel_rem_pio2f+0x1dc>
 800c86c:	0800d728 	.word	0x0800d728
 800c870:	0800d6fc 	.word	0x0800d6fc
 800c874:	43800000 	.word	0x43800000
 800c878:	3b800000 	.word	0x3b800000
 800c87c:	00000000 	.word	0x00000000
 800c880:	4260      	negs	r0, r4
 800c882:	eeb0 0a48 	vmov.f32	s0, s16
 800c886:	f000 fb97 	bl	800cfb8 <scalbnf>
 800c88a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800c874 <__kernel_rem_pio2f+0x310>
 800c88e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c896:	db1a      	blt.n	800c8ce <__kernel_rem_pio2f+0x36a>
 800c898:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c878 <__kernel_rem_pio2f+0x314>
 800c89c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c8a0:	aa06      	add	r2, sp, #24
 800c8a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8a6:	a906      	add	r1, sp, #24
 800c8a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8ac:	3408      	adds	r4, #8
 800c8ae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c8b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c8ba:	ee10 3a10 	vmov	r3, s0
 800c8be:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c8c2:	1c6b      	adds	r3, r5, #1
 800c8c4:	ee17 2a90 	vmov	r2, s15
 800c8c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c8cc:	e73f      	b.n	800c74e <__kernel_rem_pio2f+0x1ea>
 800c8ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c8d2:	aa06      	add	r2, sp, #24
 800c8d4:	ee10 3a10 	vmov	r3, s0
 800c8d8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c8dc:	462b      	mov	r3, r5
 800c8de:	e736      	b.n	800c74e <__kernel_rem_pio2f+0x1ea>
 800c8e0:	aa06      	add	r2, sp, #24
 800c8e2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800c8e6:	9202      	str	r2, [sp, #8]
 800c8e8:	ee07 2a90 	vmov	s15, r2
 800c8ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8f0:	3c01      	subs	r4, #1
 800c8f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c8f6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c8fa:	ed65 7a01 	vstmdb	r5!, {s15}
 800c8fe:	e734      	b.n	800c76a <__kernel_rem_pio2f+0x206>
 800c900:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800c904:	ecf7 6a01 	vldmia	r7!, {s13}
 800c908:	ed9c 7a00 	vldr	s14, [ip]
 800c90c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c910:	3401      	adds	r4, #1
 800c912:	454c      	cmp	r4, r9
 800c914:	dc01      	bgt.n	800c91a <__kernel_rem_pio2f+0x3b6>
 800c916:	42a5      	cmp	r5, r4
 800c918:	daf2      	bge.n	800c900 <__kernel_rem_pio2f+0x39c>
 800c91a:	aa56      	add	r2, sp, #344	; 0x158
 800c91c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800c920:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800c924:	3501      	adds	r5, #1
 800c926:	3804      	subs	r0, #4
 800c928:	e723      	b.n	800c772 <__kernel_rem_pio2f+0x20e>
 800c92a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c92c:	2a03      	cmp	r2, #3
 800c92e:	d84d      	bhi.n	800c9cc <__kernel_rem_pio2f+0x468>
 800c930:	e8df f002 	tbb	[pc, r2]
 800c934:	021f1f3e 	.word	0x021f1f3e
 800c938:	aa56      	add	r2, sp, #344	; 0x158
 800c93a:	4411      	add	r1, r2
 800c93c:	399c      	subs	r1, #156	; 0x9c
 800c93e:	4608      	mov	r0, r1
 800c940:	461c      	mov	r4, r3
 800c942:	2c00      	cmp	r4, #0
 800c944:	dc5f      	bgt.n	800ca06 <__kernel_rem_pio2f+0x4a2>
 800c946:	4608      	mov	r0, r1
 800c948:	461c      	mov	r4, r3
 800c94a:	2c01      	cmp	r4, #1
 800c94c:	dc6b      	bgt.n	800ca26 <__kernel_rem_pio2f+0x4c2>
 800c94e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800c87c <__kernel_rem_pio2f+0x318>
 800c952:	2b01      	cmp	r3, #1
 800c954:	dc77      	bgt.n	800ca46 <__kernel_rem_pio2f+0x4e2>
 800c956:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c95a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c95e:	f1b8 0f00 	cmp.w	r8, #0
 800c962:	d176      	bne.n	800ca52 <__kernel_rem_pio2f+0x4ee>
 800c964:	edc6 6a00 	vstr	s13, [r6]
 800c968:	ed86 7a01 	vstr	s14, [r6, #4]
 800c96c:	edc6 7a02 	vstr	s15, [r6, #8]
 800c970:	e02c      	b.n	800c9cc <__kernel_rem_pio2f+0x468>
 800c972:	aa56      	add	r2, sp, #344	; 0x158
 800c974:	4411      	add	r1, r2
 800c976:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800c87c <__kernel_rem_pio2f+0x318>
 800c97a:	399c      	subs	r1, #156	; 0x9c
 800c97c:	4618      	mov	r0, r3
 800c97e:	2800      	cmp	r0, #0
 800c980:	da32      	bge.n	800c9e8 <__kernel_rem_pio2f+0x484>
 800c982:	f1b8 0f00 	cmp.w	r8, #0
 800c986:	d035      	beq.n	800c9f4 <__kernel_rem_pio2f+0x490>
 800c988:	eef1 7a47 	vneg.f32	s15, s14
 800c98c:	edc6 7a00 	vstr	s15, [r6]
 800c990:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c998:	a82f      	add	r0, sp, #188	; 0xbc
 800c99a:	2101      	movs	r1, #1
 800c99c:	428b      	cmp	r3, r1
 800c99e:	da2c      	bge.n	800c9fa <__kernel_rem_pio2f+0x496>
 800c9a0:	f1b8 0f00 	cmp.w	r8, #0
 800c9a4:	d001      	beq.n	800c9aa <__kernel_rem_pio2f+0x446>
 800c9a6:	eef1 7a67 	vneg.f32	s15, s15
 800c9aa:	edc6 7a01 	vstr	s15, [r6, #4]
 800c9ae:	e00d      	b.n	800c9cc <__kernel_rem_pio2f+0x468>
 800c9b0:	aa56      	add	r2, sp, #344	; 0x158
 800c9b2:	4411      	add	r1, r2
 800c9b4:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c87c <__kernel_rem_pio2f+0x318>
 800c9b8:	399c      	subs	r1, #156	; 0x9c
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	da0e      	bge.n	800c9dc <__kernel_rem_pio2f+0x478>
 800c9be:	f1b8 0f00 	cmp.w	r8, #0
 800c9c2:	d001      	beq.n	800c9c8 <__kernel_rem_pio2f+0x464>
 800c9c4:	eef1 7a67 	vneg.f32	s15, s15
 800c9c8:	edc6 7a00 	vstr	s15, [r6]
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	f003 0007 	and.w	r0, r3, #7
 800c9d2:	b057      	add	sp, #348	; 0x15c
 800c9d4:	ecbd 8b04 	vpop	{d8-d9}
 800c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9dc:	ed31 7a01 	vldmdb	r1!, {s14}
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9e6:	e7e8      	b.n	800c9ba <__kernel_rem_pio2f+0x456>
 800c9e8:	ed71 7a01 	vldmdb	r1!, {s15}
 800c9ec:	3801      	subs	r0, #1
 800c9ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9f2:	e7c4      	b.n	800c97e <__kernel_rem_pio2f+0x41a>
 800c9f4:	eef0 7a47 	vmov.f32	s15, s14
 800c9f8:	e7c8      	b.n	800c98c <__kernel_rem_pio2f+0x428>
 800c9fa:	ecb0 7a01 	vldmia	r0!, {s14}
 800c9fe:	3101      	adds	r1, #1
 800ca00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca04:	e7ca      	b.n	800c99c <__kernel_rem_pio2f+0x438>
 800ca06:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ca0a:	ed70 6a01 	vldmdb	r0!, {s13}
 800ca0e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ca12:	3c01      	subs	r4, #1
 800ca14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca18:	ed00 7a01 	vstr	s14, [r0, #-4]
 800ca1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca20:	edc0 7a00 	vstr	s15, [r0]
 800ca24:	e78d      	b.n	800c942 <__kernel_rem_pio2f+0x3de>
 800ca26:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ca2a:	ed70 6a01 	vldmdb	r0!, {s13}
 800ca2e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ca32:	3c01      	subs	r4, #1
 800ca34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca38:	ed00 7a01 	vstr	s14, [r0, #-4]
 800ca3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca40:	edc0 7a00 	vstr	s15, [r0]
 800ca44:	e781      	b.n	800c94a <__kernel_rem_pio2f+0x3e6>
 800ca46:	ed31 7a01 	vldmdb	r1!, {s14}
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca50:	e77f      	b.n	800c952 <__kernel_rem_pio2f+0x3ee>
 800ca52:	eef1 6a66 	vneg.f32	s13, s13
 800ca56:	eeb1 7a47 	vneg.f32	s14, s14
 800ca5a:	edc6 6a00 	vstr	s13, [r6]
 800ca5e:	ed86 7a01 	vstr	s14, [r6, #4]
 800ca62:	eef1 7a67 	vneg.f32	s15, s15
 800ca66:	e781      	b.n	800c96c <__kernel_rem_pio2f+0x408>

0800ca68 <__kernel_tanf>:
 800ca68:	b508      	push	{r3, lr}
 800ca6a:	ee10 3a10 	vmov	r3, s0
 800ca6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ca72:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800ca76:	eef0 7a40 	vmov.f32	s15, s0
 800ca7a:	da17      	bge.n	800caac <__kernel_tanf+0x44>
 800ca7c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800ca80:	ee17 1a10 	vmov	r1, s14
 800ca84:	bb41      	cbnz	r1, 800cad8 <__kernel_tanf+0x70>
 800ca86:	1c43      	adds	r3, r0, #1
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	d108      	bne.n	800ca9e <__kernel_tanf+0x36>
 800ca8c:	f7ff f98a 	bl	800bda4 <fabsf>
 800ca90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ca98:	eeb0 0a67 	vmov.f32	s0, s15
 800ca9c:	bd08      	pop	{r3, pc}
 800ca9e:	2801      	cmp	r0, #1
 800caa0:	d0fa      	beq.n	800ca98 <__kernel_tanf+0x30>
 800caa2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800caa6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800caaa:	e7f5      	b.n	800ca98 <__kernel_tanf+0x30>
 800caac:	494e      	ldr	r1, [pc, #312]	; (800cbe8 <__kernel_tanf+0x180>)
 800caae:	428a      	cmp	r2, r1
 800cab0:	dd12      	ble.n	800cad8 <__kernel_tanf+0x70>
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800cbec <__kernel_tanf+0x184>
 800cab8:	bfb8      	it	lt
 800caba:	eef1 7a40 	vneglt.f32	s15, s0
 800cabe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cac2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800cbf0 <__kernel_tanf+0x188>
 800cac6:	bfb8      	it	lt
 800cac8:	eef1 0a60 	vneglt.f32	s1, s1
 800cacc:	ee77 0a60 	vsub.f32	s1, s14, s1
 800cad0:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800cad4:	eddf 0a47 	vldr	s1, [pc, #284]	; 800cbf4 <__kernel_tanf+0x18c>
 800cad8:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800cbf8 <__kernel_tanf+0x190>
 800cadc:	eddf 5a47 	vldr	s11, [pc, #284]	; 800cbfc <__kernel_tanf+0x194>
 800cae0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800cc00 <__kernel_tanf+0x198>
 800cae4:	4940      	ldr	r1, [pc, #256]	; (800cbe8 <__kernel_tanf+0x180>)
 800cae6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800caea:	428a      	cmp	r2, r1
 800caec:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800caf0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800caf4:	eee7 5a06 	vfma.f32	s11, s14, s12
 800caf8:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800cc04 <__kernel_tanf+0x19c>
 800cafc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cb00:	eddf 5a41 	vldr	s11, [pc, #260]	; 800cc08 <__kernel_tanf+0x1a0>
 800cb04:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb08:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800cc0c <__kernel_tanf+0x1a4>
 800cb0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cb10:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cc10 <__kernel_tanf+0x1a8>
 800cb14:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb18:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800cc14 <__kernel_tanf+0x1ac>
 800cb1c:	eea7 6a05 	vfma.f32	s12, s14, s10
 800cb20:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800cc18 <__kernel_tanf+0x1b0>
 800cb24:	eea6 5a07 	vfma.f32	s10, s12, s14
 800cb28:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800cc1c <__kernel_tanf+0x1b4>
 800cb2c:	eea5 6a07 	vfma.f32	s12, s10, s14
 800cb30:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800cc20 <__kernel_tanf+0x1b8>
 800cb34:	eea6 5a07 	vfma.f32	s10, s12, s14
 800cb38:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800cc24 <__kernel_tanf+0x1bc>
 800cb3c:	eea5 6a07 	vfma.f32	s12, s10, s14
 800cb40:	eeb0 7a46 	vmov.f32	s14, s12
 800cb44:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cb48:	eeb0 6a60 	vmov.f32	s12, s1
 800cb4c:	eea7 6a24 	vfma.f32	s12, s14, s9
 800cb50:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800cc28 <__kernel_tanf+0x1c0>
 800cb54:	eee6 0a26 	vfma.f32	s1, s12, s13
 800cb58:	eee4 0a87 	vfma.f32	s1, s9, s14
 800cb5c:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800cb60:	dd1d      	ble.n	800cb9e <__kernel_tanf+0x136>
 800cb62:	ee07 0a10 	vmov	s14, r0
 800cb66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb6a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800cb6e:	ee76 6a87 	vadd.f32	s13, s13, s14
 800cb72:	179b      	asrs	r3, r3, #30
 800cb74:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800cb78:	f003 0302 	and.w	r3, r3, #2
 800cb7c:	f1c3 0301 	rsb	r3, r3, #1
 800cb80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cb84:	ee76 0a60 	vsub.f32	s1, s12, s1
 800cb88:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cb8c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cb90:	ee07 3a90 	vmov	s15, r3
 800cb94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb9c:	e77c      	b.n	800ca98 <__kernel_tanf+0x30>
 800cb9e:	2801      	cmp	r0, #1
 800cba0:	d01f      	beq.n	800cbe2 <__kernel_tanf+0x17a>
 800cba2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cba6:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800cbaa:	4b20      	ldr	r3, [pc, #128]	; (800cc2c <__kernel_tanf+0x1c4>)
 800cbac:	ee16 2a90 	vmov	r2, s13
 800cbb0:	401a      	ands	r2, r3
 800cbb2:	ee06 2a10 	vmov	s12, r2
 800cbb6:	ee15 2a90 	vmov	r2, s11
 800cbba:	4013      	ands	r3, r2
 800cbbc:	ee07 3a10 	vmov	s14, r3
 800cbc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbc4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cbc8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800cbcc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cbd0:	eef0 7a66 	vmov.f32	s15, s13
 800cbd4:	eee7 7a20 	vfma.f32	s15, s14, s1
 800cbd8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800cbdc:	eef0 7a47 	vmov.f32	s15, s14
 800cbe0:	e75a      	b.n	800ca98 <__kernel_tanf+0x30>
 800cbe2:	eef0 7a66 	vmov.f32	s15, s13
 800cbe6:	e757      	b.n	800ca98 <__kernel_tanf+0x30>
 800cbe8:	3f2ca13f 	.word	0x3f2ca13f
 800cbec:	3f490fda 	.word	0x3f490fda
 800cbf0:	33222168 	.word	0x33222168
 800cbf4:	00000000 	.word	0x00000000
 800cbf8:	37d95384 	.word	0x37d95384
 800cbfc:	3895c07a 	.word	0x3895c07a
 800cc00:	b79bae5f 	.word	0xb79bae5f
 800cc04:	398137b9 	.word	0x398137b9
 800cc08:	3abede48 	.word	0x3abede48
 800cc0c:	3c11371f 	.word	0x3c11371f
 800cc10:	3d5d0dd1 	.word	0x3d5d0dd1
 800cc14:	38a3f445 	.word	0x38a3f445
 800cc18:	3a1a26c8 	.word	0x3a1a26c8
 800cc1c:	3b6b6916 	.word	0x3b6b6916
 800cc20:	3cb327a4 	.word	0x3cb327a4
 800cc24:	3e088889 	.word	0x3e088889
 800cc28:	3eaaaaab 	.word	0x3eaaaaab
 800cc2c:	fffff000 	.word	0xfffff000

0800cc30 <with_errnof>:
 800cc30:	b510      	push	{r4, lr}
 800cc32:	ed2d 8b02 	vpush	{d8}
 800cc36:	eeb0 8a40 	vmov.f32	s16, s0
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	f7ff f802 	bl	800bc44 <__errno>
 800cc40:	eeb0 0a48 	vmov.f32	s0, s16
 800cc44:	ecbd 8b02 	vpop	{d8}
 800cc48:	6004      	str	r4, [r0, #0]
 800cc4a:	bd10      	pop	{r4, pc}

0800cc4c <xflowf>:
 800cc4c:	b130      	cbz	r0, 800cc5c <xflowf+0x10>
 800cc4e:	eef1 7a40 	vneg.f32	s15, s0
 800cc52:	2022      	movs	r0, #34	; 0x22
 800cc54:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cc58:	f7ff bfea 	b.w	800cc30 <with_errnof>
 800cc5c:	eef0 7a40 	vmov.f32	s15, s0
 800cc60:	e7f7      	b.n	800cc52 <xflowf+0x6>
	...

0800cc64 <__math_uflowf>:
 800cc64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cc6c <__math_uflowf+0x8>
 800cc68:	f7ff bff0 	b.w	800cc4c <xflowf>
 800cc6c:	10000000 	.word	0x10000000

0800cc70 <__math_may_uflowf>:
 800cc70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cc78 <__math_may_uflowf+0x8>
 800cc74:	f7ff bfea 	b.w	800cc4c <xflowf>
 800cc78:	1a200000 	.word	0x1a200000

0800cc7c <__math_oflowf>:
 800cc7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cc84 <__math_oflowf+0x8>
 800cc80:	f7ff bfe4 	b.w	800cc4c <xflowf>
 800cc84:	70000000 	.word	0x70000000

0800cc88 <__math_divzerof>:
 800cc88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cc8c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800cc90:	2800      	cmp	r0, #0
 800cc92:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800cc96:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800cca4 <__math_divzerof+0x1c>
 800cc9a:	2022      	movs	r0, #34	; 0x22
 800cc9c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cca0:	f7ff bfc6 	b.w	800cc30 <with_errnof>
 800cca4:	00000000 	.word	0x00000000

0800cca8 <__math_invalidf>:
 800cca8:	eef0 7a40 	vmov.f32	s15, s0
 800ccac:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ccb0:	eef4 7a67 	vcmp.f32	s15, s15
 800ccb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ccbc:	d602      	bvs.n	800ccc4 <__math_invalidf+0x1c>
 800ccbe:	2021      	movs	r0, #33	; 0x21
 800ccc0:	f7ff bfb6 	b.w	800cc30 <with_errnof>
 800ccc4:	4770      	bx	lr

0800ccc6 <matherr>:
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	4770      	bx	lr
	...

0800cccc <expm1f>:
 800cccc:	ee10 2a10 	vmov	r2, s0
 800ccd0:	4984      	ldr	r1, [pc, #528]	; (800cee4 <expm1f+0x218>)
 800ccd2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ccd6:	428b      	cmp	r3, r1
 800ccd8:	d923      	bls.n	800cd22 <expm1f+0x56>
 800ccda:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ccde:	d902      	bls.n	800cce6 <expm1f+0x1a>
 800cce0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cce4:	4770      	bx	lr
 800cce6:	d105      	bne.n	800ccf4 <expm1f+0x28>
 800cce8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ccec:	2a00      	cmp	r2, #0
 800ccee:	fe20 0a27 	vselge.f32	s0, s0, s15
 800ccf2:	4770      	bx	lr
 800ccf4:	2a00      	cmp	r2, #0
 800ccf6:	db08      	blt.n	800cd0a <expm1f+0x3e>
 800ccf8:	4a7b      	ldr	r2, [pc, #492]	; (800cee8 <expm1f+0x21c>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	f240 80ea 	bls.w	800ced4 <expm1f+0x208>
 800cd00:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800ceec <expm1f+0x220>
 800cd04:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cd08:	4770      	bx	lr
 800cd0a:	eddf 7a79 	vldr	s15, [pc, #484]	; 800cef0 <expm1f+0x224>
 800cd0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cd12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd1a:	d554      	bpl.n	800cdc6 <expm1f+0xfa>
 800cd1c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cd20:	4770      	bx	lr
 800cd22:	4974      	ldr	r1, [pc, #464]	; (800cef4 <expm1f+0x228>)
 800cd24:	428b      	cmp	r3, r1
 800cd26:	d96c      	bls.n	800ce02 <expm1f+0x136>
 800cd28:	4973      	ldr	r1, [pc, #460]	; (800cef8 <expm1f+0x22c>)
 800cd2a:	428b      	cmp	r3, r1
 800cd2c:	d84b      	bhi.n	800cdc6 <expm1f+0xfa>
 800cd2e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800cefc <expm1f+0x230>
 800cd32:	2a00      	cmp	r2, #0
 800cd34:	bfa7      	ittee	ge
 800cd36:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800cd3a:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800cf00 <expm1f+0x234>
 800cd3e:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800cf04 <expm1f+0x238>
 800cd42:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800cd46:	bfac      	ite	ge
 800cd48:	2301      	movge	r3, #1
 800cd4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cd4e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800cd52:	ee37 7a40 	vsub.f32	s14, s14, s0
 800cd56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd5a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800cd5e:	ee20 5a25 	vmul.f32	s10, s0, s11
 800cd62:	eddf 6a69 	vldr	s13, [pc, #420]	; 800cf08 <expm1f+0x23c>
 800cd66:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800cf0c <expm1f+0x240>
 800cd6a:	ee20 7a05 	vmul.f32	s14, s0, s10
 800cd6e:	eea7 6a26 	vfma.f32	s12, s14, s13
 800cd72:	eddf 6a67 	vldr	s13, [pc, #412]	; 800cf10 <expm1f+0x244>
 800cd76:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cd7a:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800cf14 <expm1f+0x248>
 800cd7e:	eea6 6a87 	vfma.f32	s12, s13, s14
 800cd82:	eddf 6a65 	vldr	s13, [pc, #404]	; 800cf18 <expm1f+0x24c>
 800cd86:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cd8a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cd8e:	eef0 4a46 	vmov.f32	s9, s12
 800cd92:	eee6 4a87 	vfma.f32	s9, s13, s14
 800cd96:	eef0 6a64 	vmov.f32	s13, s9
 800cd9a:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800cd9e:	eee5 4a66 	vfms.f32	s9, s10, s13
 800cda2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800cda6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800cdaa:	eee0 6a64 	vfms.f32	s13, s0, s9
 800cdae:	eef0 4a66 	vmov.f32	s9, s13
 800cdb2:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800cdb6:	ee66 6a87 	vmul.f32	s13, s13, s14
 800cdba:	bb83      	cbnz	r3, 800ce1e <expm1f+0x152>
 800cdbc:	eef0 7a47 	vmov.f32	s15, s14
 800cdc0:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800cdc4:	e026      	b.n	800ce14 <expm1f+0x148>
 800cdc6:	eddf 7a55 	vldr	s15, [pc, #340]	; 800cf1c <expm1f+0x250>
 800cdca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800cdce:	ee20 7a27 	vmul.f32	s14, s0, s15
 800cdd2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800cdd6:	2a00      	cmp	r2, #0
 800cdd8:	fe66 7aa7 	vselge.f32	s15, s13, s15
 800cddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cde0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800cefc <expm1f+0x230>
 800cde4:	eddf 6a46 	vldr	s13, [pc, #280]	; 800cf00 <expm1f+0x234>
 800cde8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdec:	ee17 3a90 	vmov	r3, s15
 800cdf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdf4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cdf8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cdfc:	eeb0 7a40 	vmov.f32	s14, s0
 800ce00:	e7a5      	b.n	800cd4e <expm1f+0x82>
 800ce02:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800ce06:	d208      	bcs.n	800ce1a <expm1f+0x14e>
 800ce08:	eddf 7a38 	vldr	s15, [pc, #224]	; 800ceec <expm1f+0x220>
 800ce0c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ce10:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800ce14:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ce18:	4770      	bx	lr
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e79d      	b.n	800cd5a <expm1f+0x8e>
 800ce1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ce22:	1c5a      	adds	r2, r3, #1
 800ce24:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800ce28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce2c:	d106      	bne.n	800ce3c <expm1f+0x170>
 800ce2e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ce32:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800ce36:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800ce3a:	4770      	bx	lr
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d118      	bne.n	800ce72 <expm1f+0x1a6>
 800ce40:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800ce44:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ce48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce4c:	bf41      	itttt	mi
 800ce4e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800ce52:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800ce56:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800ce5a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800ce5e:	bf5f      	itttt	pl
 800ce60:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800ce64:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800ce68:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800ce6c:	eeb0 0a46 	vmovpl.f32	s0, s12
 800ce70:	4770      	bx	lr
 800ce72:	1c5a      	adds	r2, r3, #1
 800ce74:	2a39      	cmp	r2, #57	; 0x39
 800ce76:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800ce7a:	d90b      	bls.n	800ce94 <expm1f+0x1c8>
 800ce7c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ce80:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ce84:	ee10 3a10 	vmov	r3, s0
 800ce88:	440b      	add	r3, r1
 800ce8a:	ee00 3a10 	vmov	s0, r3
 800ce8e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ce92:	4770      	bx	lr
 800ce94:	2b16      	cmp	r3, #22
 800ce96:	dc11      	bgt.n	800cebc <expm1f+0x1f0>
 800ce98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce9c:	fa42 f303 	asr.w	r3, r2, r3
 800cea0:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800cea4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cea8:	ee07 3a90 	vmov	s15, r3
 800ceac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ceb0:	ee10 3a10 	vmov	r3, s0
 800ceb4:	440b      	add	r3, r1
 800ceb6:	ee00 3a10 	vmov	s0, r3
 800ceba:	4770      	bx	lr
 800cebc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800cec0:	05db      	lsls	r3, r3, #23
 800cec2:	ee07 3a10 	vmov	s14, r3
 800cec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ceca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cece:	ee30 0a06 	vadd.f32	s0, s0, s12
 800ced2:	e7ed      	b.n	800ceb0 <expm1f+0x1e4>
 800ced4:	eddf 7a11 	vldr	s15, [pc, #68]	; 800cf1c <expm1f+0x250>
 800ced8:	ee20 7a27 	vmul.f32	s14, s0, s15
 800cedc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cee0:	e77c      	b.n	800cddc <expm1f+0x110>
 800cee2:	bf00      	nop
 800cee4:	4195b843 	.word	0x4195b843
 800cee8:	42b17217 	.word	0x42b17217
 800ceec:	7149f2ca 	.word	0x7149f2ca
 800cef0:	0da24260 	.word	0x0da24260
 800cef4:	3eb17218 	.word	0x3eb17218
 800cef8:	3f851591 	.word	0x3f851591
 800cefc:	3f317180 	.word	0x3f317180
 800cf00:	3717f7d1 	.word	0x3717f7d1
 800cf04:	b717f7d1 	.word	0xb717f7d1
 800cf08:	b457edbb 	.word	0xb457edbb
 800cf0c:	36867e54 	.word	0x36867e54
 800cf10:	b8a670cd 	.word	0xb8a670cd
 800cf14:	3ad00d01 	.word	0x3ad00d01
 800cf18:	bd088889 	.word	0xbd088889
 800cf1c:	3fb8aa3b 	.word	0x3fb8aa3b

0800cf20 <finitef>:
 800cf20:	ee10 3a10 	vmov	r3, s0
 800cf24:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800cf28:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800cf2c:	bfac      	ite	ge
 800cf2e:	2000      	movge	r0, #0
 800cf30:	2001      	movlt	r0, #1
 800cf32:	4770      	bx	lr

0800cf34 <floorf>:
 800cf34:	ee10 3a10 	vmov	r3, s0
 800cf38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf3c:	0dca      	lsrs	r2, r1, #23
 800cf3e:	3a7f      	subs	r2, #127	; 0x7f
 800cf40:	2a16      	cmp	r2, #22
 800cf42:	dc2a      	bgt.n	800cf9a <floorf+0x66>
 800cf44:	2a00      	cmp	r2, #0
 800cf46:	da11      	bge.n	800cf6c <floorf+0x38>
 800cf48:	eddf 7a18 	vldr	s15, [pc, #96]	; 800cfac <floorf+0x78>
 800cf4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cf54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf58:	dd05      	ble.n	800cf66 <floorf+0x32>
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	da23      	bge.n	800cfa6 <floorf+0x72>
 800cf5e:	4a14      	ldr	r2, [pc, #80]	; (800cfb0 <floorf+0x7c>)
 800cf60:	2900      	cmp	r1, #0
 800cf62:	bf18      	it	ne
 800cf64:	4613      	movne	r3, r2
 800cf66:	ee00 3a10 	vmov	s0, r3
 800cf6a:	4770      	bx	lr
 800cf6c:	4911      	ldr	r1, [pc, #68]	; (800cfb4 <floorf+0x80>)
 800cf6e:	4111      	asrs	r1, r2
 800cf70:	420b      	tst	r3, r1
 800cf72:	d0fa      	beq.n	800cf6a <floorf+0x36>
 800cf74:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800cfac <floorf+0x78>
 800cf78:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cf80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf84:	ddef      	ble.n	800cf66 <floorf+0x32>
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	bfbe      	ittt	lt
 800cf8a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800cf8e:	fa40 f202 	asrlt.w	r2, r0, r2
 800cf92:	189b      	addlt	r3, r3, r2
 800cf94:	ea23 0301 	bic.w	r3, r3, r1
 800cf98:	e7e5      	b.n	800cf66 <floorf+0x32>
 800cf9a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cf9e:	d3e4      	bcc.n	800cf6a <floorf+0x36>
 800cfa0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cfa4:	4770      	bx	lr
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	e7dd      	b.n	800cf66 <floorf+0x32>
 800cfaa:	bf00      	nop
 800cfac:	7149f2ca 	.word	0x7149f2ca
 800cfb0:	bf800000 	.word	0xbf800000
 800cfb4:	007fffff 	.word	0x007fffff

0800cfb8 <scalbnf>:
 800cfb8:	b508      	push	{r3, lr}
 800cfba:	ee10 2a10 	vmov	r2, s0
 800cfbe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800cfc2:	ed2d 8b02 	vpush	{d8}
 800cfc6:	eef0 0a40 	vmov.f32	s1, s0
 800cfca:	d004      	beq.n	800cfd6 <scalbnf+0x1e>
 800cfcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cfd0:	d306      	bcc.n	800cfe0 <scalbnf+0x28>
 800cfd2:	ee70 0a00 	vadd.f32	s1, s0, s0
 800cfd6:	ecbd 8b02 	vpop	{d8}
 800cfda:	eeb0 0a60 	vmov.f32	s0, s1
 800cfde:	bd08      	pop	{r3, pc}
 800cfe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cfe4:	d21c      	bcs.n	800d020 <scalbnf+0x68>
 800cfe6:	4b1f      	ldr	r3, [pc, #124]	; (800d064 <scalbnf+0xac>)
 800cfe8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d068 <scalbnf+0xb0>
 800cfec:	4298      	cmp	r0, r3
 800cfee:	ee60 0a27 	vmul.f32	s1, s0, s15
 800cff2:	db10      	blt.n	800d016 <scalbnf+0x5e>
 800cff4:	ee10 2a90 	vmov	r2, s1
 800cff8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800cffc:	3b19      	subs	r3, #25
 800cffe:	4403      	add	r3, r0
 800d000:	2bfe      	cmp	r3, #254	; 0xfe
 800d002:	dd0f      	ble.n	800d024 <scalbnf+0x6c>
 800d004:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800d06c <scalbnf+0xb4>
 800d008:	eeb0 0a48 	vmov.f32	s0, s16
 800d00c:	f000 f834 	bl	800d078 <copysignf>
 800d010:	ee60 0a08 	vmul.f32	s1, s0, s16
 800d014:	e7df      	b.n	800cfd6 <scalbnf+0x1e>
 800d016:	eddf 7a16 	vldr	s15, [pc, #88]	; 800d070 <scalbnf+0xb8>
 800d01a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800d01e:	e7da      	b.n	800cfd6 <scalbnf+0x1e>
 800d020:	0ddb      	lsrs	r3, r3, #23
 800d022:	e7ec      	b.n	800cffe <scalbnf+0x46>
 800d024:	2b00      	cmp	r3, #0
 800d026:	dd06      	ble.n	800d036 <scalbnf+0x7e>
 800d028:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d02c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d030:	ee00 3a90 	vmov	s1, r3
 800d034:	e7cf      	b.n	800cfd6 <scalbnf+0x1e>
 800d036:	f113 0f16 	cmn.w	r3, #22
 800d03a:	da06      	bge.n	800d04a <scalbnf+0x92>
 800d03c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d040:	4298      	cmp	r0, r3
 800d042:	dcdf      	bgt.n	800d004 <scalbnf+0x4c>
 800d044:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800d070 <scalbnf+0xb8>
 800d048:	e7de      	b.n	800d008 <scalbnf+0x50>
 800d04a:	3319      	adds	r3, #25
 800d04c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d050:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d054:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d074 <scalbnf+0xbc>
 800d058:	ee07 3a10 	vmov	s14, r3
 800d05c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800d060:	e7b9      	b.n	800cfd6 <scalbnf+0x1e>
 800d062:	bf00      	nop
 800d064:	ffff3cb0 	.word	0xffff3cb0
 800d068:	4c000000 	.word	0x4c000000
 800d06c:	7149f2ca 	.word	0x7149f2ca
 800d070:	0da24260 	.word	0x0da24260
 800d074:	33000000 	.word	0x33000000

0800d078 <copysignf>:
 800d078:	ee10 3a10 	vmov	r3, s0
 800d07c:	ee10 2a90 	vmov	r2, s1
 800d080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d084:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d088:	4313      	orrs	r3, r2
 800d08a:	ee00 3a10 	vmov	s0, r3
 800d08e:	4770      	bx	lr

0800d090 <_init>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	bf00      	nop
 800d094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d096:	bc08      	pop	{r3}
 800d098:	469e      	mov	lr, r3
 800d09a:	4770      	bx	lr

0800d09c <_fini>:
 800d09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09e:	bf00      	nop
 800d0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a2:	bc08      	pop	{r3}
 800d0a4:	469e      	mov	lr, r3
 800d0a6:	4770      	bx	lr
